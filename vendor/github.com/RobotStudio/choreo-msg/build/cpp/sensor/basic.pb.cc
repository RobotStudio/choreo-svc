// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor/basic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor/basic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class FluidPressureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FluidPressure> {
} _FluidPressure_default_instance_;
class IlluminanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Illuminance> {
} _Illuminance_default_instance_;
class HumidityDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Humidity> {
} _Humidity_default_instance_;
class TemperatureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Temperature> {
} _Temperature_default_instance_;
class TimeReferenceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TimeReference> {
} _TimeReference_default_instance_;

namespace protobuf_sensor_2fbasic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, fluid_pressure_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FluidPressure, variance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illuminance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illuminance, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illuminance, illuminance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Illuminance, variance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Humidity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Humidity, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Humidity, relative_humidity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Humidity, variance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, temperature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Temperature, variance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeReference, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeReference, time_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeReference, source_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(FluidPressure)},
  { 8, -1, sizeof(Illuminance)},
  { 16, -1, sizeof(Humidity)},
  { 24, -1, sizeof(Temperature)},
  { 32, -1, sizeof(TimeReference)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FluidPressure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Illuminance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Humidity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Temperature_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeReference_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sensor/basic.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _FluidPressure_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Illuminance_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Humidity_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Temperature_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _TimeReference_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fstring_2eproto::InitDefaults();
  _FluidPressure_default_instance_.DefaultConstruct();
  _Illuminance_default_instance_.DefaultConstruct();
  _Humidity_default_instance_.DefaultConstruct();
  _Temperature_default_instance_.DefaultConstruct();
  _TimeReference_default_instance_.DefaultConstruct();
  _FluidPressure_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _FluidPressure_default_instance_.get_mutable()->fluid_pressure_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _FluidPressure_default_instance_.get_mutable()->variance_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Illuminance_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _Illuminance_default_instance_.get_mutable()->illuminance_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Illuminance_default_instance_.get_mutable()->variance_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Humidity_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _Humidity_default_instance_.get_mutable()->relative_humidity_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Humidity_default_instance_.get_mutable()->variance_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Temperature_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _Temperature_default_instance_.get_mutable()->temperature_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Temperature_default_instance_.get_mutable()->variance_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _TimeReference_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _TimeReference_default_instance_.get_mutable()->time_ref_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _TimeReference_default_instance_.get_mutable()->source_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022sensor/basic.proto\022\006choreo\032\037google/pro"
      "tobuf/timestamp.proto\032\025primitive/float.p"
      "roto\032\026primitive/header.proto\032\026primitive/"
      "string.proto\"{\n\rFluidPressure\022\036\n\006header\030"
      "\001 \001(\0132\016.choreo.Header\022\'\n\016fluid_pressure\030"
      "\002 \001(\0132\017.choreo.Float64\022!\n\010variance\030\003 \001(\013"
      "2\017.choreo.Float64\"v\n\013Illuminance\022\036\n\006head"
      "er\030\001 \001(\0132\016.choreo.Header\022$\n\013illuminance\030"
      "\002 \001(\0132\017.choreo.Float64\022!\n\010variance\030\003 \001(\013"
      "2\017.choreo.Float64\"y\n\010Humidity\022\036\n\006header\030"
      "\001 \001(\0132\016.choreo.Header\022*\n\021relative_humidi"
      "ty\030\002 \001(\0132\017.choreo.Float64\022!\n\010variance\030\003 "
      "\001(\0132\017.choreo.Float64\"v\n\013Temperature\022\036\n\006h"
      "eader\030\001 \001(\0132\016.choreo.Header\022$\n\013temperatu"
      "re\030\002 \001(\0132\017.choreo.Float64\022!\n\010variance\030\003 "
      "\001(\0132\017.choreo.Float64\"}\n\rTimeReference\022\036\n"
      "\006header\030\001 \001(\0132\016.choreo.Header\022,\n\010time_re"
      "f\030\002 \001(\0132\032.google.protobuf.Timestamp\022\036\n\006s"
      "ource\030\003 \001(\0132\016.choreo.StringB+Z)github.co"
      "m/RobotStudio/choreo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 800);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor/basic.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fstring_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sensor_2fbasic_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FluidPressure::kHeaderFieldNumber;
const int FluidPressure::kFluidPressureFieldNumber;
const int FluidPressure::kVarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FluidPressure::FluidPressure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fbasic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.FluidPressure)
}
FluidPressure::FluidPressure(const FluidPressure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_fluid_pressure()) {
    fluid_pressure_ = new ::choreo::Float64(*from.fluid_pressure_);
  } else {
    fluid_pressure_ = NULL;
  }
  if (from.has_variance()) {
    variance_ = new ::choreo::Float64(*from.variance_);
  } else {
    variance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.FluidPressure)
}

void FluidPressure::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&variance_) -
    reinterpret_cast<char*>(&header_) + sizeof(variance_));
  _cached_size_ = 0;
}

FluidPressure::~FluidPressure() {
  // @@protoc_insertion_point(destructor:choreo.FluidPressure)
  SharedDtor();
}

void FluidPressure::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete fluid_pressure_;
  }
  if (this != internal_default_instance()) {
    delete variance_;
  }
}

void FluidPressure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FluidPressure::descriptor() {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FluidPressure& FluidPressure::default_instance() {
  protobuf_sensor_2fbasic_2eproto::InitDefaults();
  return *internal_default_instance();
}

FluidPressure* FluidPressure::New(::google::protobuf::Arena* arena) const {
  FluidPressure* n = new FluidPressure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FluidPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.FluidPressure)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && fluid_pressure_ != NULL) {
    delete fluid_pressure_;
  }
  fluid_pressure_ = NULL;
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) {
    delete variance_;
  }
  variance_ = NULL;
}

bool FluidPressure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.FluidPressure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 fluid_pressure = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fluid_pressure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 variance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.FluidPressure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.FluidPressure)
  return false;
#undef DO_
}

void FluidPressure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.FluidPressure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Float64 fluid_pressure = 2;
  if (this->has_fluid_pressure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->fluid_pressure_, output);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->variance_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.FluidPressure)
}

::google::protobuf::uint8* FluidPressure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.FluidPressure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Float64 fluid_pressure = 2;
  if (this->has_fluid_pressure()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->fluid_pressure_, deterministic, target);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->variance_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.FluidPressure)
  return target;
}

size_t FluidPressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.FluidPressure)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Float64 fluid_pressure = 2;
  if (this->has_fluid_pressure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->fluid_pressure_);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variance_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FluidPressure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.FluidPressure)
  GOOGLE_DCHECK_NE(&from, this);
  const FluidPressure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FluidPressure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.FluidPressure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.FluidPressure)
    MergeFrom(*source);
  }
}

void FluidPressure::MergeFrom(const FluidPressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.FluidPressure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_fluid_pressure()) {
    mutable_fluid_pressure()->::choreo::Float64::MergeFrom(from.fluid_pressure());
  }
  if (from.has_variance()) {
    mutable_variance()->::choreo::Float64::MergeFrom(from.variance());
  }
}

void FluidPressure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.FluidPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FluidPressure::CopyFrom(const FluidPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.FluidPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FluidPressure::IsInitialized() const {
  return true;
}

void FluidPressure::Swap(FluidPressure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FluidPressure::InternalSwap(FluidPressure* other) {
  std::swap(header_, other->header_);
  std::swap(fluid_pressure_, other->fluid_pressure_);
  std::swap(variance_, other->variance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FluidPressure::GetMetadata() const {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FluidPressure

// .choreo.Header header = 1;
bool FluidPressure::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void FluidPressure::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& FluidPressure::header() const {
  // @@protoc_insertion_point(field_get:choreo.FluidPressure.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* FluidPressure::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.FluidPressure.header)
  return header_;
}
::choreo::Header* FluidPressure::release_header() {
  // @@protoc_insertion_point(field_release:choreo.FluidPressure.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void FluidPressure::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.FluidPressure.header)
}

// .choreo.Float64 fluid_pressure = 2;
bool FluidPressure::has_fluid_pressure() const {
  return this != internal_default_instance() && fluid_pressure_ != NULL;
}
void FluidPressure::clear_fluid_pressure() {
  if (GetArenaNoVirtual() == NULL && fluid_pressure_ != NULL) delete fluid_pressure_;
  fluid_pressure_ = NULL;
}
const ::choreo::Float64& FluidPressure::fluid_pressure() const {
  // @@protoc_insertion_point(field_get:choreo.FluidPressure.fluid_pressure)
  return fluid_pressure_ != NULL ? *fluid_pressure_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* FluidPressure::mutable_fluid_pressure() {
  
  if (fluid_pressure_ == NULL) {
    fluid_pressure_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.FluidPressure.fluid_pressure)
  return fluid_pressure_;
}
::choreo::Float64* FluidPressure::release_fluid_pressure() {
  // @@protoc_insertion_point(field_release:choreo.FluidPressure.fluid_pressure)
  
  ::choreo::Float64* temp = fluid_pressure_;
  fluid_pressure_ = NULL;
  return temp;
}
void FluidPressure::set_allocated_fluid_pressure(::choreo::Float64* fluid_pressure) {
  delete fluid_pressure_;
  fluid_pressure_ = fluid_pressure;
  if (fluid_pressure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.FluidPressure.fluid_pressure)
}

// .choreo.Float64 variance = 3;
bool FluidPressure::has_variance() const {
  return this != internal_default_instance() && variance_ != NULL;
}
void FluidPressure::clear_variance() {
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) delete variance_;
  variance_ = NULL;
}
const ::choreo::Float64& FluidPressure::variance() const {
  // @@protoc_insertion_point(field_get:choreo.FluidPressure.variance)
  return variance_ != NULL ? *variance_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* FluidPressure::mutable_variance() {
  
  if (variance_ == NULL) {
    variance_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.FluidPressure.variance)
  return variance_;
}
::choreo::Float64* FluidPressure::release_variance() {
  // @@protoc_insertion_point(field_release:choreo.FluidPressure.variance)
  
  ::choreo::Float64* temp = variance_;
  variance_ = NULL;
  return temp;
}
void FluidPressure::set_allocated_variance(::choreo::Float64* variance) {
  delete variance_;
  variance_ = variance;
  if (variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.FluidPressure.variance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Illuminance::kHeaderFieldNumber;
const int Illuminance::kIlluminanceFieldNumber;
const int Illuminance::kVarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Illuminance::Illuminance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fbasic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Illuminance)
}
Illuminance::Illuminance(const Illuminance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_illuminance()) {
    illuminance_ = new ::choreo::Float64(*from.illuminance_);
  } else {
    illuminance_ = NULL;
  }
  if (from.has_variance()) {
    variance_ = new ::choreo::Float64(*from.variance_);
  } else {
    variance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Illuminance)
}

void Illuminance::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&variance_) -
    reinterpret_cast<char*>(&header_) + sizeof(variance_));
  _cached_size_ = 0;
}

Illuminance::~Illuminance() {
  // @@protoc_insertion_point(destructor:choreo.Illuminance)
  SharedDtor();
}

void Illuminance::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete illuminance_;
  }
  if (this != internal_default_instance()) {
    delete variance_;
  }
}

void Illuminance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Illuminance::descriptor() {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Illuminance& Illuminance::default_instance() {
  protobuf_sensor_2fbasic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Illuminance* Illuminance::New(::google::protobuf::Arena* arena) const {
  Illuminance* n = new Illuminance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Illuminance::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Illuminance)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && illuminance_ != NULL) {
    delete illuminance_;
  }
  illuminance_ = NULL;
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) {
    delete variance_;
  }
  variance_ = NULL;
}

bool Illuminance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Illuminance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 illuminance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_illuminance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 variance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Illuminance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Illuminance)
  return false;
#undef DO_
}

void Illuminance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Illuminance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Float64 illuminance = 2;
  if (this->has_illuminance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->illuminance_, output);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->variance_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Illuminance)
}

::google::protobuf::uint8* Illuminance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Illuminance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Float64 illuminance = 2;
  if (this->has_illuminance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->illuminance_, deterministic, target);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->variance_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Illuminance)
  return target;
}

size_t Illuminance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Illuminance)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Float64 illuminance = 2;
  if (this->has_illuminance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->illuminance_);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variance_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Illuminance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Illuminance)
  GOOGLE_DCHECK_NE(&from, this);
  const Illuminance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Illuminance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Illuminance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Illuminance)
    MergeFrom(*source);
  }
}

void Illuminance::MergeFrom(const Illuminance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Illuminance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_illuminance()) {
    mutable_illuminance()->::choreo::Float64::MergeFrom(from.illuminance());
  }
  if (from.has_variance()) {
    mutable_variance()->::choreo::Float64::MergeFrom(from.variance());
  }
}

void Illuminance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Illuminance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Illuminance::CopyFrom(const Illuminance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Illuminance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Illuminance::IsInitialized() const {
  return true;
}

void Illuminance::Swap(Illuminance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Illuminance::InternalSwap(Illuminance* other) {
  std::swap(header_, other->header_);
  std::swap(illuminance_, other->illuminance_);
  std::swap(variance_, other->variance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Illuminance::GetMetadata() const {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Illuminance

// .choreo.Header header = 1;
bool Illuminance::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Illuminance::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& Illuminance::header() const {
  // @@protoc_insertion_point(field_get:choreo.Illuminance.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* Illuminance::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Illuminance.header)
  return header_;
}
::choreo::Header* Illuminance::release_header() {
  // @@protoc_insertion_point(field_release:choreo.Illuminance.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Illuminance::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Illuminance.header)
}

// .choreo.Float64 illuminance = 2;
bool Illuminance::has_illuminance() const {
  return this != internal_default_instance() && illuminance_ != NULL;
}
void Illuminance::clear_illuminance() {
  if (GetArenaNoVirtual() == NULL && illuminance_ != NULL) delete illuminance_;
  illuminance_ = NULL;
}
const ::choreo::Float64& Illuminance::illuminance() const {
  // @@protoc_insertion_point(field_get:choreo.Illuminance.illuminance)
  return illuminance_ != NULL ? *illuminance_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Illuminance::mutable_illuminance() {
  
  if (illuminance_ == NULL) {
    illuminance_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Illuminance.illuminance)
  return illuminance_;
}
::choreo::Float64* Illuminance::release_illuminance() {
  // @@protoc_insertion_point(field_release:choreo.Illuminance.illuminance)
  
  ::choreo::Float64* temp = illuminance_;
  illuminance_ = NULL;
  return temp;
}
void Illuminance::set_allocated_illuminance(::choreo::Float64* illuminance) {
  delete illuminance_;
  illuminance_ = illuminance;
  if (illuminance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Illuminance.illuminance)
}

// .choreo.Float64 variance = 3;
bool Illuminance::has_variance() const {
  return this != internal_default_instance() && variance_ != NULL;
}
void Illuminance::clear_variance() {
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) delete variance_;
  variance_ = NULL;
}
const ::choreo::Float64& Illuminance::variance() const {
  // @@protoc_insertion_point(field_get:choreo.Illuminance.variance)
  return variance_ != NULL ? *variance_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Illuminance::mutable_variance() {
  
  if (variance_ == NULL) {
    variance_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Illuminance.variance)
  return variance_;
}
::choreo::Float64* Illuminance::release_variance() {
  // @@protoc_insertion_point(field_release:choreo.Illuminance.variance)
  
  ::choreo::Float64* temp = variance_;
  variance_ = NULL;
  return temp;
}
void Illuminance::set_allocated_variance(::choreo::Float64* variance) {
  delete variance_;
  variance_ = variance;
  if (variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Illuminance.variance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Humidity::kHeaderFieldNumber;
const int Humidity::kRelativeHumidityFieldNumber;
const int Humidity::kVarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Humidity::Humidity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fbasic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Humidity)
}
Humidity::Humidity(const Humidity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_relative_humidity()) {
    relative_humidity_ = new ::choreo::Float64(*from.relative_humidity_);
  } else {
    relative_humidity_ = NULL;
  }
  if (from.has_variance()) {
    variance_ = new ::choreo::Float64(*from.variance_);
  } else {
    variance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Humidity)
}

void Humidity::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&variance_) -
    reinterpret_cast<char*>(&header_) + sizeof(variance_));
  _cached_size_ = 0;
}

Humidity::~Humidity() {
  // @@protoc_insertion_point(destructor:choreo.Humidity)
  SharedDtor();
}

void Humidity::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete relative_humidity_;
  }
  if (this != internal_default_instance()) {
    delete variance_;
  }
}

void Humidity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Humidity::descriptor() {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Humidity& Humidity::default_instance() {
  protobuf_sensor_2fbasic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Humidity* Humidity::New(::google::protobuf::Arena* arena) const {
  Humidity* n = new Humidity;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Humidity::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Humidity)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && relative_humidity_ != NULL) {
    delete relative_humidity_;
  }
  relative_humidity_ = NULL;
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) {
    delete variance_;
  }
  variance_ = NULL;
}

bool Humidity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Humidity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 relative_humidity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relative_humidity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 variance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Humidity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Humidity)
  return false;
#undef DO_
}

void Humidity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Humidity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Float64 relative_humidity = 2;
  if (this->has_relative_humidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->relative_humidity_, output);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->variance_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Humidity)
}

::google::protobuf::uint8* Humidity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Humidity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Float64 relative_humidity = 2;
  if (this->has_relative_humidity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->relative_humidity_, deterministic, target);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->variance_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Humidity)
  return target;
}

size_t Humidity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Humidity)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Float64 relative_humidity = 2;
  if (this->has_relative_humidity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relative_humidity_);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variance_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Humidity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Humidity)
  GOOGLE_DCHECK_NE(&from, this);
  const Humidity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Humidity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Humidity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Humidity)
    MergeFrom(*source);
  }
}

void Humidity::MergeFrom(const Humidity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Humidity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_relative_humidity()) {
    mutable_relative_humidity()->::choreo::Float64::MergeFrom(from.relative_humidity());
  }
  if (from.has_variance()) {
    mutable_variance()->::choreo::Float64::MergeFrom(from.variance());
  }
}

void Humidity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Humidity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Humidity::CopyFrom(const Humidity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Humidity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Humidity::IsInitialized() const {
  return true;
}

void Humidity::Swap(Humidity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Humidity::InternalSwap(Humidity* other) {
  std::swap(header_, other->header_);
  std::swap(relative_humidity_, other->relative_humidity_);
  std::swap(variance_, other->variance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Humidity::GetMetadata() const {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Humidity

// .choreo.Header header = 1;
bool Humidity::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Humidity::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& Humidity::header() const {
  // @@protoc_insertion_point(field_get:choreo.Humidity.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* Humidity::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Humidity.header)
  return header_;
}
::choreo::Header* Humidity::release_header() {
  // @@protoc_insertion_point(field_release:choreo.Humidity.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Humidity::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Humidity.header)
}

// .choreo.Float64 relative_humidity = 2;
bool Humidity::has_relative_humidity() const {
  return this != internal_default_instance() && relative_humidity_ != NULL;
}
void Humidity::clear_relative_humidity() {
  if (GetArenaNoVirtual() == NULL && relative_humidity_ != NULL) delete relative_humidity_;
  relative_humidity_ = NULL;
}
const ::choreo::Float64& Humidity::relative_humidity() const {
  // @@protoc_insertion_point(field_get:choreo.Humidity.relative_humidity)
  return relative_humidity_ != NULL ? *relative_humidity_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Humidity::mutable_relative_humidity() {
  
  if (relative_humidity_ == NULL) {
    relative_humidity_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Humidity.relative_humidity)
  return relative_humidity_;
}
::choreo::Float64* Humidity::release_relative_humidity() {
  // @@protoc_insertion_point(field_release:choreo.Humidity.relative_humidity)
  
  ::choreo::Float64* temp = relative_humidity_;
  relative_humidity_ = NULL;
  return temp;
}
void Humidity::set_allocated_relative_humidity(::choreo::Float64* relative_humidity) {
  delete relative_humidity_;
  relative_humidity_ = relative_humidity;
  if (relative_humidity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Humidity.relative_humidity)
}

// .choreo.Float64 variance = 3;
bool Humidity::has_variance() const {
  return this != internal_default_instance() && variance_ != NULL;
}
void Humidity::clear_variance() {
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) delete variance_;
  variance_ = NULL;
}
const ::choreo::Float64& Humidity::variance() const {
  // @@protoc_insertion_point(field_get:choreo.Humidity.variance)
  return variance_ != NULL ? *variance_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Humidity::mutable_variance() {
  
  if (variance_ == NULL) {
    variance_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Humidity.variance)
  return variance_;
}
::choreo::Float64* Humidity::release_variance() {
  // @@protoc_insertion_point(field_release:choreo.Humidity.variance)
  
  ::choreo::Float64* temp = variance_;
  variance_ = NULL;
  return temp;
}
void Humidity::set_allocated_variance(::choreo::Float64* variance) {
  delete variance_;
  variance_ = variance;
  if (variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Humidity.variance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Temperature::kHeaderFieldNumber;
const int Temperature::kTemperatureFieldNumber;
const int Temperature::kVarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Temperature::Temperature()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fbasic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Temperature)
}
Temperature::Temperature(const Temperature& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_temperature()) {
    temperature_ = new ::choreo::Float64(*from.temperature_);
  } else {
    temperature_ = NULL;
  }
  if (from.has_variance()) {
    variance_ = new ::choreo::Float64(*from.variance_);
  } else {
    variance_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Temperature)
}

void Temperature::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&variance_) -
    reinterpret_cast<char*>(&header_) + sizeof(variance_));
  _cached_size_ = 0;
}

Temperature::~Temperature() {
  // @@protoc_insertion_point(destructor:choreo.Temperature)
  SharedDtor();
}

void Temperature::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete temperature_;
  }
  if (this != internal_default_instance()) {
    delete variance_;
  }
}

void Temperature::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Temperature::descriptor() {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Temperature& Temperature::default_instance() {
  protobuf_sensor_2fbasic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Temperature* Temperature::New(::google::protobuf::Arena* arena) const {
  Temperature* n = new Temperature;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Temperature::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Temperature)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) {
    delete temperature_;
  }
  temperature_ = NULL;
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) {
    delete variance_;
  }
  variance_ = NULL;
}

bool Temperature::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Temperature)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 temperature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_temperature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 variance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_variance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Temperature)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Temperature)
  return false;
#undef DO_
}

void Temperature::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Temperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Float64 temperature = 2;
  if (this->has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->temperature_, output);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->variance_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Temperature)
}

::google::protobuf::uint8* Temperature::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Temperature)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Float64 temperature = 2;
  if (this->has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->temperature_, deterministic, target);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->variance_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Temperature)
  return target;
}

size_t Temperature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Temperature)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Float64 temperature = 2;
  if (this->has_temperature()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->temperature_);
  }

  // .choreo.Float64 variance = 3;
  if (this->has_variance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->variance_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Temperature::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Temperature)
  GOOGLE_DCHECK_NE(&from, this);
  const Temperature* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Temperature>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Temperature)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Temperature)
    MergeFrom(*source);
  }
}

void Temperature::MergeFrom(const Temperature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Temperature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_temperature()) {
    mutable_temperature()->::choreo::Float64::MergeFrom(from.temperature());
  }
  if (from.has_variance()) {
    mutable_variance()->::choreo::Float64::MergeFrom(from.variance());
  }
}

void Temperature::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Temperature::CopyFrom(const Temperature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Temperature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Temperature::IsInitialized() const {
  return true;
}

void Temperature::Swap(Temperature* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Temperature::InternalSwap(Temperature* other) {
  std::swap(header_, other->header_);
  std::swap(temperature_, other->temperature_);
  std::swap(variance_, other->variance_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Temperature::GetMetadata() const {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Temperature

// .choreo.Header header = 1;
bool Temperature::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Temperature::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& Temperature::header() const {
  // @@protoc_insertion_point(field_get:choreo.Temperature.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* Temperature::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Temperature.header)
  return header_;
}
::choreo::Header* Temperature::release_header() {
  // @@protoc_insertion_point(field_release:choreo.Temperature.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Temperature::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Temperature.header)
}

// .choreo.Float64 temperature = 2;
bool Temperature::has_temperature() const {
  return this != internal_default_instance() && temperature_ != NULL;
}
void Temperature::clear_temperature() {
  if (GetArenaNoVirtual() == NULL && temperature_ != NULL) delete temperature_;
  temperature_ = NULL;
}
const ::choreo::Float64& Temperature::temperature() const {
  // @@protoc_insertion_point(field_get:choreo.Temperature.temperature)
  return temperature_ != NULL ? *temperature_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Temperature::mutable_temperature() {
  
  if (temperature_ == NULL) {
    temperature_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Temperature.temperature)
  return temperature_;
}
::choreo::Float64* Temperature::release_temperature() {
  // @@protoc_insertion_point(field_release:choreo.Temperature.temperature)
  
  ::choreo::Float64* temp = temperature_;
  temperature_ = NULL;
  return temp;
}
void Temperature::set_allocated_temperature(::choreo::Float64* temperature) {
  delete temperature_;
  temperature_ = temperature;
  if (temperature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Temperature.temperature)
}

// .choreo.Float64 variance = 3;
bool Temperature::has_variance() const {
  return this != internal_default_instance() && variance_ != NULL;
}
void Temperature::clear_variance() {
  if (GetArenaNoVirtual() == NULL && variance_ != NULL) delete variance_;
  variance_ = NULL;
}
const ::choreo::Float64& Temperature::variance() const {
  // @@protoc_insertion_point(field_get:choreo.Temperature.variance)
  return variance_ != NULL ? *variance_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Temperature::mutable_variance() {
  
  if (variance_ == NULL) {
    variance_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Temperature.variance)
  return variance_;
}
::choreo::Float64* Temperature::release_variance() {
  // @@protoc_insertion_point(field_release:choreo.Temperature.variance)
  
  ::choreo::Float64* temp = variance_;
  variance_ = NULL;
  return temp;
}
void Temperature::set_allocated_variance(::choreo::Float64* variance) {
  delete variance_;
  variance_ = variance;
  if (variance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Temperature.variance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeReference::kHeaderFieldNumber;
const int TimeReference::kTimeRefFieldNumber;
const int TimeReference::kSourceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeReference::TimeReference()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fbasic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.TimeReference)
}
TimeReference::TimeReference(const TimeReference& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_time_ref()) {
    time_ref_ = new ::google::protobuf::Timestamp(*from.time_ref_);
  } else {
    time_ref_ = NULL;
  }
  if (from.has_source()) {
    source_ = new ::choreo::String(*from.source_);
  } else {
    source_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.TimeReference)
}

void TimeReference::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&header_) + sizeof(source_));
  _cached_size_ = 0;
}

TimeReference::~TimeReference() {
  // @@protoc_insertion_point(destructor:choreo.TimeReference)
  SharedDtor();
}

void TimeReference::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete time_ref_;
  }
  if (this != internal_default_instance()) {
    delete source_;
  }
}

void TimeReference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeReference::descriptor() {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeReference& TimeReference::default_instance() {
  protobuf_sensor_2fbasic_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeReference* TimeReference::New(::google::protobuf::Arena* arena) const {
  TimeReference* n = new TimeReference;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeReference::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.TimeReference)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && time_ref_ != NULL) {
    delete time_ref_;
  }
  time_ref_ = NULL;
  if (GetArenaNoVirtual() == NULL && source_ != NULL) {
    delete source_;
  }
  source_ = NULL;
}

bool TimeReference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.TimeReference)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp time_ref = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time_ref()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.TimeReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.TimeReference)
  return false;
#undef DO_
}

void TimeReference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.TimeReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .google.protobuf.Timestamp time_ref = 2;
  if (this->has_time_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->time_ref_, output);
  }

  // .choreo.String source = 3;
  if (this->has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->source_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.TimeReference)
}

::google::protobuf::uint8* TimeReference::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.TimeReference)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .google.protobuf.Timestamp time_ref = 2;
  if (this->has_time_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->time_ref_, deterministic, target);
  }

  // .choreo.String source = 3;
  if (this->has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->source_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.TimeReference)
  return target;
}

size_t TimeReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.TimeReference)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .google.protobuf.Timestamp time_ref = 2;
  if (this->has_time_ref()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_ref_);
  }

  // .choreo.String source = 3;
  if (this->has_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->source_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeReference::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.TimeReference)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeReference* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeReference>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.TimeReference)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.TimeReference)
    MergeFrom(*source);
  }
}

void TimeReference::MergeFrom(const TimeReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.TimeReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_time_ref()) {
    mutable_time_ref()->::google::protobuf::Timestamp::MergeFrom(from.time_ref());
  }
  if (from.has_source()) {
    mutable_source()->::choreo::String::MergeFrom(from.source());
  }
}

void TimeReference::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.TimeReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeReference::CopyFrom(const TimeReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.TimeReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeReference::IsInitialized() const {
  return true;
}

void TimeReference::Swap(TimeReference* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeReference::InternalSwap(TimeReference* other) {
  std::swap(header_, other->header_);
  std::swap(time_ref_, other->time_ref_);
  std::swap(source_, other->source_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeReference::GetMetadata() const {
  protobuf_sensor_2fbasic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbasic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeReference

// .choreo.Header header = 1;
bool TimeReference::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TimeReference::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& TimeReference::header() const {
  // @@protoc_insertion_point(field_get:choreo.TimeReference.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* TimeReference::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TimeReference.header)
  return header_;
}
::choreo::Header* TimeReference::release_header() {
  // @@protoc_insertion_point(field_release:choreo.TimeReference.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TimeReference::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TimeReference.header)
}

// .google.protobuf.Timestamp time_ref = 2;
bool TimeReference::has_time_ref() const {
  return this != internal_default_instance() && time_ref_ != NULL;
}
void TimeReference::clear_time_ref() {
  if (GetArenaNoVirtual() == NULL && time_ref_ != NULL) delete time_ref_;
  time_ref_ = NULL;
}
const ::google::protobuf::Timestamp& TimeReference::time_ref() const {
  // @@protoc_insertion_point(field_get:choreo.TimeReference.time_ref)
  return time_ref_ != NULL ? *time_ref_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
::google::protobuf::Timestamp* TimeReference::mutable_time_ref() {
  
  if (time_ref_ == NULL) {
    time_ref_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TimeReference.time_ref)
  return time_ref_;
}
::google::protobuf::Timestamp* TimeReference::release_time_ref() {
  // @@protoc_insertion_point(field_release:choreo.TimeReference.time_ref)
  
  ::google::protobuf::Timestamp* temp = time_ref_;
  time_ref_ = NULL;
  return temp;
}
void TimeReference::set_allocated_time_ref(::google::protobuf::Timestamp* time_ref) {
  delete time_ref_;
  if (time_ref != NULL && time_ref->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_time_ref = new ::google::protobuf::Timestamp;
    new_time_ref->CopyFrom(*time_ref);
    time_ref = new_time_ref;
  }
  time_ref_ = time_ref;
  if (time_ref) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TimeReference.time_ref)
}

// .choreo.String source = 3;
bool TimeReference::has_source() const {
  return this != internal_default_instance() && source_ != NULL;
}
void TimeReference::clear_source() {
  if (GetArenaNoVirtual() == NULL && source_ != NULL) delete source_;
  source_ = NULL;
}
const ::choreo::String& TimeReference::source() const {
  // @@protoc_insertion_point(field_get:choreo.TimeReference.source)
  return source_ != NULL ? *source_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* TimeReference::mutable_source() {
  
  if (source_ == NULL) {
    source_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TimeReference.source)
  return source_;
}
::choreo::String* TimeReference::release_source() {
  // @@protoc_insertion_point(field_release:choreo.TimeReference.source)
  
  ::choreo::String* temp = source_;
  source_ = NULL;
  return temp;
}
void TimeReference::set_allocated_source(::choreo::String* source) {
  delete source_;
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TimeReference.source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
