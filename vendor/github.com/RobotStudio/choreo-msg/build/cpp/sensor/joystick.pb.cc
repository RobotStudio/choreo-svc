// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor/joystick.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor/joystick.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class JoyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Joy> {
} _Joy_default_instance_;
class JoyFeedbackDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoyFeedback> {
} _JoyFeedback_default_instance_;
class JoyFeedbackArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JoyFeedbackArray> {
} _JoyFeedbackArray_default_instance_;

namespace protobuf_sensor_2fjoystick_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joy, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joy, axes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Joy, buttons_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoyFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoyFeedback, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoyFeedback, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoyFeedback, intensity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoyFeedbackArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoyFeedbackArray, array_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Joy)},
  { 8, -1, sizeof(JoyFeedback)},
  { 16, -1, sizeof(JoyFeedbackArray)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Joy_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoyFeedback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_JoyFeedbackArray_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sensor/joystick.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _Joy_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _JoyFeedback_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _JoyFeedbackArray_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fint_2eproto::InitDefaults();
  _Joy_default_instance_.DefaultConstruct();
  _JoyFeedback_default_instance_.DefaultConstruct();
  _JoyFeedbackArray_default_instance_.DefaultConstruct();
  _Joy_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _JoyFeedback_default_instance_.get_mutable()->id_ = const_cast< ::choreo::UInt32*>(
      ::choreo::UInt32::internal_default_instance());
  _JoyFeedback_default_instance_.get_mutable()->intensity_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025sensor/joystick.proto\022\006choreo\032\025primiti"
      "ve/float.proto\032\026primitive/header.proto\032\023"
      "primitive/int.proto\"d\n\003Joy\022\036\n\006header\030\001 \001"
      "(\0132\016.choreo.Header\022\035\n\004axes\030\002 \003(\0132\017.chore"
      "o.Float32\022\036\n\007buttons\030\003 \003(\0132\r.choreo.Int3"
      "2\"\256\001\n\013JoyFeedback\022.\n\004type\030\001 \001(\0162 .choreo"
      ".JoyFeedback.FeedbackType\022\032\n\002id\030\002 \001(\0132\016."
      "choreo.UInt32\022\"\n\tintensity\030\003 \001(\0132\017.chore"
      "o.Float32\"/\n\014FeedbackType\022\007\n\003LED\020\000\022\n\n\006RU"
      "MBLE\020\001\022\n\n\006BUZZER\020\002\"6\n\020JoyFeedbackArray\022\""
      "\n\005array\030\001 \003(\0132\023.choreo.JoyFeedbackB+Z)gi"
      "thub.com/RobotStudio/choreo-msg/msg;msgb"
      "\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 487);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor/joystick.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fint_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sensor_2fjoystick_2eproto

const ::google::protobuf::EnumDescriptor* JoyFeedback_FeedbackType_descriptor() {
  protobuf_sensor_2fjoystick_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoystick_2eproto::file_level_enum_descriptors[0];
}
bool JoyFeedback_FeedbackType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JoyFeedback_FeedbackType JoyFeedback::LED;
const JoyFeedback_FeedbackType JoyFeedback::RUMBLE;
const JoyFeedback_FeedbackType JoyFeedback::BUZZER;
const JoyFeedback_FeedbackType JoyFeedback::FeedbackType_MIN;
const JoyFeedback_FeedbackType JoyFeedback::FeedbackType_MAX;
const int JoyFeedback::FeedbackType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Joy::kHeaderFieldNumber;
const int Joy::kAxesFieldNumber;
const int Joy::kButtonsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Joy::Joy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fjoystick_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Joy)
}
Joy::Joy(const Joy& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      axes_(from.axes_),
      buttons_(from.buttons_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Joy)
}

void Joy::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

Joy::~Joy() {
  // @@protoc_insertion_point(destructor:choreo.Joy)
  SharedDtor();
}

void Joy::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void Joy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Joy::descriptor() {
  protobuf_sensor_2fjoystick_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoystick_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Joy& Joy::default_instance() {
  protobuf_sensor_2fjoystick_2eproto::InitDefaults();
  return *internal_default_instance();
}

Joy* Joy::New(::google::protobuf::Arena* arena) const {
  Joy* n = new Joy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Joy::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Joy)
  axes_.Clear();
  buttons_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool Joy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Joy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float32 axes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_axes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Int32 buttons = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buttons()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Joy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Joy)
  return false;
#undef DO_
}

void Joy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Joy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .choreo.Float32 axes = 2;
  for (unsigned int i = 0, n = this->axes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->axes(i), output);
  }

  // repeated .choreo.Int32 buttons = 3;
  for (unsigned int i = 0, n = this->buttons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buttons(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Joy)
}

::google::protobuf::uint8* Joy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Joy)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .choreo.Float32 axes = 2;
  for (unsigned int i = 0, n = this->axes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->axes(i), deterministic, target);
  }

  // repeated .choreo.Int32 buttons = 3;
  for (unsigned int i = 0, n = this->buttons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->buttons(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Joy)
  return target;
}

size_t Joy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Joy)
  size_t total_size = 0;

  // repeated .choreo.Float32 axes = 2;
  {
    unsigned int count = this->axes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->axes(i));
    }
  }

  // repeated .choreo.Int32 buttons = 3;
  {
    unsigned int count = this->buttons_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buttons(i));
    }
  }

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Joy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Joy)
  GOOGLE_DCHECK_NE(&from, this);
  const Joy* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Joy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Joy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Joy)
    MergeFrom(*source);
  }
}

void Joy::MergeFrom(const Joy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Joy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axes_.MergeFrom(from.axes_);
  buttons_.MergeFrom(from.buttons_);
  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
}

void Joy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Joy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Joy::CopyFrom(const Joy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Joy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joy::IsInitialized() const {
  return true;
}

void Joy::Swap(Joy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Joy::InternalSwap(Joy* other) {
  axes_.InternalSwap(&other->axes_);
  buttons_.InternalSwap(&other->buttons_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Joy::GetMetadata() const {
  protobuf_sensor_2fjoystick_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoystick_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Joy

// .choreo.Header header = 1;
bool Joy::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Joy::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& Joy::header() const {
  // @@protoc_insertion_point(field_get:choreo.Joy.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* Joy::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Joy.header)
  return header_;
}
::choreo::Header* Joy::release_header() {
  // @@protoc_insertion_point(field_release:choreo.Joy.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Joy::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Joy.header)
}

// repeated .choreo.Float32 axes = 2;
int Joy::axes_size() const {
  return axes_.size();
}
void Joy::clear_axes() {
  axes_.Clear();
}
const ::choreo::Float32& Joy::axes(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Joy.axes)
  return axes_.Get(index);
}
::choreo::Float32* Joy::mutable_axes(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Joy.axes)
  return axes_.Mutable(index);
}
::choreo::Float32* Joy::add_axes() {
  // @@protoc_insertion_point(field_add:choreo.Joy.axes)
  return axes_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float32 >*
Joy::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Joy.axes)
  return &axes_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float32 >&
Joy::axes() const {
  // @@protoc_insertion_point(field_list:choreo.Joy.axes)
  return axes_;
}

// repeated .choreo.Int32 buttons = 3;
int Joy::buttons_size() const {
  return buttons_.size();
}
void Joy::clear_buttons() {
  buttons_.Clear();
}
const ::choreo::Int32& Joy::buttons(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Joy.buttons)
  return buttons_.Get(index);
}
::choreo::Int32* Joy::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Joy.buttons)
  return buttons_.Mutable(index);
}
::choreo::Int32* Joy::add_buttons() {
  // @@protoc_insertion_point(field_add:choreo.Joy.buttons)
  return buttons_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Int32 >*
Joy::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Joy.buttons)
  return &buttons_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Int32 >&
Joy::buttons() const {
  // @@protoc_insertion_point(field_list:choreo.Joy.buttons)
  return buttons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoyFeedback::kTypeFieldNumber;
const int JoyFeedback::kIdFieldNumber;
const int JoyFeedback::kIntensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoyFeedback::JoyFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fjoystick_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.JoyFeedback)
}
JoyFeedback::JoyFeedback(const JoyFeedback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::choreo::UInt32(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_intensity()) {
    intensity_ = new ::choreo::Float32(*from.intensity_);
  } else {
    intensity_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:choreo.JoyFeedback)
}

void JoyFeedback::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_) + sizeof(type_));
  _cached_size_ = 0;
}

JoyFeedback::~JoyFeedback() {
  // @@protoc_insertion_point(destructor:choreo.JoyFeedback)
  SharedDtor();
}

void JoyFeedback::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete intensity_;
  }
}

void JoyFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoyFeedback::descriptor() {
  protobuf_sensor_2fjoystick_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoystick_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoyFeedback& JoyFeedback::default_instance() {
  protobuf_sensor_2fjoystick_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoyFeedback* JoyFeedback::New(::google::protobuf::Arena* arena) const {
  JoyFeedback* n = new JoyFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoyFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.JoyFeedback)
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && intensity_ != NULL) {
    delete intensity_;
  }
  intensity_ = NULL;
  type_ = 0;
}

bool JoyFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.JoyFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.JoyFeedback.FeedbackType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::choreo::JoyFeedback_FeedbackType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.UInt32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 intensity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intensity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.JoyFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.JoyFeedback)
  return false;
#undef DO_
}

void JoyFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.JoyFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.JoyFeedback.FeedbackType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .choreo.UInt32 id = 2;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->id_, output);
  }

  // .choreo.Float32 intensity = 3;
  if (this->has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->intensity_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.JoyFeedback)
}

::google::protobuf::uint8* JoyFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.JoyFeedback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.JoyFeedback.FeedbackType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .choreo.UInt32 id = 2;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->id_, deterministic, target);
  }

  // .choreo.Float32 intensity = 3;
  if (this->has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->intensity_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.JoyFeedback)
  return target;
}

size_t JoyFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.JoyFeedback)
  size_t total_size = 0;

  // .choreo.UInt32 id = 2;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // .choreo.Float32 intensity = 3;
  if (this->has_intensity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->intensity_);
  }

  // .choreo.JoyFeedback.FeedbackType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoyFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.JoyFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const JoyFeedback* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoyFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.JoyFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.JoyFeedback)
    MergeFrom(*source);
  }
}

void JoyFeedback::MergeFrom(const JoyFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.JoyFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_id()) {
    mutable_id()->::choreo::UInt32::MergeFrom(from.id());
  }
  if (from.has_intensity()) {
    mutable_intensity()->::choreo::Float32::MergeFrom(from.intensity());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void JoyFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.JoyFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoyFeedback::CopyFrom(const JoyFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.JoyFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoyFeedback::IsInitialized() const {
  return true;
}

void JoyFeedback::Swap(JoyFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoyFeedback::InternalSwap(JoyFeedback* other) {
  std::swap(id_, other->id_);
  std::swap(intensity_, other->intensity_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoyFeedback::GetMetadata() const {
  protobuf_sensor_2fjoystick_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoystick_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoyFeedback

// .choreo.JoyFeedback.FeedbackType type = 1;
void JoyFeedback::clear_type() {
  type_ = 0;
}
::choreo::JoyFeedback_FeedbackType JoyFeedback::type() const {
  // @@protoc_insertion_point(field_get:choreo.JoyFeedback.type)
  return static_cast< ::choreo::JoyFeedback_FeedbackType >(type_);
}
void JoyFeedback::set_type(::choreo::JoyFeedback_FeedbackType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:choreo.JoyFeedback.type)
}

// .choreo.UInt32 id = 2;
bool JoyFeedback::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
void JoyFeedback::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::choreo::UInt32& JoyFeedback::id() const {
  // @@protoc_insertion_point(field_get:choreo.JoyFeedback.id)
  return id_ != NULL ? *id_
                         : *::choreo::UInt32::internal_default_instance();
}
::choreo::UInt32* JoyFeedback::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::choreo::UInt32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.JoyFeedback.id)
  return id_;
}
::choreo::UInt32* JoyFeedback::release_id() {
  // @@protoc_insertion_point(field_release:choreo.JoyFeedback.id)
  
  ::choreo::UInt32* temp = id_;
  id_ = NULL;
  return temp;
}
void JoyFeedback::set_allocated_id(::choreo::UInt32* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.JoyFeedback.id)
}

// .choreo.Float32 intensity = 3;
bool JoyFeedback::has_intensity() const {
  return this != internal_default_instance() && intensity_ != NULL;
}
void JoyFeedback::clear_intensity() {
  if (GetArenaNoVirtual() == NULL && intensity_ != NULL) delete intensity_;
  intensity_ = NULL;
}
const ::choreo::Float32& JoyFeedback::intensity() const {
  // @@protoc_insertion_point(field_get:choreo.JoyFeedback.intensity)
  return intensity_ != NULL ? *intensity_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* JoyFeedback::mutable_intensity() {
  
  if (intensity_ == NULL) {
    intensity_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.JoyFeedback.intensity)
  return intensity_;
}
::choreo::Float32* JoyFeedback::release_intensity() {
  // @@protoc_insertion_point(field_release:choreo.JoyFeedback.intensity)
  
  ::choreo::Float32* temp = intensity_;
  intensity_ = NULL;
  return temp;
}
void JoyFeedback::set_allocated_intensity(::choreo::Float32* intensity) {
  delete intensity_;
  intensity_ = intensity;
  if (intensity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.JoyFeedback.intensity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JoyFeedbackArray::kArrayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JoyFeedbackArray::JoyFeedbackArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fjoystick_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.JoyFeedbackArray)
}
JoyFeedbackArray::JoyFeedbackArray(const JoyFeedbackArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      array_(from.array_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.JoyFeedbackArray)
}

void JoyFeedbackArray::SharedCtor() {
  _cached_size_ = 0;
}

JoyFeedbackArray::~JoyFeedbackArray() {
  // @@protoc_insertion_point(destructor:choreo.JoyFeedbackArray)
  SharedDtor();
}

void JoyFeedbackArray::SharedDtor() {
}

void JoyFeedbackArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoyFeedbackArray::descriptor() {
  protobuf_sensor_2fjoystick_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoystick_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JoyFeedbackArray& JoyFeedbackArray::default_instance() {
  protobuf_sensor_2fjoystick_2eproto::InitDefaults();
  return *internal_default_instance();
}

JoyFeedbackArray* JoyFeedbackArray::New(::google::protobuf::Arena* arena) const {
  JoyFeedbackArray* n = new JoyFeedbackArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JoyFeedbackArray::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.JoyFeedbackArray)
  array_.Clear();
}

bool JoyFeedbackArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.JoyFeedbackArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.JoyFeedback array = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_array()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.JoyFeedbackArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.JoyFeedbackArray)
  return false;
#undef DO_
}

void JoyFeedbackArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.JoyFeedbackArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.JoyFeedback array = 1;
  for (unsigned int i = 0, n = this->array_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->array(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.JoyFeedbackArray)
}

::google::protobuf::uint8* JoyFeedbackArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.JoyFeedbackArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.JoyFeedback array = 1;
  for (unsigned int i = 0, n = this->array_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->array(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.JoyFeedbackArray)
  return target;
}

size_t JoyFeedbackArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.JoyFeedbackArray)
  size_t total_size = 0;

  // repeated .choreo.JoyFeedback array = 1;
  {
    unsigned int count = this->array_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->array(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoyFeedbackArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.JoyFeedbackArray)
  GOOGLE_DCHECK_NE(&from, this);
  const JoyFeedbackArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JoyFeedbackArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.JoyFeedbackArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.JoyFeedbackArray)
    MergeFrom(*source);
  }
}

void JoyFeedbackArray::MergeFrom(const JoyFeedbackArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.JoyFeedbackArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
}

void JoyFeedbackArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.JoyFeedbackArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoyFeedbackArray::CopyFrom(const JoyFeedbackArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.JoyFeedbackArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoyFeedbackArray::IsInitialized() const {
  return true;
}

void JoyFeedbackArray::Swap(JoyFeedbackArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JoyFeedbackArray::InternalSwap(JoyFeedbackArray* other) {
  array_.InternalSwap(&other->array_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JoyFeedbackArray::GetMetadata() const {
  protobuf_sensor_2fjoystick_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoystick_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JoyFeedbackArray

// repeated .choreo.JoyFeedback array = 1;
int JoyFeedbackArray::array_size() const {
  return array_.size();
}
void JoyFeedbackArray::clear_array() {
  array_.Clear();
}
const ::choreo::JoyFeedback& JoyFeedbackArray::array(int index) const {
  // @@protoc_insertion_point(field_get:choreo.JoyFeedbackArray.array)
  return array_.Get(index);
}
::choreo::JoyFeedback* JoyFeedbackArray::mutable_array(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.JoyFeedbackArray.array)
  return array_.Mutable(index);
}
::choreo::JoyFeedback* JoyFeedbackArray::add_array() {
  // @@protoc_insertion_point(field_add:choreo.JoyFeedbackArray.array)
  return array_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::JoyFeedback >*
JoyFeedbackArray::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:choreo.JoyFeedbackArray.array)
  return &array_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::JoyFeedback >&
JoyFeedbackArray::array() const {
  // @@protoc_insertion_point(field_list:choreo.JoyFeedbackArray.array)
  return array_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
