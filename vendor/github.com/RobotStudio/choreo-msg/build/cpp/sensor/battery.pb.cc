// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor/battery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor/battery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class BatteryStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BatteryState> {
} _BatteryState_default_instance_;

namespace protobuf_sensor_2fbattery_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, technology_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, current_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, charge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, design_capacity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, percentage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, power_supply_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, power_supply_health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, power_supply_technology_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, cell_voltage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatteryState, serial_number_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(BatteryState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BatteryState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sensor/battery.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _BatteryState_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fbool_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fint_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fstring_2eproto::InitDefaults();
  _BatteryState_default_instance_.DefaultConstruct();
  _BatteryState_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->voltage_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->current_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->charge_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->capacity_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->design_capacity_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->percentage_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->power_supply_status_ = const_cast< ::choreo::UInt32*>(
      ::choreo::UInt32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->power_supply_health_ = const_cast< ::choreo::UInt32*>(
      ::choreo::UInt32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->power_supply_technology_ = const_cast< ::choreo::UInt32*>(
      ::choreo::UInt32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->present_ = const_cast< ::choreo::Bool*>(
      ::choreo::Bool::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->cell_voltage_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->location_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _BatteryState_default_instance_.get_mutable()->serial_number_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024sensor/battery.proto\022\006choreo\032\024primitiv"
      "e/bool.proto\032\025primitive/float.proto\032\026pri"
      "mitive/header.proto\032\023primitive/int.proto"
      "\032\026primitive/string.proto\"\244\t\n\014BatteryStat"
      "e\022+\n\006status\030\001 \001(\0162\033.choreo.BatteryState."
      "Status\022+\n\006health\030\002 \001(\0162\033.choreo.BatteryS"
      "tate.Health\0223\n\ntechnology\030\003 \001(\0162\037.choreo"
      ".BatteryState.Technology\022\036\n\006header\030\004 \001(\013"
      "2\016.choreo.Header\022 \n\007voltage\030\005 \001(\0132\017.chor"
      "eo.Float32\022 \n\007current\030\006 \001(\0132\017.choreo.Flo"
      "at32\022\037\n\006charge\030\007 \001(\0132\017.choreo.Float32\022!\n"
      "\010capacity\030\010 \001(\0132\017.choreo.Float32\022(\n\017desi"
      "gn_capacity\030\t \001(\0132\017.choreo.Float32\022#\n\npe"
      "rcentage\030\n \001(\0132\017.choreo.Float32\022+\n\023power"
      "_supply_status\030\014 \001(\0132\016.choreo.UInt32\022+\n\023"
      "power_supply_health\030\r \001(\0132\016.choreo.UInt3"
      "2\022/\n\027power_supply_technology\030\016 \001(\0132\016.cho"
      "reo.UInt32\022\035\n\007present\030\017 \001(\0132\014.choreo.Boo"
      "l\022%\n\014cell_voltage\030\020 \001(\0132\017.choreo.Float32"
      "\022 \n\010location\030\021 \001(\0132\016.choreo.String\022%\n\rse"
      "rial_number\030\022 \001(\0132\016.choreo.String\"s\n\006Sta"
      "tus\022\022\n\016STATUS_UNKNOWN\020\000\022\023\n\017STATUS_CHARGI"
      "NG\020\001\022\026\n\022STATUS_DISCHARGING\020\002\022\027\n\023STATUS_N"
      "OT_CHARGING\020\003\022\017\n\013STATUS_FULL\020\004\"\331\001\n\006Healt"
      "h\022\022\n\016HEALTH_UNKNOWN\020\000\022\017\n\013HEALTH_GOOD\020\001\022\023"
      "\n\017HEALTH_OVERHEAT\020\002\022\017\n\013HEALTH_DEAD\020\003\022\026\n\022"
      "HEALTH_OVERVOLTAGE\020\004\022\031\n\025HEALTH_UNSPEC_FA"
      "ILURE\020\005\022\017\n\013HEALTH_COLD\020\006\022 \n\034HEALTH_WATCH"
      "DOG_TIMER_EXPIRE\020\007\022\036\n\032HEALTH_SAFETY_TIME"
      "R_EXPIRE\020\010\"\242\001\n\nTechnology\022\026\n\022TECHNOLOGY_"
      "UNKNOWN\020\000\022\023\n\017TECHNOLOGY_NIMH\020\001\022\023\n\017TECHNO"
      "LOGY_LION\020\002\022\023\n\017TECHNOLOGY_LIPO\020\003\022\023\n\017TECH"
      "NOLOGY_LIFE\020\004\022\023\n\017TECHNOLOGY_NICD\020\005\022\023\n\017TE"
      "CHNOLOGY_LIMN\020\006B+Z)github.com/RobotStudi"
      "o/choreo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1388);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor/battery.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fbool_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fint_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fstring_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sensor_2fbattery_2eproto

const ::google::protobuf::EnumDescriptor* BatteryState_Status_descriptor() {
  protobuf_sensor_2fbattery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbattery_2eproto::file_level_enum_descriptors[0];
}
bool BatteryState_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BatteryState_Status BatteryState::STATUS_UNKNOWN;
const BatteryState_Status BatteryState::STATUS_CHARGING;
const BatteryState_Status BatteryState::STATUS_DISCHARGING;
const BatteryState_Status BatteryState::STATUS_NOT_CHARGING;
const BatteryState_Status BatteryState::STATUS_FULL;
const BatteryState_Status BatteryState::Status_MIN;
const BatteryState_Status BatteryState::Status_MAX;
const int BatteryState::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BatteryState_Health_descriptor() {
  protobuf_sensor_2fbattery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbattery_2eproto::file_level_enum_descriptors[1];
}
bool BatteryState_Health_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BatteryState_Health BatteryState::HEALTH_UNKNOWN;
const BatteryState_Health BatteryState::HEALTH_GOOD;
const BatteryState_Health BatteryState::HEALTH_OVERHEAT;
const BatteryState_Health BatteryState::HEALTH_DEAD;
const BatteryState_Health BatteryState::HEALTH_OVERVOLTAGE;
const BatteryState_Health BatteryState::HEALTH_UNSPEC_FAILURE;
const BatteryState_Health BatteryState::HEALTH_COLD;
const BatteryState_Health BatteryState::HEALTH_WATCHDOG_TIMER_EXPIRE;
const BatteryState_Health BatteryState::HEALTH_SAFETY_TIMER_EXPIRE;
const BatteryState_Health BatteryState::Health_MIN;
const BatteryState_Health BatteryState::Health_MAX;
const int BatteryState::Health_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BatteryState_Technology_descriptor() {
  protobuf_sensor_2fbattery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbattery_2eproto::file_level_enum_descriptors[2];
}
bool BatteryState_Technology_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BatteryState_Technology BatteryState::TECHNOLOGY_UNKNOWN;
const BatteryState_Technology BatteryState::TECHNOLOGY_NIMH;
const BatteryState_Technology BatteryState::TECHNOLOGY_LION;
const BatteryState_Technology BatteryState::TECHNOLOGY_LIPO;
const BatteryState_Technology BatteryState::TECHNOLOGY_LIFE;
const BatteryState_Technology BatteryState::TECHNOLOGY_NICD;
const BatteryState_Technology BatteryState::TECHNOLOGY_LIMN;
const BatteryState_Technology BatteryState::Technology_MIN;
const BatteryState_Technology BatteryState::Technology_MAX;
const int BatteryState::Technology_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatteryState::kStatusFieldNumber;
const int BatteryState::kHealthFieldNumber;
const int BatteryState::kTechnologyFieldNumber;
const int BatteryState::kHeaderFieldNumber;
const int BatteryState::kVoltageFieldNumber;
const int BatteryState::kCurrentFieldNumber;
const int BatteryState::kChargeFieldNumber;
const int BatteryState::kCapacityFieldNumber;
const int BatteryState::kDesignCapacityFieldNumber;
const int BatteryState::kPercentageFieldNumber;
const int BatteryState::kPowerSupplyStatusFieldNumber;
const int BatteryState::kPowerSupplyHealthFieldNumber;
const int BatteryState::kPowerSupplyTechnologyFieldNumber;
const int BatteryState::kPresentFieldNumber;
const int BatteryState::kCellVoltageFieldNumber;
const int BatteryState::kLocationFieldNumber;
const int BatteryState::kSerialNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatteryState::BatteryState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fbattery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.BatteryState)
}
BatteryState::BatteryState(const BatteryState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_voltage()) {
    voltage_ = new ::choreo::Float32(*from.voltage_);
  } else {
    voltage_ = NULL;
  }
  if (from.has_current()) {
    current_ = new ::choreo::Float32(*from.current_);
  } else {
    current_ = NULL;
  }
  if (from.has_charge()) {
    charge_ = new ::choreo::Float32(*from.charge_);
  } else {
    charge_ = NULL;
  }
  if (from.has_capacity()) {
    capacity_ = new ::choreo::Float32(*from.capacity_);
  } else {
    capacity_ = NULL;
  }
  if (from.has_design_capacity()) {
    design_capacity_ = new ::choreo::Float32(*from.design_capacity_);
  } else {
    design_capacity_ = NULL;
  }
  if (from.has_percentage()) {
    percentage_ = new ::choreo::Float32(*from.percentage_);
  } else {
    percentage_ = NULL;
  }
  if (from.has_power_supply_status()) {
    power_supply_status_ = new ::choreo::UInt32(*from.power_supply_status_);
  } else {
    power_supply_status_ = NULL;
  }
  if (from.has_power_supply_health()) {
    power_supply_health_ = new ::choreo::UInt32(*from.power_supply_health_);
  } else {
    power_supply_health_ = NULL;
  }
  if (from.has_power_supply_technology()) {
    power_supply_technology_ = new ::choreo::UInt32(*from.power_supply_technology_);
  } else {
    power_supply_technology_ = NULL;
  }
  if (from.has_present()) {
    present_ = new ::choreo::Bool(*from.present_);
  } else {
    present_ = NULL;
  }
  if (from.has_cell_voltage()) {
    cell_voltage_ = new ::choreo::Float32(*from.cell_voltage_);
  } else {
    cell_voltage_ = NULL;
  }
  if (from.has_location()) {
    location_ = new ::choreo::String(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_serial_number()) {
    serial_number_ = new ::choreo::String(*from.serial_number_);
  } else {
    serial_number_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&technology_) -
    reinterpret_cast<char*>(&status_) + sizeof(technology_));
  // @@protoc_insertion_point(copy_constructor:choreo.BatteryState)
}

void BatteryState::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&technology_) -
    reinterpret_cast<char*>(&header_) + sizeof(technology_));
  _cached_size_ = 0;
}

BatteryState::~BatteryState() {
  // @@protoc_insertion_point(destructor:choreo.BatteryState)
  SharedDtor();
}

void BatteryState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete voltage_;
  }
  if (this != internal_default_instance()) {
    delete current_;
  }
  if (this != internal_default_instance()) {
    delete charge_;
  }
  if (this != internal_default_instance()) {
    delete capacity_;
  }
  if (this != internal_default_instance()) {
    delete design_capacity_;
  }
  if (this != internal_default_instance()) {
    delete percentage_;
  }
  if (this != internal_default_instance()) {
    delete power_supply_status_;
  }
  if (this != internal_default_instance()) {
    delete power_supply_health_;
  }
  if (this != internal_default_instance()) {
    delete power_supply_technology_;
  }
  if (this != internal_default_instance()) {
    delete present_;
  }
  if (this != internal_default_instance()) {
    delete cell_voltage_;
  }
  if (this != internal_default_instance()) {
    delete location_;
  }
  if (this != internal_default_instance()) {
    delete serial_number_;
  }
}

void BatteryState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatteryState::descriptor() {
  protobuf_sensor_2fbattery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbattery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BatteryState& BatteryState::default_instance() {
  protobuf_sensor_2fbattery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BatteryState* BatteryState::New(::google::protobuf::Arena* arena) const {
  BatteryState* n = new BatteryState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatteryState::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.BatteryState)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && voltage_ != NULL) {
    delete voltage_;
  }
  voltage_ = NULL;
  if (GetArenaNoVirtual() == NULL && current_ != NULL) {
    delete current_;
  }
  current_ = NULL;
  if (GetArenaNoVirtual() == NULL && charge_ != NULL) {
    delete charge_;
  }
  charge_ = NULL;
  if (GetArenaNoVirtual() == NULL && capacity_ != NULL) {
    delete capacity_;
  }
  capacity_ = NULL;
  if (GetArenaNoVirtual() == NULL && design_capacity_ != NULL) {
    delete design_capacity_;
  }
  design_capacity_ = NULL;
  if (GetArenaNoVirtual() == NULL && percentage_ != NULL) {
    delete percentage_;
  }
  percentage_ = NULL;
  if (GetArenaNoVirtual() == NULL && power_supply_status_ != NULL) {
    delete power_supply_status_;
  }
  power_supply_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && power_supply_health_ != NULL) {
    delete power_supply_health_;
  }
  power_supply_health_ = NULL;
  if (GetArenaNoVirtual() == NULL && power_supply_technology_ != NULL) {
    delete power_supply_technology_;
  }
  power_supply_technology_ = NULL;
  if (GetArenaNoVirtual() == NULL && present_ != NULL) {
    delete present_;
  }
  present_ = NULL;
  if (GetArenaNoVirtual() == NULL && cell_voltage_ != NULL) {
    delete cell_voltage_;
  }
  cell_voltage_ = NULL;
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  if (GetArenaNoVirtual() == NULL && serial_number_ != NULL) {
    delete serial_number_;
  }
  serial_number_ = NULL;
  ::memset(&status_, 0, reinterpret_cast<char*>(&technology_) -
    reinterpret_cast<char*>(&status_) + sizeof(technology_));
}

bool BatteryState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.BatteryState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.BatteryState.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::choreo::BatteryState_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.BatteryState.Health health = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_health(static_cast< ::choreo::BatteryState_Health >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.BatteryState.Technology technology = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_technology(static_cast< ::choreo::BatteryState_Technology >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Header header = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 voltage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_voltage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 current = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 charge = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 capacity = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capacity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 design_capacity = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_design_capacity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 percentage = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_percentage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.UInt32 power_supply_status = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_supply_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.UInt32 power_supply_health = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_supply_health()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.UInt32 power_supply_technology = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power_supply_technology()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Bool present = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_present()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 cell_voltage = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell_voltage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String location = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String serial_number = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_serial_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.BatteryState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.BatteryState)
  return false;
#undef DO_
}

void BatteryState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.BatteryState.Status status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // .choreo.BatteryState.Health health = 2;
  if (this->health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->health(), output);
  }

  // .choreo.BatteryState.Technology technology = 3;
  if (this->technology() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->technology(), output);
  }

  // .choreo.Header header = 4;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->header_, output);
  }

  // .choreo.Float32 voltage = 5;
  if (this->has_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->voltage_, output);
  }

  // .choreo.Float32 current = 6;
  if (this->has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->current_, output);
  }

  // .choreo.Float32 charge = 7;
  if (this->has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->charge_, output);
  }

  // .choreo.Float32 capacity = 8;
  if (this->has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->capacity_, output);
  }

  // .choreo.Float32 design_capacity = 9;
  if (this->has_design_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->design_capacity_, output);
  }

  // .choreo.Float32 percentage = 10;
  if (this->has_percentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->percentage_, output);
  }

  // .choreo.UInt32 power_supply_status = 12;
  if (this->has_power_supply_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->power_supply_status_, output);
  }

  // .choreo.UInt32 power_supply_health = 13;
  if (this->has_power_supply_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->power_supply_health_, output);
  }

  // .choreo.UInt32 power_supply_technology = 14;
  if (this->has_power_supply_technology()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->power_supply_technology_, output);
  }

  // .choreo.Bool present = 15;
  if (this->has_present()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->present_, output);
  }

  // .choreo.Float32 cell_voltage = 16;
  if (this->has_cell_voltage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->cell_voltage_, output);
  }

  // .choreo.String location = 17;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->location_, output);
  }

  // .choreo.String serial_number = 18;
  if (this->has_serial_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->serial_number_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.BatteryState)
}

::google::protobuf::uint8* BatteryState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.BatteryState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.BatteryState.Status status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // .choreo.BatteryState.Health health = 2;
  if (this->health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->health(), target);
  }

  // .choreo.BatteryState.Technology technology = 3;
  if (this->technology() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->technology(), target);
  }

  // .choreo.Header header = 4;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->header_, deterministic, target);
  }

  // .choreo.Float32 voltage = 5;
  if (this->has_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->voltage_, deterministic, target);
  }

  // .choreo.Float32 current = 6;
  if (this->has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->current_, deterministic, target);
  }

  // .choreo.Float32 charge = 7;
  if (this->has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->charge_, deterministic, target);
  }

  // .choreo.Float32 capacity = 8;
  if (this->has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->capacity_, deterministic, target);
  }

  // .choreo.Float32 design_capacity = 9;
  if (this->has_design_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->design_capacity_, deterministic, target);
  }

  // .choreo.Float32 percentage = 10;
  if (this->has_percentage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->percentage_, deterministic, target);
  }

  // .choreo.UInt32 power_supply_status = 12;
  if (this->has_power_supply_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->power_supply_status_, deterministic, target);
  }

  // .choreo.UInt32 power_supply_health = 13;
  if (this->has_power_supply_health()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->power_supply_health_, deterministic, target);
  }

  // .choreo.UInt32 power_supply_technology = 14;
  if (this->has_power_supply_technology()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->power_supply_technology_, deterministic, target);
  }

  // .choreo.Bool present = 15;
  if (this->has_present()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->present_, deterministic, target);
  }

  // .choreo.Float32 cell_voltage = 16;
  if (this->has_cell_voltage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->cell_voltage_, deterministic, target);
  }

  // .choreo.String location = 17;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->location_, deterministic, target);
  }

  // .choreo.String serial_number = 18;
  if (this->has_serial_number()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->serial_number_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.BatteryState)
  return target;
}

size_t BatteryState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.BatteryState)
  size_t total_size = 0;

  // .choreo.Header header = 4;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Float32 voltage = 5;
  if (this->has_voltage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->voltage_);
  }

  // .choreo.Float32 current = 6;
  if (this->has_current()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->current_);
  }

  // .choreo.Float32 charge = 7;
  if (this->has_charge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->charge_);
  }

  // .choreo.Float32 capacity = 8;
  if (this->has_capacity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->capacity_);
  }

  // .choreo.Float32 design_capacity = 9;
  if (this->has_design_capacity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->design_capacity_);
  }

  // .choreo.Float32 percentage = 10;
  if (this->has_percentage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->percentage_);
  }

  // .choreo.UInt32 power_supply_status = 12;
  if (this->has_power_supply_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->power_supply_status_);
  }

  // .choreo.UInt32 power_supply_health = 13;
  if (this->has_power_supply_health()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->power_supply_health_);
  }

  // .choreo.UInt32 power_supply_technology = 14;
  if (this->has_power_supply_technology()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->power_supply_technology_);
  }

  // .choreo.Bool present = 15;
  if (this->has_present()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->present_);
  }

  // .choreo.Float32 cell_voltage = 16;
  if (this->has_cell_voltage()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cell_voltage_);
  }

  // .choreo.String location = 17;
  if (this->has_location()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .choreo.String serial_number = 18;
  if (this->has_serial_number()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->serial_number_);
  }

  // .choreo.BatteryState.Status status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .choreo.BatteryState.Health health = 2;
  if (this->health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->health());
  }

  // .choreo.BatteryState.Technology technology = 3;
  if (this->technology() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->technology());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatteryState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  const BatteryState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatteryState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.BatteryState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.BatteryState)
    MergeFrom(*source);
  }
}

void BatteryState::MergeFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.BatteryState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_voltage()) {
    mutable_voltage()->::choreo::Float32::MergeFrom(from.voltage());
  }
  if (from.has_current()) {
    mutable_current()->::choreo::Float32::MergeFrom(from.current());
  }
  if (from.has_charge()) {
    mutable_charge()->::choreo::Float32::MergeFrom(from.charge());
  }
  if (from.has_capacity()) {
    mutable_capacity()->::choreo::Float32::MergeFrom(from.capacity());
  }
  if (from.has_design_capacity()) {
    mutable_design_capacity()->::choreo::Float32::MergeFrom(from.design_capacity());
  }
  if (from.has_percentage()) {
    mutable_percentage()->::choreo::Float32::MergeFrom(from.percentage());
  }
  if (from.has_power_supply_status()) {
    mutable_power_supply_status()->::choreo::UInt32::MergeFrom(from.power_supply_status());
  }
  if (from.has_power_supply_health()) {
    mutable_power_supply_health()->::choreo::UInt32::MergeFrom(from.power_supply_health());
  }
  if (from.has_power_supply_technology()) {
    mutable_power_supply_technology()->::choreo::UInt32::MergeFrom(from.power_supply_technology());
  }
  if (from.has_present()) {
    mutable_present()->::choreo::Bool::MergeFrom(from.present());
  }
  if (from.has_cell_voltage()) {
    mutable_cell_voltage()->::choreo::Float32::MergeFrom(from.cell_voltage());
  }
  if (from.has_location()) {
    mutable_location()->::choreo::String::MergeFrom(from.location());
  }
  if (from.has_serial_number()) {
    mutable_serial_number()->::choreo::String::MergeFrom(from.serial_number());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.health() != 0) {
    set_health(from.health());
  }
  if (from.technology() != 0) {
    set_technology(from.technology());
  }
}

void BatteryState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatteryState::CopyFrom(const BatteryState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.BatteryState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryState::IsInitialized() const {
  return true;
}

void BatteryState::Swap(BatteryState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatteryState::InternalSwap(BatteryState* other) {
  std::swap(header_, other->header_);
  std::swap(voltage_, other->voltage_);
  std::swap(current_, other->current_);
  std::swap(charge_, other->charge_);
  std::swap(capacity_, other->capacity_);
  std::swap(design_capacity_, other->design_capacity_);
  std::swap(percentage_, other->percentage_);
  std::swap(power_supply_status_, other->power_supply_status_);
  std::swap(power_supply_health_, other->power_supply_health_);
  std::swap(power_supply_technology_, other->power_supply_technology_);
  std::swap(present_, other->present_);
  std::swap(cell_voltage_, other->cell_voltage_);
  std::swap(location_, other->location_);
  std::swap(serial_number_, other->serial_number_);
  std::swap(status_, other->status_);
  std::swap(health_, other->health_);
  std::swap(technology_, other->technology_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatteryState::GetMetadata() const {
  protobuf_sensor_2fbattery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fbattery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatteryState

// .choreo.BatteryState.Status status = 1;
void BatteryState::clear_status() {
  status_ = 0;
}
::choreo::BatteryState_Status BatteryState::status() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.status)
  return static_cast< ::choreo::BatteryState_Status >(status_);
}
void BatteryState::set_status(::choreo::BatteryState_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:choreo.BatteryState.status)
}

// .choreo.BatteryState.Health health = 2;
void BatteryState::clear_health() {
  health_ = 0;
}
::choreo::BatteryState_Health BatteryState::health() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.health)
  return static_cast< ::choreo::BatteryState_Health >(health_);
}
void BatteryState::set_health(::choreo::BatteryState_Health value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:choreo.BatteryState.health)
}

// .choreo.BatteryState.Technology technology = 3;
void BatteryState::clear_technology() {
  technology_ = 0;
}
::choreo::BatteryState_Technology BatteryState::technology() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.technology)
  return static_cast< ::choreo::BatteryState_Technology >(technology_);
}
void BatteryState::set_technology(::choreo::BatteryState_Technology value) {
  
  technology_ = value;
  // @@protoc_insertion_point(field_set:choreo.BatteryState.technology)
}

// .choreo.Header header = 4;
bool BatteryState::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void BatteryState::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& BatteryState::header() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* BatteryState::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.header)
  return header_;
}
::choreo::Header* BatteryState::release_header() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void BatteryState::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.header)
}

// .choreo.Float32 voltage = 5;
bool BatteryState::has_voltage() const {
  return this != internal_default_instance() && voltage_ != NULL;
}
void BatteryState::clear_voltage() {
  if (GetArenaNoVirtual() == NULL && voltage_ != NULL) delete voltage_;
  voltage_ = NULL;
}
const ::choreo::Float32& BatteryState::voltage() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.voltage)
  return voltage_ != NULL ? *voltage_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* BatteryState::mutable_voltage() {
  
  if (voltage_ == NULL) {
    voltage_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.voltage)
  return voltage_;
}
::choreo::Float32* BatteryState::release_voltage() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.voltage)
  
  ::choreo::Float32* temp = voltage_;
  voltage_ = NULL;
  return temp;
}
void BatteryState::set_allocated_voltage(::choreo::Float32* voltage) {
  delete voltage_;
  voltage_ = voltage;
  if (voltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.voltage)
}

// .choreo.Float32 current = 6;
bool BatteryState::has_current() const {
  return this != internal_default_instance() && current_ != NULL;
}
void BatteryState::clear_current() {
  if (GetArenaNoVirtual() == NULL && current_ != NULL) delete current_;
  current_ = NULL;
}
const ::choreo::Float32& BatteryState::current() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.current)
  return current_ != NULL ? *current_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* BatteryState::mutable_current() {
  
  if (current_ == NULL) {
    current_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.current)
  return current_;
}
::choreo::Float32* BatteryState::release_current() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.current)
  
  ::choreo::Float32* temp = current_;
  current_ = NULL;
  return temp;
}
void BatteryState::set_allocated_current(::choreo::Float32* current) {
  delete current_;
  current_ = current;
  if (current) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.current)
}

// .choreo.Float32 charge = 7;
bool BatteryState::has_charge() const {
  return this != internal_default_instance() && charge_ != NULL;
}
void BatteryState::clear_charge() {
  if (GetArenaNoVirtual() == NULL && charge_ != NULL) delete charge_;
  charge_ = NULL;
}
const ::choreo::Float32& BatteryState::charge() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.charge)
  return charge_ != NULL ? *charge_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* BatteryState::mutable_charge() {
  
  if (charge_ == NULL) {
    charge_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.charge)
  return charge_;
}
::choreo::Float32* BatteryState::release_charge() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.charge)
  
  ::choreo::Float32* temp = charge_;
  charge_ = NULL;
  return temp;
}
void BatteryState::set_allocated_charge(::choreo::Float32* charge) {
  delete charge_;
  charge_ = charge;
  if (charge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.charge)
}

// .choreo.Float32 capacity = 8;
bool BatteryState::has_capacity() const {
  return this != internal_default_instance() && capacity_ != NULL;
}
void BatteryState::clear_capacity() {
  if (GetArenaNoVirtual() == NULL && capacity_ != NULL) delete capacity_;
  capacity_ = NULL;
}
const ::choreo::Float32& BatteryState::capacity() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.capacity)
  return capacity_ != NULL ? *capacity_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* BatteryState::mutable_capacity() {
  
  if (capacity_ == NULL) {
    capacity_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.capacity)
  return capacity_;
}
::choreo::Float32* BatteryState::release_capacity() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.capacity)
  
  ::choreo::Float32* temp = capacity_;
  capacity_ = NULL;
  return temp;
}
void BatteryState::set_allocated_capacity(::choreo::Float32* capacity) {
  delete capacity_;
  capacity_ = capacity;
  if (capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.capacity)
}

// .choreo.Float32 design_capacity = 9;
bool BatteryState::has_design_capacity() const {
  return this != internal_default_instance() && design_capacity_ != NULL;
}
void BatteryState::clear_design_capacity() {
  if (GetArenaNoVirtual() == NULL && design_capacity_ != NULL) delete design_capacity_;
  design_capacity_ = NULL;
}
const ::choreo::Float32& BatteryState::design_capacity() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.design_capacity)
  return design_capacity_ != NULL ? *design_capacity_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* BatteryState::mutable_design_capacity() {
  
  if (design_capacity_ == NULL) {
    design_capacity_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.design_capacity)
  return design_capacity_;
}
::choreo::Float32* BatteryState::release_design_capacity() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.design_capacity)
  
  ::choreo::Float32* temp = design_capacity_;
  design_capacity_ = NULL;
  return temp;
}
void BatteryState::set_allocated_design_capacity(::choreo::Float32* design_capacity) {
  delete design_capacity_;
  design_capacity_ = design_capacity;
  if (design_capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.design_capacity)
}

// .choreo.Float32 percentage = 10;
bool BatteryState::has_percentage() const {
  return this != internal_default_instance() && percentage_ != NULL;
}
void BatteryState::clear_percentage() {
  if (GetArenaNoVirtual() == NULL && percentage_ != NULL) delete percentage_;
  percentage_ = NULL;
}
const ::choreo::Float32& BatteryState::percentage() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.percentage)
  return percentage_ != NULL ? *percentage_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* BatteryState::mutable_percentage() {
  
  if (percentage_ == NULL) {
    percentage_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.percentage)
  return percentage_;
}
::choreo::Float32* BatteryState::release_percentage() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.percentage)
  
  ::choreo::Float32* temp = percentage_;
  percentage_ = NULL;
  return temp;
}
void BatteryState::set_allocated_percentage(::choreo::Float32* percentage) {
  delete percentage_;
  percentage_ = percentage;
  if (percentage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.percentage)
}

// .choreo.UInt32 power_supply_status = 12;
bool BatteryState::has_power_supply_status() const {
  return this != internal_default_instance() && power_supply_status_ != NULL;
}
void BatteryState::clear_power_supply_status() {
  if (GetArenaNoVirtual() == NULL && power_supply_status_ != NULL) delete power_supply_status_;
  power_supply_status_ = NULL;
}
const ::choreo::UInt32& BatteryState::power_supply_status() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.power_supply_status)
  return power_supply_status_ != NULL ? *power_supply_status_
                         : *::choreo::UInt32::internal_default_instance();
}
::choreo::UInt32* BatteryState::mutable_power_supply_status() {
  
  if (power_supply_status_ == NULL) {
    power_supply_status_ = new ::choreo::UInt32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.power_supply_status)
  return power_supply_status_;
}
::choreo::UInt32* BatteryState::release_power_supply_status() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.power_supply_status)
  
  ::choreo::UInt32* temp = power_supply_status_;
  power_supply_status_ = NULL;
  return temp;
}
void BatteryState::set_allocated_power_supply_status(::choreo::UInt32* power_supply_status) {
  delete power_supply_status_;
  power_supply_status_ = power_supply_status;
  if (power_supply_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.power_supply_status)
}

// .choreo.UInt32 power_supply_health = 13;
bool BatteryState::has_power_supply_health() const {
  return this != internal_default_instance() && power_supply_health_ != NULL;
}
void BatteryState::clear_power_supply_health() {
  if (GetArenaNoVirtual() == NULL && power_supply_health_ != NULL) delete power_supply_health_;
  power_supply_health_ = NULL;
}
const ::choreo::UInt32& BatteryState::power_supply_health() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.power_supply_health)
  return power_supply_health_ != NULL ? *power_supply_health_
                         : *::choreo::UInt32::internal_default_instance();
}
::choreo::UInt32* BatteryState::mutable_power_supply_health() {
  
  if (power_supply_health_ == NULL) {
    power_supply_health_ = new ::choreo::UInt32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.power_supply_health)
  return power_supply_health_;
}
::choreo::UInt32* BatteryState::release_power_supply_health() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.power_supply_health)
  
  ::choreo::UInt32* temp = power_supply_health_;
  power_supply_health_ = NULL;
  return temp;
}
void BatteryState::set_allocated_power_supply_health(::choreo::UInt32* power_supply_health) {
  delete power_supply_health_;
  power_supply_health_ = power_supply_health;
  if (power_supply_health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.power_supply_health)
}

// .choreo.UInt32 power_supply_technology = 14;
bool BatteryState::has_power_supply_technology() const {
  return this != internal_default_instance() && power_supply_technology_ != NULL;
}
void BatteryState::clear_power_supply_technology() {
  if (GetArenaNoVirtual() == NULL && power_supply_technology_ != NULL) delete power_supply_technology_;
  power_supply_technology_ = NULL;
}
const ::choreo::UInt32& BatteryState::power_supply_technology() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.power_supply_technology)
  return power_supply_technology_ != NULL ? *power_supply_technology_
                         : *::choreo::UInt32::internal_default_instance();
}
::choreo::UInt32* BatteryState::mutable_power_supply_technology() {
  
  if (power_supply_technology_ == NULL) {
    power_supply_technology_ = new ::choreo::UInt32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.power_supply_technology)
  return power_supply_technology_;
}
::choreo::UInt32* BatteryState::release_power_supply_technology() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.power_supply_technology)
  
  ::choreo::UInt32* temp = power_supply_technology_;
  power_supply_technology_ = NULL;
  return temp;
}
void BatteryState::set_allocated_power_supply_technology(::choreo::UInt32* power_supply_technology) {
  delete power_supply_technology_;
  power_supply_technology_ = power_supply_technology;
  if (power_supply_technology) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.power_supply_technology)
}

// .choreo.Bool present = 15;
bool BatteryState::has_present() const {
  return this != internal_default_instance() && present_ != NULL;
}
void BatteryState::clear_present() {
  if (GetArenaNoVirtual() == NULL && present_ != NULL) delete present_;
  present_ = NULL;
}
const ::choreo::Bool& BatteryState::present() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.present)
  return present_ != NULL ? *present_
                         : *::choreo::Bool::internal_default_instance();
}
::choreo::Bool* BatteryState::mutable_present() {
  
  if (present_ == NULL) {
    present_ = new ::choreo::Bool;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.present)
  return present_;
}
::choreo::Bool* BatteryState::release_present() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.present)
  
  ::choreo::Bool* temp = present_;
  present_ = NULL;
  return temp;
}
void BatteryState::set_allocated_present(::choreo::Bool* present) {
  delete present_;
  present_ = present;
  if (present) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.present)
}

// .choreo.Float32 cell_voltage = 16;
bool BatteryState::has_cell_voltage() const {
  return this != internal_default_instance() && cell_voltage_ != NULL;
}
void BatteryState::clear_cell_voltage() {
  if (GetArenaNoVirtual() == NULL && cell_voltage_ != NULL) delete cell_voltage_;
  cell_voltage_ = NULL;
}
const ::choreo::Float32& BatteryState::cell_voltage() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.cell_voltage)
  return cell_voltage_ != NULL ? *cell_voltage_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* BatteryState::mutable_cell_voltage() {
  
  if (cell_voltage_ == NULL) {
    cell_voltage_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.cell_voltage)
  return cell_voltage_;
}
::choreo::Float32* BatteryState::release_cell_voltage() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.cell_voltage)
  
  ::choreo::Float32* temp = cell_voltage_;
  cell_voltage_ = NULL;
  return temp;
}
void BatteryState::set_allocated_cell_voltage(::choreo::Float32* cell_voltage) {
  delete cell_voltage_;
  cell_voltage_ = cell_voltage;
  if (cell_voltage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.cell_voltage)
}

// .choreo.String location = 17;
bool BatteryState::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void BatteryState::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::choreo::String& BatteryState::location() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.location)
  return location_ != NULL ? *location_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* BatteryState::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.location)
  return location_;
}
::choreo::String* BatteryState::release_location() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.location)
  
  ::choreo::String* temp = location_;
  location_ = NULL;
  return temp;
}
void BatteryState::set_allocated_location(::choreo::String* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.location)
}

// .choreo.String serial_number = 18;
bool BatteryState::has_serial_number() const {
  return this != internal_default_instance() && serial_number_ != NULL;
}
void BatteryState::clear_serial_number() {
  if (GetArenaNoVirtual() == NULL && serial_number_ != NULL) delete serial_number_;
  serial_number_ = NULL;
}
const ::choreo::String& BatteryState::serial_number() const {
  // @@protoc_insertion_point(field_get:choreo.BatteryState.serial_number)
  return serial_number_ != NULL ? *serial_number_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* BatteryState::mutable_serial_number() {
  
  if (serial_number_ == NULL) {
    serial_number_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.BatteryState.serial_number)
  return serial_number_;
}
::choreo::String* BatteryState::release_serial_number() {
  // @@protoc_insertion_point(field_release:choreo.BatteryState.serial_number)
  
  ::choreo::String* temp = serial_number_;
  serial_number_ = NULL;
  return temp;
}
void BatteryState::set_allocated_serial_number(::choreo::String* serial_number) {
  delete serial_number_;
  serial_number_ = serial_number;
  if (serial_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.BatteryState.serial_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
