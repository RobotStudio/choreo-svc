// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor/imu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor/imu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class IMUDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<IMU> {
} _IMU_default_instance_;
class MagneticFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MagneticField> {
} _MagneticField_default_instance_;
class NavSatStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NavSatStatus> {
} _NavSatStatus_default_instance_;
class NavSatFixDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NavSatFix> {
} _NavSatFix_default_instance_;

namespace protobuf_sensor_2fimu_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, orientation_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, angular_velocity_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, linear_acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IMU, linear_acceleration_covariance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagneticField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagneticField, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagneticField, magnetic_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagneticField, magnetic_field_covariance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatStatus, nav_sat_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatStatus, nav_sat_service_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, nav_sat_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, position_covariance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavSatFix, position_covariance_type_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(IMU)},
  { 12, -1, sizeof(MagneticField)},
  { 20, -1, sizeof(NavSatStatus)},
  { 27, -1, sizeof(NavSatFix)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_IMU_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MagneticField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavSatStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NavSatFix_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sensor/imu.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _IMU_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MagneticField_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NavSatStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _NavSatFix_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fquaternion_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fvector_2eproto::InitDefaults();
  _IMU_default_instance_.DefaultConstruct();
  _MagneticField_default_instance_.DefaultConstruct();
  _NavSatStatus_default_instance_.DefaultConstruct();
  _NavSatFix_default_instance_.DefaultConstruct();
  _IMU_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _IMU_default_instance_.get_mutable()->orientation_ = const_cast< ::choreo::Quaternion*>(
      ::choreo::Quaternion::internal_default_instance());
  _IMU_default_instance_.get_mutable()->angular_velocity_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _IMU_default_instance_.get_mutable()->linear_acceleration_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _MagneticField_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _MagneticField_default_instance_.get_mutable()->magnetic_field_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _NavSatFix_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _NavSatFix_default_instance_.get_mutable()->nav_sat_status_ = const_cast< ::choreo::NavSatStatus*>(
      ::choreo::NavSatStatus::internal_default_instance());
  _NavSatFix_default_instance_.get_mutable()->latitude_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _NavSatFix_default_instance_.get_mutable()->longitude_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _NavSatFix_default_instance_.get_mutable()->altitude_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020sensor/imu.proto\022\006choreo\032\025primitive/fl"
      "oat.proto\032\026primitive/header.proto\032\032geome"
      "tric/quaternion.proto\032\026geometric/vector."
      "proto\"\307\002\n\003IMU\022\036\n\006header\030\001 \001(\0132\016.choreo.H"
      "eader\022\'\n\013orientation\030\002 \001(\0132\022.choreo.Quat"
      "ernion\022/\n\026orientation_covariance\030\003 \003(\0132\017"
      ".choreo.Float64\022)\n\020angular_velocity\030\004 \001("
      "\0132\017.choreo.Vector3\0224\n\033angular_velocity_c"
      "ovariance\030\005 \003(\0132\017.choreo.Float64\022,\n\023line"
      "ar_acceleration\030\006 \001(\0132\017.choreo.Vector3\0227"
      "\n\036linear_acceleration_covariance\030\007 \003(\0132\017"
      ".choreo.Float64\"\214\001\n\rMagneticField\022\036\n\006hea"
      "der\030\001 \001(\0132\016.choreo.Header\022\'\n\016magnetic_fi"
      "eld\030\002 \001(\0132\017.choreo.Vector3\0222\n\031magnetic_f"
      "ield_covariance\030\003 \003(\0132\017.choreo.Float64\"\360"
      "\001\n\014NavSatStatus\0223\n\016nav_sat_status\030\001 \001(\0162"
      "\033.choreo.NavSatStatus.Status\0225\n\017nav_sat_"
      "service\030\002 \001(\0162\034.choreo.NavSatStatus.Serv"
      "ice\"9\n\006Status\022\n\n\006NO_FIX\020\000\022\007\n\003FIX\020\001\022\014\n\010SB"
      "AS_FIX\020\002\022\014\n\010GBAS_FIX\020\003\"9\n\007Service\022\007\n\003GPS"
      "\020\000\022\013\n\007GLONASS\020\001\022\013\n\007COMPASS\020\002\022\013\n\007GALILEO\020"
      "\003\"\227\003\n\tNavSatFix\022\036\n\006header\030\001 \001(\0132\016.choreo"
      ".Header\022,\n\016nav_sat_status\030\002 \001(\0132\024.choreo"
      ".NavSatStatus\022!\n\010latitude\030\003 \001(\0132\017.choreo"
      ".Float64\022\"\n\tlongitude\030\004 \001(\0132\017.choreo.Flo"
      "at64\022!\n\010altitude\030\005 \001(\0132\017.choreo.Float64\022"
      ",\n\023position_covariance\030\006 \003(\0132\017.choreo.Fl"
      "oat64\022J\n\030position_covariance_type\030\007 \001(\0162"
      "(.choreo.NavSatFix.PositionCovarianceTyp"
      "e\"X\n\026PositionCovarianceType\022\013\n\007UNKNOWN\020\000"
      "\022\020\n\014APPROXIMATED\020\001\022\024\n\020DIAGONAL_UNKNOWN\020\002"
      "\022\t\n\005KNOWN\020\003B+Z)github.com/RobotStudio/ch"
      "oreo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1304);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor/imu.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fquaternion_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fvector_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sensor_2fimu_2eproto

const ::google::protobuf::EnumDescriptor* NavSatStatus_Status_descriptor() {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_enum_descriptors[0];
}
bool NavSatStatus_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatStatus_Status NavSatStatus::NO_FIX;
const NavSatStatus_Status NavSatStatus::FIX;
const NavSatStatus_Status NavSatStatus::SBAS_FIX;
const NavSatStatus_Status NavSatStatus::GBAS_FIX;
const NavSatStatus_Status NavSatStatus::Status_MIN;
const NavSatStatus_Status NavSatStatus::Status_MAX;
const int NavSatStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavSatStatus_Service_descriptor() {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_enum_descriptors[1];
}
bool NavSatStatus_Service_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatStatus_Service NavSatStatus::GPS;
const NavSatStatus_Service NavSatStatus::GLONASS;
const NavSatStatus_Service NavSatStatus::COMPASS;
const NavSatStatus_Service NavSatStatus::GALILEO;
const NavSatStatus_Service NavSatStatus::Service_MIN;
const NavSatStatus_Service NavSatStatus::Service_MAX;
const int NavSatStatus::Service_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavSatFix_PositionCovarianceType_descriptor() {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_enum_descriptors[2];
}
bool NavSatFix_PositionCovarianceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatFix_PositionCovarianceType NavSatFix::UNKNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::APPROXIMATED;
const NavSatFix_PositionCovarianceType NavSatFix::DIAGONAL_UNKNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::KNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::PositionCovarianceType_MIN;
const NavSatFix_PositionCovarianceType NavSatFix::PositionCovarianceType_MAX;
const int NavSatFix::PositionCovarianceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMU::kHeaderFieldNumber;
const int IMU::kOrientationFieldNumber;
const int IMU::kOrientationCovarianceFieldNumber;
const int IMU::kAngularVelocityFieldNumber;
const int IMU::kAngularVelocityCovarianceFieldNumber;
const int IMU::kLinearAccelerationFieldNumber;
const int IMU::kLinearAccelerationCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMU::IMU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fimu_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.IMU)
}
IMU::IMU(const IMU& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      orientation_covariance_(from.orientation_covariance_),
      angular_velocity_covariance_(from.angular_velocity_covariance_),
      linear_acceleration_covariance_(from.linear_acceleration_covariance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_orientation()) {
    orientation_ = new ::choreo::Quaternion(*from.orientation_);
  } else {
    orientation_ = NULL;
  }
  if (from.has_angular_velocity()) {
    angular_velocity_ = new ::choreo::Vector3(*from.angular_velocity_);
  } else {
    angular_velocity_ = NULL;
  }
  if (from.has_linear_acceleration()) {
    linear_acceleration_ = new ::choreo::Vector3(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.IMU)
}

void IMU::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&linear_acceleration_) -
    reinterpret_cast<char*>(&header_) + sizeof(linear_acceleration_));
  _cached_size_ = 0;
}

IMU::~IMU() {
  // @@protoc_insertion_point(destructor:choreo.IMU)
  SharedDtor();
}

void IMU::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete orientation_;
  }
  if (this != internal_default_instance()) {
    delete angular_velocity_;
  }
  if (this != internal_default_instance()) {
    delete linear_acceleration_;
  }
}

void IMU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMU::descriptor() {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMU& IMU::default_instance() {
  protobuf_sensor_2fimu_2eproto::InitDefaults();
  return *internal_default_instance();
}

IMU* IMU::New(::google::protobuf::Arena* arena) const {
  IMU* n = new IMU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMU::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.IMU)
  orientation_covariance_.Clear();
  angular_velocity_covariance_.Clear();
  linear_acceleration_covariance_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) {
    delete orientation_;
  }
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) {
    delete angular_velocity_;
  }
  angular_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = NULL;
}

bool IMU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.IMU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Quaternion orientation = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 orientation_covariance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orientation_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Vector3 angular_velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 angular_velocity_covariance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_angular_velocity_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Vector3 linear_acceleration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 linear_acceleration_covariance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linear_acceleration_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.IMU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.IMU)
  return false;
#undef DO_
}

void IMU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.IMU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Quaternion orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // repeated .choreo.Float64 orientation_covariance = 3;
  for (unsigned int i = 0, n = this->orientation_covariance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->orientation_covariance(i), output);
  }

  // .choreo.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_velocity_, output);
  }

  // repeated .choreo.Float64 angular_velocity_covariance = 5;
  for (unsigned int i = 0, n = this->angular_velocity_covariance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->angular_velocity_covariance(i), output);
  }

  // .choreo.Vector3 linear_acceleration = 6;
  if (this->has_linear_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->linear_acceleration_, output);
  }

  // repeated .choreo.Float64 linear_acceleration_covariance = 7;
  for (unsigned int i = 0, n = this->linear_acceleration_covariance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->linear_acceleration_covariance(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.IMU)
}

::google::protobuf::uint8* IMU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.IMU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, deterministic, target);
  }

  // repeated .choreo.Float64 orientation_covariance = 3;
  for (unsigned int i = 0, n = this->orientation_covariance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->orientation_covariance(i), deterministic, target);
  }

  // .choreo.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->angular_velocity_, deterministic, target);
  }

  // repeated .choreo.Float64 angular_velocity_covariance = 5;
  for (unsigned int i = 0, n = this->angular_velocity_covariance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->angular_velocity_covariance(i), deterministic, target);
  }

  // .choreo.Vector3 linear_acceleration = 6;
  if (this->has_linear_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->linear_acceleration_, deterministic, target);
  }

  // repeated .choreo.Float64 linear_acceleration_covariance = 7;
  for (unsigned int i = 0, n = this->linear_acceleration_covariance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->linear_acceleration_covariance(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.IMU)
  return target;
}

size_t IMU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.IMU)
  size_t total_size = 0;

  // repeated .choreo.Float64 orientation_covariance = 3;
  {
    unsigned int count = this->orientation_covariance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orientation_covariance(i));
    }
  }

  // repeated .choreo.Float64 angular_velocity_covariance = 5;
  {
    unsigned int count = this->angular_velocity_covariance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angular_velocity_covariance(i));
    }
  }

  // repeated .choreo.Float64 linear_acceleration_covariance = 7;
  {
    unsigned int count = this->linear_acceleration_covariance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->linear_acceleration_covariance(i));
    }
  }

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // .choreo.Vector3 angular_velocity = 4;
  if (this->has_angular_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_velocity_);
  }

  // .choreo.Vector3 linear_acceleration = 6;
  if (this->has_linear_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_acceleration_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.IMU)
  GOOGLE_DCHECK_NE(&from, this);
  const IMU* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.IMU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.IMU)
    MergeFrom(*source);
  }
}

void IMU::MergeFrom(const IMU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.IMU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orientation_covariance_.MergeFrom(from.orientation_covariance_);
  angular_velocity_covariance_.MergeFrom(from.angular_velocity_covariance_);
  linear_acceleration_covariance_.MergeFrom(from.linear_acceleration_covariance_);
  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::choreo::Quaternion::MergeFrom(from.orientation());
  }
  if (from.has_angular_velocity()) {
    mutable_angular_velocity()->::choreo::Vector3::MergeFrom(from.angular_velocity());
  }
  if (from.has_linear_acceleration()) {
    mutable_linear_acceleration()->::choreo::Vector3::MergeFrom(from.linear_acceleration());
  }
}

void IMU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.IMU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMU::CopyFrom(const IMU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.IMU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU::IsInitialized() const {
  return true;
}

void IMU::Swap(IMU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMU::InternalSwap(IMU* other) {
  orientation_covariance_.InternalSwap(&other->orientation_covariance_);
  angular_velocity_covariance_.InternalSwap(&other->angular_velocity_covariance_);
  linear_acceleration_covariance_.InternalSwap(&other->linear_acceleration_covariance_);
  std::swap(header_, other->header_);
  std::swap(orientation_, other->orientation_);
  std::swap(angular_velocity_, other->angular_velocity_);
  std::swap(linear_acceleration_, other->linear_acceleration_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMU::GetMetadata() const {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IMU

// .choreo.Header header = 1;
bool IMU::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void IMU::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& IMU::header() const {
  // @@protoc_insertion_point(field_get:choreo.IMU.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* IMU::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.IMU.header)
  return header_;
}
::choreo::Header* IMU::release_header() {
  // @@protoc_insertion_point(field_release:choreo.IMU.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void IMU::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.IMU.header)
}

// .choreo.Quaternion orientation = 2;
bool IMU::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
void IMU::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::choreo::Quaternion& IMU::orientation() const {
  // @@protoc_insertion_point(field_get:choreo.IMU.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::choreo::Quaternion::internal_default_instance();
}
::choreo::Quaternion* IMU::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::choreo::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:choreo.IMU.orientation)
  return orientation_;
}
::choreo::Quaternion* IMU::release_orientation() {
  // @@protoc_insertion_point(field_release:choreo.IMU.orientation)
  
  ::choreo::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void IMU::set_allocated_orientation(::choreo::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.IMU.orientation)
}

// repeated .choreo.Float64 orientation_covariance = 3;
int IMU::orientation_covariance_size() const {
  return orientation_covariance_.size();
}
void IMU::clear_orientation_covariance() {
  orientation_covariance_.Clear();
}
const ::choreo::Float64& IMU::orientation_covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.IMU.orientation_covariance)
  return orientation_covariance_.Get(index);
}
::choreo::Float64* IMU::mutable_orientation_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.IMU.orientation_covariance)
  return orientation_covariance_.Mutable(index);
}
::choreo::Float64* IMU::add_orientation_covariance() {
  // @@protoc_insertion_point(field_add:choreo.IMU.orientation_covariance)
  return orientation_covariance_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
IMU::mutable_orientation_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.IMU.orientation_covariance)
  return &orientation_covariance_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
IMU::orientation_covariance() const {
  // @@protoc_insertion_point(field_list:choreo.IMU.orientation_covariance)
  return orientation_covariance_;
}

// .choreo.Vector3 angular_velocity = 4;
bool IMU::has_angular_velocity() const {
  return this != internal_default_instance() && angular_velocity_ != NULL;
}
void IMU::clear_angular_velocity() {
  if (GetArenaNoVirtual() == NULL && angular_velocity_ != NULL) delete angular_velocity_;
  angular_velocity_ = NULL;
}
const ::choreo::Vector3& IMU::angular_velocity() const {
  // @@protoc_insertion_point(field_get:choreo.IMU.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* IMU::mutable_angular_velocity() {
  
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.IMU.angular_velocity)
  return angular_velocity_;
}
::choreo::Vector3* IMU::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:choreo.IMU.angular_velocity)
  
  ::choreo::Vector3* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
void IMU::set_allocated_angular_velocity(::choreo::Vector3* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.IMU.angular_velocity)
}

// repeated .choreo.Float64 angular_velocity_covariance = 5;
int IMU::angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
void IMU::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
const ::choreo::Float64& IMU::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.IMU.angular_velocity_covariance)
  return angular_velocity_covariance_.Get(index);
}
::choreo::Float64* IMU::mutable_angular_velocity_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.IMU.angular_velocity_covariance)
  return angular_velocity_covariance_.Mutable(index);
}
::choreo::Float64* IMU::add_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_add:choreo.IMU.angular_velocity_covariance)
  return angular_velocity_covariance_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
IMU::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.IMU.angular_velocity_covariance)
  return &angular_velocity_covariance_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
IMU::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:choreo.IMU.angular_velocity_covariance)
  return angular_velocity_covariance_;
}

// .choreo.Vector3 linear_acceleration = 6;
bool IMU::has_linear_acceleration() const {
  return this != internal_default_instance() && linear_acceleration_ != NULL;
}
void IMU::clear_linear_acceleration() {
  if (GetArenaNoVirtual() == NULL && linear_acceleration_ != NULL) delete linear_acceleration_;
  linear_acceleration_ = NULL;
}
const ::choreo::Vector3& IMU::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:choreo.IMU.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* IMU::mutable_linear_acceleration() {
  
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.IMU.linear_acceleration)
  return linear_acceleration_;
}
::choreo::Vector3* IMU::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:choreo.IMU.linear_acceleration)
  
  ::choreo::Vector3* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
void IMU::set_allocated_linear_acceleration(::choreo::Vector3* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.IMU.linear_acceleration)
}

// repeated .choreo.Float64 linear_acceleration_covariance = 7;
int IMU::linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
void IMU::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
const ::choreo::Float64& IMU::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.IMU.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Get(index);
}
::choreo::Float64* IMU::mutable_linear_acceleration_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.IMU.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Mutable(index);
}
::choreo::Float64* IMU::add_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_add:choreo.IMU.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
IMU::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.IMU.linear_acceleration_covariance)
  return &linear_acceleration_covariance_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
IMU::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:choreo.IMU.linear_acceleration_covariance)
  return linear_acceleration_covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MagneticField::kHeaderFieldNumber;
const int MagneticField::kMagneticFieldFieldNumber;
const int MagneticField::kMagneticFieldCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MagneticField::MagneticField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fimu_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.MagneticField)
}
MagneticField::MagneticField(const MagneticField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      magnetic_field_covariance_(from.magnetic_field_covariance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_magnetic_field()) {
    magnetic_field_ = new ::choreo::Vector3(*from.magnetic_field_);
  } else {
    magnetic_field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.MagneticField)
}

void MagneticField::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&magnetic_field_) -
    reinterpret_cast<char*>(&header_) + sizeof(magnetic_field_));
  _cached_size_ = 0;
}

MagneticField::~MagneticField() {
  // @@protoc_insertion_point(destructor:choreo.MagneticField)
  SharedDtor();
}

void MagneticField::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete magnetic_field_;
  }
}

void MagneticField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MagneticField::descriptor() {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MagneticField& MagneticField::default_instance() {
  protobuf_sensor_2fimu_2eproto::InitDefaults();
  return *internal_default_instance();
}

MagneticField* MagneticField::New(::google::protobuf::Arena* arena) const {
  MagneticField* n = new MagneticField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MagneticField::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.MagneticField)
  magnetic_field_covariance_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && magnetic_field_ != NULL) {
    delete magnetic_field_;
  }
  magnetic_field_ = NULL;
}

bool MagneticField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.MagneticField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Vector3 magnetic_field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magnetic_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 magnetic_field_covariance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_magnetic_field_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.MagneticField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.MagneticField)
  return false;
#undef DO_
}

void MagneticField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.MagneticField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Vector3 magnetic_field = 2;
  if (this->has_magnetic_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->magnetic_field_, output);
  }

  // repeated .choreo.Float64 magnetic_field_covariance = 3;
  for (unsigned int i = 0, n = this->magnetic_field_covariance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->magnetic_field_covariance(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.MagneticField)
}

::google::protobuf::uint8* MagneticField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.MagneticField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Vector3 magnetic_field = 2;
  if (this->has_magnetic_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->magnetic_field_, deterministic, target);
  }

  // repeated .choreo.Float64 magnetic_field_covariance = 3;
  for (unsigned int i = 0, n = this->magnetic_field_covariance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->magnetic_field_covariance(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.MagneticField)
  return target;
}

size_t MagneticField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.MagneticField)
  size_t total_size = 0;

  // repeated .choreo.Float64 magnetic_field_covariance = 3;
  {
    unsigned int count = this->magnetic_field_covariance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magnetic_field_covariance(i));
    }
  }

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Vector3 magnetic_field = 2;
  if (this->has_magnetic_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->magnetic_field_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MagneticField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.MagneticField)
  GOOGLE_DCHECK_NE(&from, this);
  const MagneticField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MagneticField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.MagneticField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.MagneticField)
    MergeFrom(*source);
  }
}

void MagneticField::MergeFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.MagneticField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  magnetic_field_covariance_.MergeFrom(from.magnetic_field_covariance_);
  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_magnetic_field()) {
    mutable_magnetic_field()->::choreo::Vector3::MergeFrom(from.magnetic_field());
  }
}

void MagneticField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagneticField::CopyFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagneticField::IsInitialized() const {
  return true;
}

void MagneticField::Swap(MagneticField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MagneticField::InternalSwap(MagneticField* other) {
  magnetic_field_covariance_.InternalSwap(&other->magnetic_field_covariance_);
  std::swap(header_, other->header_);
  std::swap(magnetic_field_, other->magnetic_field_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MagneticField::GetMetadata() const {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MagneticField

// .choreo.Header header = 1;
bool MagneticField::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MagneticField::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& MagneticField::header() const {
  // @@protoc_insertion_point(field_get:choreo.MagneticField.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* MagneticField::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.MagneticField.header)
  return header_;
}
::choreo::Header* MagneticField::release_header() {
  // @@protoc_insertion_point(field_release:choreo.MagneticField.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MagneticField::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.MagneticField.header)
}

// .choreo.Vector3 magnetic_field = 2;
bool MagneticField::has_magnetic_field() const {
  return this != internal_default_instance() && magnetic_field_ != NULL;
}
void MagneticField::clear_magnetic_field() {
  if (GetArenaNoVirtual() == NULL && magnetic_field_ != NULL) delete magnetic_field_;
  magnetic_field_ = NULL;
}
const ::choreo::Vector3& MagneticField::magnetic_field() const {
  // @@protoc_insertion_point(field_get:choreo.MagneticField.magnetic_field)
  return magnetic_field_ != NULL ? *magnetic_field_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* MagneticField::mutable_magnetic_field() {
  
  if (magnetic_field_ == NULL) {
    magnetic_field_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.MagneticField.magnetic_field)
  return magnetic_field_;
}
::choreo::Vector3* MagneticField::release_magnetic_field() {
  // @@protoc_insertion_point(field_release:choreo.MagneticField.magnetic_field)
  
  ::choreo::Vector3* temp = magnetic_field_;
  magnetic_field_ = NULL;
  return temp;
}
void MagneticField::set_allocated_magnetic_field(::choreo::Vector3* magnetic_field) {
  delete magnetic_field_;
  magnetic_field_ = magnetic_field;
  if (magnetic_field) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.MagneticField.magnetic_field)
}

// repeated .choreo.Float64 magnetic_field_covariance = 3;
int MagneticField::magnetic_field_covariance_size() const {
  return magnetic_field_covariance_.size();
}
void MagneticField::clear_magnetic_field_covariance() {
  magnetic_field_covariance_.Clear();
}
const ::choreo::Float64& MagneticField::magnetic_field_covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.MagneticField.magnetic_field_covariance)
  return magnetic_field_covariance_.Get(index);
}
::choreo::Float64* MagneticField::mutable_magnetic_field_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.MagneticField.magnetic_field_covariance)
  return magnetic_field_covariance_.Mutable(index);
}
::choreo::Float64* MagneticField::add_magnetic_field_covariance() {
  // @@protoc_insertion_point(field_add:choreo.MagneticField.magnetic_field_covariance)
  return magnetic_field_covariance_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
MagneticField::mutable_magnetic_field_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.MagneticField.magnetic_field_covariance)
  return &magnetic_field_covariance_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
MagneticField::magnetic_field_covariance() const {
  // @@protoc_insertion_point(field_list:choreo.MagneticField.magnetic_field_covariance)
  return magnetic_field_covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavSatStatus::kNavSatStatusFieldNumber;
const int NavSatStatus::kNavSatServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavSatStatus::NavSatStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fimu_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.NavSatStatus)
}
NavSatStatus::NavSatStatus(const NavSatStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nav_sat_status_, &from.nav_sat_status_,
    reinterpret_cast<char*>(&nav_sat_service_) -
    reinterpret_cast<char*>(&nav_sat_status_) + sizeof(nav_sat_service_));
  // @@protoc_insertion_point(copy_constructor:choreo.NavSatStatus)
}

void NavSatStatus::SharedCtor() {
  ::memset(&nav_sat_status_, 0, reinterpret_cast<char*>(&nav_sat_service_) -
    reinterpret_cast<char*>(&nav_sat_status_) + sizeof(nav_sat_service_));
  _cached_size_ = 0;
}

NavSatStatus::~NavSatStatus() {
  // @@protoc_insertion_point(destructor:choreo.NavSatStatus)
  SharedDtor();
}

void NavSatStatus::SharedDtor() {
}

void NavSatStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavSatStatus::descriptor() {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavSatStatus& NavSatStatus::default_instance() {
  protobuf_sensor_2fimu_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavSatStatus* NavSatStatus::New(::google::protobuf::Arena* arena) const {
  NavSatStatus* n = new NavSatStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavSatStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.NavSatStatus)
  ::memset(&nav_sat_status_, 0, reinterpret_cast<char*>(&nav_sat_service_) -
    reinterpret_cast<char*>(&nav_sat_status_) + sizeof(nav_sat_service_));
}

bool NavSatStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.NavSatStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.NavSatStatus.Status nav_sat_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nav_sat_status(static_cast< ::choreo::NavSatStatus_Status >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.NavSatStatus.Service nav_sat_service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nav_sat_service(static_cast< ::choreo::NavSatStatus_Service >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.NavSatStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.NavSatStatus)
  return false;
#undef DO_
}

void NavSatStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.NavSatStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.NavSatStatus.Status nav_sat_status = 1;
  if (this->nav_sat_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->nav_sat_status(), output);
  }

  // .choreo.NavSatStatus.Service nav_sat_service = 2;
  if (this->nav_sat_service() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->nav_sat_service(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.NavSatStatus)
}

::google::protobuf::uint8* NavSatStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.NavSatStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.NavSatStatus.Status nav_sat_status = 1;
  if (this->nav_sat_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->nav_sat_status(), target);
  }

  // .choreo.NavSatStatus.Service nav_sat_service = 2;
  if (this->nav_sat_service() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->nav_sat_service(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.NavSatStatus)
  return target;
}

size_t NavSatStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.NavSatStatus)
  size_t total_size = 0;

  // .choreo.NavSatStatus.Status nav_sat_status = 1;
  if (this->nav_sat_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nav_sat_status());
  }

  // .choreo.NavSatStatus.Service nav_sat_service = 2;
  if (this->nav_sat_service() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nav_sat_service());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavSatStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.NavSatStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const NavSatStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavSatStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.NavSatStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.NavSatStatus)
    MergeFrom(*source);
  }
}

void NavSatStatus::MergeFrom(const NavSatStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.NavSatStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nav_sat_status() != 0) {
    set_nav_sat_status(from.nav_sat_status());
  }
  if (from.nav_sat_service() != 0) {
    set_nav_sat_service(from.nav_sat_service());
  }
}

void NavSatStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.NavSatStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavSatStatus::CopyFrom(const NavSatStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.NavSatStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSatStatus::IsInitialized() const {
  return true;
}

void NavSatStatus::Swap(NavSatStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavSatStatus::InternalSwap(NavSatStatus* other) {
  std::swap(nav_sat_status_, other->nav_sat_status_);
  std::swap(nav_sat_service_, other->nav_sat_service_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavSatStatus::GetMetadata() const {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavSatStatus

// .choreo.NavSatStatus.Status nav_sat_status = 1;
void NavSatStatus::clear_nav_sat_status() {
  nav_sat_status_ = 0;
}
::choreo::NavSatStatus_Status NavSatStatus::nav_sat_status() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatStatus.nav_sat_status)
  return static_cast< ::choreo::NavSatStatus_Status >(nav_sat_status_);
}
void NavSatStatus::set_nav_sat_status(::choreo::NavSatStatus_Status value) {
  
  nav_sat_status_ = value;
  // @@protoc_insertion_point(field_set:choreo.NavSatStatus.nav_sat_status)
}

// .choreo.NavSatStatus.Service nav_sat_service = 2;
void NavSatStatus::clear_nav_sat_service() {
  nav_sat_service_ = 0;
}
::choreo::NavSatStatus_Service NavSatStatus::nav_sat_service() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatStatus.nav_sat_service)
  return static_cast< ::choreo::NavSatStatus_Service >(nav_sat_service_);
}
void NavSatStatus::set_nav_sat_service(::choreo::NavSatStatus_Service value) {
  
  nav_sat_service_ = value;
  // @@protoc_insertion_point(field_set:choreo.NavSatStatus.nav_sat_service)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavSatFix::kHeaderFieldNumber;
const int NavSatFix::kNavSatStatusFieldNumber;
const int NavSatFix::kLatitudeFieldNumber;
const int NavSatFix::kLongitudeFieldNumber;
const int NavSatFix::kAltitudeFieldNumber;
const int NavSatFix::kPositionCovarianceFieldNumber;
const int NavSatFix::kPositionCovarianceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavSatFix::NavSatFix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fimu_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.NavSatFix)
}
NavSatFix::NavSatFix(const NavSatFix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      position_covariance_(from.position_covariance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_nav_sat_status()) {
    nav_sat_status_ = new ::choreo::NavSatStatus(*from.nav_sat_status_);
  } else {
    nav_sat_status_ = NULL;
  }
  if (from.has_latitude()) {
    latitude_ = new ::choreo::Float64(*from.latitude_);
  } else {
    latitude_ = NULL;
  }
  if (from.has_longitude()) {
    longitude_ = new ::choreo::Float64(*from.longitude_);
  } else {
    longitude_ = NULL;
  }
  if (from.has_altitude()) {
    altitude_ = new ::choreo::Float64(*from.altitude_);
  } else {
    altitude_ = NULL;
  }
  position_covariance_type_ = from.position_covariance_type_;
  // @@protoc_insertion_point(copy_constructor:choreo.NavSatFix)
}

void NavSatFix::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&position_covariance_type_) -
    reinterpret_cast<char*>(&header_) + sizeof(position_covariance_type_));
  _cached_size_ = 0;
}

NavSatFix::~NavSatFix() {
  // @@protoc_insertion_point(destructor:choreo.NavSatFix)
  SharedDtor();
}

void NavSatFix::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete nav_sat_status_;
  }
  if (this != internal_default_instance()) {
    delete latitude_;
  }
  if (this != internal_default_instance()) {
    delete longitude_;
  }
  if (this != internal_default_instance()) {
    delete altitude_;
  }
}

void NavSatFix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavSatFix::descriptor() {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavSatFix& NavSatFix::default_instance() {
  protobuf_sensor_2fimu_2eproto::InitDefaults();
  return *internal_default_instance();
}

NavSatFix* NavSatFix::New(::google::protobuf::Arena* arena) const {
  NavSatFix* n = new NavSatFix;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NavSatFix::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.NavSatFix)
  position_covariance_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && nav_sat_status_ != NULL) {
    delete nav_sat_status_;
  }
  nav_sat_status_ = NULL;
  if (GetArenaNoVirtual() == NULL && latitude_ != NULL) {
    delete latitude_;
  }
  latitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && longitude_ != NULL) {
    delete longitude_;
  }
  longitude_ = NULL;
  if (GetArenaNoVirtual() == NULL && altitude_ != NULL) {
    delete altitude_;
  }
  altitude_ = NULL;
  position_covariance_type_ = 0;
}

bool NavSatFix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.NavSatFix)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.NavSatStatus nav_sat_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nav_sat_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 latitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_latitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_longitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 altitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_altitude()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 position_covariance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.NavSatFix.PositionCovarianceType position_covariance_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_position_covariance_type(static_cast< ::choreo::NavSatFix_PositionCovarianceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.NavSatFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.NavSatFix)
  return false;
#undef DO_
}

void NavSatFix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.NavSatFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.NavSatStatus nav_sat_status = 2;
  if (this->has_nav_sat_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nav_sat_status_, output);
  }

  // .choreo.Float64 latitude = 3;
  if (this->has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->latitude_, output);
  }

  // .choreo.Float64 longitude = 4;
  if (this->has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->longitude_, output);
  }

  // .choreo.Float64 altitude = 5;
  if (this->has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->altitude_, output);
  }

  // repeated .choreo.Float64 position_covariance = 6;
  for (unsigned int i = 0, n = this->position_covariance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->position_covariance(i), output);
  }

  // .choreo.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  if (this->position_covariance_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->position_covariance_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.NavSatFix)
}

::google::protobuf::uint8* NavSatFix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.NavSatFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.NavSatStatus nav_sat_status = 2;
  if (this->has_nav_sat_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nav_sat_status_, deterministic, target);
  }

  // .choreo.Float64 latitude = 3;
  if (this->has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->latitude_, deterministic, target);
  }

  // .choreo.Float64 longitude = 4;
  if (this->has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->longitude_, deterministic, target);
  }

  // .choreo.Float64 altitude = 5;
  if (this->has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->altitude_, deterministic, target);
  }

  // repeated .choreo.Float64 position_covariance = 6;
  for (unsigned int i = 0, n = this->position_covariance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->position_covariance(i), deterministic, target);
  }

  // .choreo.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  if (this->position_covariance_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->position_covariance_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.NavSatFix)
  return target;
}

size_t NavSatFix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.NavSatFix)
  size_t total_size = 0;

  // repeated .choreo.Float64 position_covariance = 6;
  {
    unsigned int count = this->position_covariance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position_covariance(i));
    }
  }

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.NavSatStatus nav_sat_status = 2;
  if (this->has_nav_sat_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nav_sat_status_);
  }

  // .choreo.Float64 latitude = 3;
  if (this->has_latitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->latitude_);
  }

  // .choreo.Float64 longitude = 4;
  if (this->has_longitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->longitude_);
  }

  // .choreo.Float64 altitude = 5;
  if (this->has_altitude()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->altitude_);
  }

  // .choreo.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  if (this->position_covariance_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_covariance_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavSatFix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.NavSatFix)
  GOOGLE_DCHECK_NE(&from, this);
  const NavSatFix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavSatFix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.NavSatFix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.NavSatFix)
    MergeFrom(*source);
  }
}

void NavSatFix::MergeFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.NavSatFix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_covariance_.MergeFrom(from.position_covariance_);
  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_nav_sat_status()) {
    mutable_nav_sat_status()->::choreo::NavSatStatus::MergeFrom(from.nav_sat_status());
  }
  if (from.has_latitude()) {
    mutable_latitude()->::choreo::Float64::MergeFrom(from.latitude());
  }
  if (from.has_longitude()) {
    mutable_longitude()->::choreo::Float64::MergeFrom(from.longitude());
  }
  if (from.has_altitude()) {
    mutable_altitude()->::choreo::Float64::MergeFrom(from.altitude());
  }
  if (from.position_covariance_type() != 0) {
    set_position_covariance_type(from.position_covariance_type());
  }
}

void NavSatFix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavSatFix::CopyFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSatFix::IsInitialized() const {
  return true;
}

void NavSatFix::Swap(NavSatFix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavSatFix::InternalSwap(NavSatFix* other) {
  position_covariance_.InternalSwap(&other->position_covariance_);
  std::swap(header_, other->header_);
  std::swap(nav_sat_status_, other->nav_sat_status_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(altitude_, other->altitude_);
  std::swap(position_covariance_type_, other->position_covariance_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NavSatFix::GetMetadata() const {
  protobuf_sensor_2fimu_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fimu_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NavSatFix

// .choreo.Header header = 1;
bool NavSatFix::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void NavSatFix::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& NavSatFix::header() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatFix.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* NavSatFix::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.NavSatFix.header)
  return header_;
}
::choreo::Header* NavSatFix::release_header() {
  // @@protoc_insertion_point(field_release:choreo.NavSatFix.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void NavSatFix::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.NavSatFix.header)
}

// .choreo.NavSatStatus nav_sat_status = 2;
bool NavSatFix::has_nav_sat_status() const {
  return this != internal_default_instance() && nav_sat_status_ != NULL;
}
void NavSatFix::clear_nav_sat_status() {
  if (GetArenaNoVirtual() == NULL && nav_sat_status_ != NULL) delete nav_sat_status_;
  nav_sat_status_ = NULL;
}
const ::choreo::NavSatStatus& NavSatFix::nav_sat_status() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatFix.nav_sat_status)
  return nav_sat_status_ != NULL ? *nav_sat_status_
                         : *::choreo::NavSatStatus::internal_default_instance();
}
::choreo::NavSatStatus* NavSatFix::mutable_nav_sat_status() {
  
  if (nav_sat_status_ == NULL) {
    nav_sat_status_ = new ::choreo::NavSatStatus;
  }
  // @@protoc_insertion_point(field_mutable:choreo.NavSatFix.nav_sat_status)
  return nav_sat_status_;
}
::choreo::NavSatStatus* NavSatFix::release_nav_sat_status() {
  // @@protoc_insertion_point(field_release:choreo.NavSatFix.nav_sat_status)
  
  ::choreo::NavSatStatus* temp = nav_sat_status_;
  nav_sat_status_ = NULL;
  return temp;
}
void NavSatFix::set_allocated_nav_sat_status(::choreo::NavSatStatus* nav_sat_status) {
  delete nav_sat_status_;
  nav_sat_status_ = nav_sat_status;
  if (nav_sat_status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.NavSatFix.nav_sat_status)
}

// .choreo.Float64 latitude = 3;
bool NavSatFix::has_latitude() const {
  return this != internal_default_instance() && latitude_ != NULL;
}
void NavSatFix::clear_latitude() {
  if (GetArenaNoVirtual() == NULL && latitude_ != NULL) delete latitude_;
  latitude_ = NULL;
}
const ::choreo::Float64& NavSatFix::latitude() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatFix.latitude)
  return latitude_ != NULL ? *latitude_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* NavSatFix::mutable_latitude() {
  
  if (latitude_ == NULL) {
    latitude_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.NavSatFix.latitude)
  return latitude_;
}
::choreo::Float64* NavSatFix::release_latitude() {
  // @@protoc_insertion_point(field_release:choreo.NavSatFix.latitude)
  
  ::choreo::Float64* temp = latitude_;
  latitude_ = NULL;
  return temp;
}
void NavSatFix::set_allocated_latitude(::choreo::Float64* latitude) {
  delete latitude_;
  latitude_ = latitude;
  if (latitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.NavSatFix.latitude)
}

// .choreo.Float64 longitude = 4;
bool NavSatFix::has_longitude() const {
  return this != internal_default_instance() && longitude_ != NULL;
}
void NavSatFix::clear_longitude() {
  if (GetArenaNoVirtual() == NULL && longitude_ != NULL) delete longitude_;
  longitude_ = NULL;
}
const ::choreo::Float64& NavSatFix::longitude() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatFix.longitude)
  return longitude_ != NULL ? *longitude_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* NavSatFix::mutable_longitude() {
  
  if (longitude_ == NULL) {
    longitude_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.NavSatFix.longitude)
  return longitude_;
}
::choreo::Float64* NavSatFix::release_longitude() {
  // @@protoc_insertion_point(field_release:choreo.NavSatFix.longitude)
  
  ::choreo::Float64* temp = longitude_;
  longitude_ = NULL;
  return temp;
}
void NavSatFix::set_allocated_longitude(::choreo::Float64* longitude) {
  delete longitude_;
  longitude_ = longitude;
  if (longitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.NavSatFix.longitude)
}

// .choreo.Float64 altitude = 5;
bool NavSatFix::has_altitude() const {
  return this != internal_default_instance() && altitude_ != NULL;
}
void NavSatFix::clear_altitude() {
  if (GetArenaNoVirtual() == NULL && altitude_ != NULL) delete altitude_;
  altitude_ = NULL;
}
const ::choreo::Float64& NavSatFix::altitude() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatFix.altitude)
  return altitude_ != NULL ? *altitude_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* NavSatFix::mutable_altitude() {
  
  if (altitude_ == NULL) {
    altitude_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.NavSatFix.altitude)
  return altitude_;
}
::choreo::Float64* NavSatFix::release_altitude() {
  // @@protoc_insertion_point(field_release:choreo.NavSatFix.altitude)
  
  ::choreo::Float64* temp = altitude_;
  altitude_ = NULL;
  return temp;
}
void NavSatFix::set_allocated_altitude(::choreo::Float64* altitude) {
  delete altitude_;
  altitude_ = altitude;
  if (altitude) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.NavSatFix.altitude)
}

// repeated .choreo.Float64 position_covariance = 6;
int NavSatFix::position_covariance_size() const {
  return position_covariance_.size();
}
void NavSatFix::clear_position_covariance() {
  position_covariance_.Clear();
}
const ::choreo::Float64& NavSatFix::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.NavSatFix.position_covariance)
  return position_covariance_.Get(index);
}
::choreo::Float64* NavSatFix::mutable_position_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.NavSatFix.position_covariance)
  return position_covariance_.Mutable(index);
}
::choreo::Float64* NavSatFix::add_position_covariance() {
  // @@protoc_insertion_point(field_add:choreo.NavSatFix.position_covariance)
  return position_covariance_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
NavSatFix::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.NavSatFix.position_covariance)
  return &position_covariance_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
NavSatFix::position_covariance() const {
  // @@protoc_insertion_point(field_list:choreo.NavSatFix.position_covariance)
  return position_covariance_;
}

// .choreo.NavSatFix.PositionCovarianceType position_covariance_type = 7;
void NavSatFix::clear_position_covariance_type() {
  position_covariance_type_ = 0;
}
::choreo::NavSatFix_PositionCovarianceType NavSatFix::position_covariance_type() const {
  // @@protoc_insertion_point(field_get:choreo.NavSatFix.position_covariance_type)
  return static_cast< ::choreo::NavSatFix_PositionCovarianceType >(position_covariance_type_);
}
void NavSatFix::set_position_covariance_type(::choreo::NavSatFix_PositionCovarianceType value) {
  
  position_covariance_type_ = value;
  // @@protoc_insertion_point(field_set:choreo.NavSatFix.position_covariance_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
