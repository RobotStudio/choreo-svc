// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sensor/joint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sensor/joint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class JointStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<JointState> {
} _JointState_default_instance_;
class MultiDOFJointStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultiDOFJointState> {
} _MultiDOFJointState_default_instance_;

namespace protobuf_sensor_2fjoint_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, names_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, positions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, velocities_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointState, efforts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiDOFJointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiDOFJointState, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiDOFJointState, transforms_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiDOFJointState, twists_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiDOFJointState, wrenches_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(JointState)},
  { 10, -1, sizeof(MultiDOFJointState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_JointState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MultiDOFJointState_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sensor/joint.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _JointState_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MultiDOFJointState_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fstring_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2ftransform_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2ftwist_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fwrench_2eproto::InitDefaults();
  _JointState_default_instance_.DefaultConstruct();
  _MultiDOFJointState_default_instance_.DefaultConstruct();
  _JointState_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _MultiDOFJointState_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\022sensor/joint.proto\022\006choreo\032\025primitive/"
      "float.proto\032\026primitive/header.proto\032\026pri"
      "mitive/string.proto\032\031geometric/transform"
      ".proto\032\025geometric/twist.proto\032\026geometric"
      "/wrench.proto\"\266\001\n\nJointState\022\036\n\006header\030\001"
      " \001(\0132\016.choreo.Header\022\035\n\005names\030\002 \003(\0132\016.ch"
      "oreo.String\022\"\n\tpositions\030\003 \003(\0132\017.choreo."
      "Float64\022#\n\nvelocities\030\004 \003(\0132\017.choreo.Flo"
      "at64\022 \n\007efforts\030\005 \003(\0132\017.choreo.Float64\"\234"
      "\001\n\022MultiDOFJointState\022\036\n\006header\030\001 \001(\0132\016."
      "choreo.Header\022%\n\ntransforms\030\002 \003(\0132\021.chor"
      "eo.Transform\022\035\n\006twists\030\003 \003(\0132\r.choreo.Tw"
      "ist\022 \n\010wrenches\030\004 \003(\0132\016.choreo.WrenchB+Z"
      ")github.com/RobotStudio/choreo-msg/msg;m"
      "sgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sensor/joint.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fstring_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2ftransform_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2ftwist_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fwrench_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_sensor_2fjoint_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JointState::kHeaderFieldNumber;
const int JointState::kNamesFieldNumber;
const int JointState::kPositionsFieldNumber;
const int JointState::kVelocitiesFieldNumber;
const int JointState::kEffortsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JointState::JointState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fjoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.JointState)
}
JointState::JointState(const JointState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      names_(from.names_),
      positions_(from.positions_),
      velocities_(from.velocities_),
      efforts_(from.efforts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.JointState)
}

void JointState::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:choreo.JointState)
  SharedDtor();
}

void JointState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void JointState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointState::descriptor() {
  protobuf_sensor_2fjoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JointState& JointState::default_instance() {
  protobuf_sensor_2fjoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

JointState* JointState::New(::google::protobuf::Arena* arena) const {
  JointState* n = new JointState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.JointState)
  names_.Clear();
  positions_.Clear();
  velocities_.Clear();
  efforts_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool JointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.JointState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.String names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_names()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 positions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 velocities = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_velocities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 efforts = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_efforts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.JointState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.JointState)
  return false;
#undef DO_
}

void JointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.JointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .choreo.String names = 2;
  for (unsigned int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->names(i), output);
  }

  // repeated .choreo.Float64 positions = 3;
  for (unsigned int i = 0, n = this->positions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->positions(i), output);
  }

  // repeated .choreo.Float64 velocities = 4;
  for (unsigned int i = 0, n = this->velocities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->velocities(i), output);
  }

  // repeated .choreo.Float64 efforts = 5;
  for (unsigned int i = 0, n = this->efforts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->efforts(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.JointState)
}

::google::protobuf::uint8* JointState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.JointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .choreo.String names = 2;
  for (unsigned int i = 0, n = this->names_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->names(i), deterministic, target);
  }

  // repeated .choreo.Float64 positions = 3;
  for (unsigned int i = 0, n = this->positions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->positions(i), deterministic, target);
  }

  // repeated .choreo.Float64 velocities = 4;
  for (unsigned int i = 0, n = this->velocities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->velocities(i), deterministic, target);
  }

  // repeated .choreo.Float64 efforts = 5;
  for (unsigned int i = 0, n = this->efforts_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->efforts(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.JointState)
  size_t total_size = 0;

  // repeated .choreo.String names = 2;
  {
    unsigned int count = this->names_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->names(i));
    }
  }

  // repeated .choreo.Float64 positions = 3;
  {
    unsigned int count = this->positions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positions(i));
    }
  }

  // repeated .choreo.Float64 velocities = 4;
  {
    unsigned int count = this->velocities_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocities(i));
    }
  }

  // repeated .choreo.Float64 efforts = 5;
  {
    unsigned int count = this->efforts_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->efforts(i));
    }
  }

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  const JointState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JointState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.JointState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.JointState)
    MergeFrom(*source);
  }
}

void JointState::MergeFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  positions_.MergeFrom(from.positions_);
  velocities_.MergeFrom(from.velocities_);
  efforts_.MergeFrom(from.efforts_);
  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
}

void JointState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::Swap(JointState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JointState::InternalSwap(JointState* other) {
  names_.InternalSwap(&other->names_);
  positions_.InternalSwap(&other->positions_);
  velocities_.InternalSwap(&other->velocities_);
  efforts_.InternalSwap(&other->efforts_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JointState::GetMetadata() const {
  protobuf_sensor_2fjoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JointState

// .choreo.Header header = 1;
bool JointState::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void JointState::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& JointState::header() const {
  // @@protoc_insertion_point(field_get:choreo.JointState.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* JointState::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.JointState.header)
  return header_;
}
::choreo::Header* JointState::release_header() {
  // @@protoc_insertion_point(field_release:choreo.JointState.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void JointState::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.JointState.header)
}

// repeated .choreo.String names = 2;
int JointState::names_size() const {
  return names_.size();
}
void JointState::clear_names() {
  names_.Clear();
}
const ::choreo::String& JointState::names(int index) const {
  // @@protoc_insertion_point(field_get:choreo.JointState.names)
  return names_.Get(index);
}
::choreo::String* JointState::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.JointState.names)
  return names_.Mutable(index);
}
::choreo::String* JointState::add_names() {
  // @@protoc_insertion_point(field_add:choreo.JointState.names)
  return names_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::String >*
JointState::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:choreo.JointState.names)
  return &names_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::String >&
JointState::names() const {
  // @@protoc_insertion_point(field_list:choreo.JointState.names)
  return names_;
}

// repeated .choreo.Float64 positions = 3;
int JointState::positions_size() const {
  return positions_.size();
}
void JointState::clear_positions() {
  positions_.Clear();
}
const ::choreo::Float64& JointState::positions(int index) const {
  // @@protoc_insertion_point(field_get:choreo.JointState.positions)
  return positions_.Get(index);
}
::choreo::Float64* JointState::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.JointState.positions)
  return positions_.Mutable(index);
}
::choreo::Float64* JointState::add_positions() {
  // @@protoc_insertion_point(field_add:choreo.JointState.positions)
  return positions_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
JointState::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:choreo.JointState.positions)
  return &positions_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
JointState::positions() const {
  // @@protoc_insertion_point(field_list:choreo.JointState.positions)
  return positions_;
}

// repeated .choreo.Float64 velocities = 4;
int JointState::velocities_size() const {
  return velocities_.size();
}
void JointState::clear_velocities() {
  velocities_.Clear();
}
const ::choreo::Float64& JointState::velocities(int index) const {
  // @@protoc_insertion_point(field_get:choreo.JointState.velocities)
  return velocities_.Get(index);
}
::choreo::Float64* JointState::mutable_velocities(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.JointState.velocities)
  return velocities_.Mutable(index);
}
::choreo::Float64* JointState::add_velocities() {
  // @@protoc_insertion_point(field_add:choreo.JointState.velocities)
  return velocities_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
JointState::mutable_velocities() {
  // @@protoc_insertion_point(field_mutable_list:choreo.JointState.velocities)
  return &velocities_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
JointState::velocities() const {
  // @@protoc_insertion_point(field_list:choreo.JointState.velocities)
  return velocities_;
}

// repeated .choreo.Float64 efforts = 5;
int JointState::efforts_size() const {
  return efforts_.size();
}
void JointState::clear_efforts() {
  efforts_.Clear();
}
const ::choreo::Float64& JointState::efforts(int index) const {
  // @@protoc_insertion_point(field_get:choreo.JointState.efforts)
  return efforts_.Get(index);
}
::choreo::Float64* JointState::mutable_efforts(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.JointState.efforts)
  return efforts_.Mutable(index);
}
::choreo::Float64* JointState::add_efforts() {
  // @@protoc_insertion_point(field_add:choreo.JointState.efforts)
  return efforts_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
JointState::mutable_efforts() {
  // @@protoc_insertion_point(field_mutable_list:choreo.JointState.efforts)
  return &efforts_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
JointState::efforts() const {
  // @@protoc_insertion_point(field_list:choreo.JointState.efforts)
  return efforts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiDOFJointState::kHeaderFieldNumber;
const int MultiDOFJointState::kTransformsFieldNumber;
const int MultiDOFJointState::kTwistsFieldNumber;
const int MultiDOFJointState::kWrenchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiDOFJointState::MultiDOFJointState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_sensor_2fjoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.MultiDOFJointState)
}
MultiDOFJointState::MultiDOFJointState(const MultiDOFJointState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      transforms_(from.transforms_),
      twists_(from.twists_),
      wrenches_(from.wrenches_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.MultiDOFJointState)
}

void MultiDOFJointState::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

MultiDOFJointState::~MultiDOFJointState() {
  // @@protoc_insertion_point(destructor:choreo.MultiDOFJointState)
  SharedDtor();
}

void MultiDOFJointState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void MultiDOFJointState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiDOFJointState::descriptor() {
  protobuf_sensor_2fjoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultiDOFJointState& MultiDOFJointState::default_instance() {
  protobuf_sensor_2fjoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultiDOFJointState* MultiDOFJointState::New(::google::protobuf::Arena* arena) const {
  MultiDOFJointState* n = new MultiDOFJointState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiDOFJointState::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.MultiDOFJointState)
  transforms_.Clear();
  twists_.Clear();
  wrenches_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool MultiDOFJointState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.MultiDOFJointState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Transform transforms = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transforms()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Twist twists = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_twists()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Wrench wrenches = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wrenches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.MultiDOFJointState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.MultiDOFJointState)
  return false;
#undef DO_
}

void MultiDOFJointState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.MultiDOFJointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .choreo.Transform transforms = 2;
  for (unsigned int i = 0, n = this->transforms_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transforms(i), output);
  }

  // repeated .choreo.Twist twists = 3;
  for (unsigned int i = 0, n = this->twists_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->twists(i), output);
  }

  // repeated .choreo.Wrench wrenches = 4;
  for (unsigned int i = 0, n = this->wrenches_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->wrenches(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.MultiDOFJointState)
}

::google::protobuf::uint8* MultiDOFJointState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.MultiDOFJointState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .choreo.Transform transforms = 2;
  for (unsigned int i = 0, n = this->transforms_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->transforms(i), deterministic, target);
  }

  // repeated .choreo.Twist twists = 3;
  for (unsigned int i = 0, n = this->twists_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->twists(i), deterministic, target);
  }

  // repeated .choreo.Wrench wrenches = 4;
  for (unsigned int i = 0, n = this->wrenches_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->wrenches(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.MultiDOFJointState)
  return target;
}

size_t MultiDOFJointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.MultiDOFJointState)
  size_t total_size = 0;

  // repeated .choreo.Transform transforms = 2;
  {
    unsigned int count = this->transforms_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transforms(i));
    }
  }

  // repeated .choreo.Twist twists = 3;
  {
    unsigned int count = this->twists_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->twists(i));
    }
  }

  // repeated .choreo.Wrench wrenches = 4;
  {
    unsigned int count = this->wrenches_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wrenches(i));
    }
  }

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiDOFJointState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.MultiDOFJointState)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiDOFJointState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiDOFJointState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.MultiDOFJointState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.MultiDOFJointState)
    MergeFrom(*source);
  }
}

void MultiDOFJointState::MergeFrom(const MultiDOFJointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.MultiDOFJointState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transforms_.MergeFrom(from.transforms_);
  twists_.MergeFrom(from.twists_);
  wrenches_.MergeFrom(from.wrenches_);
  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
}

void MultiDOFJointState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.MultiDOFJointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiDOFJointState::CopyFrom(const MultiDOFJointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.MultiDOFJointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiDOFJointState::IsInitialized() const {
  return true;
}

void MultiDOFJointState::Swap(MultiDOFJointState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiDOFJointState::InternalSwap(MultiDOFJointState* other) {
  transforms_.InternalSwap(&other->transforms_);
  twists_.InternalSwap(&other->twists_);
  wrenches_.InternalSwap(&other->wrenches_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiDOFJointState::GetMetadata() const {
  protobuf_sensor_2fjoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_sensor_2fjoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiDOFJointState

// .choreo.Header header = 1;
bool MultiDOFJointState::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void MultiDOFJointState::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& MultiDOFJointState::header() const {
  // @@protoc_insertion_point(field_get:choreo.MultiDOFJointState.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* MultiDOFJointState::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.MultiDOFJointState.header)
  return header_;
}
::choreo::Header* MultiDOFJointState::release_header() {
  // @@protoc_insertion_point(field_release:choreo.MultiDOFJointState.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MultiDOFJointState::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.MultiDOFJointState.header)
}

// repeated .choreo.Transform transforms = 2;
int MultiDOFJointState::transforms_size() const {
  return transforms_.size();
}
void MultiDOFJointState::clear_transforms() {
  transforms_.Clear();
}
const ::choreo::Transform& MultiDOFJointState::transforms(int index) const {
  // @@protoc_insertion_point(field_get:choreo.MultiDOFJointState.transforms)
  return transforms_.Get(index);
}
::choreo::Transform* MultiDOFJointState::mutable_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.MultiDOFJointState.transforms)
  return transforms_.Mutable(index);
}
::choreo::Transform* MultiDOFJointState::add_transforms() {
  // @@protoc_insertion_point(field_add:choreo.MultiDOFJointState.transforms)
  return transforms_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Transform >*
MultiDOFJointState::mutable_transforms() {
  // @@protoc_insertion_point(field_mutable_list:choreo.MultiDOFJointState.transforms)
  return &transforms_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Transform >&
MultiDOFJointState::transforms() const {
  // @@protoc_insertion_point(field_list:choreo.MultiDOFJointState.transforms)
  return transforms_;
}

// repeated .choreo.Twist twists = 3;
int MultiDOFJointState::twists_size() const {
  return twists_.size();
}
void MultiDOFJointState::clear_twists() {
  twists_.Clear();
}
const ::choreo::Twist& MultiDOFJointState::twists(int index) const {
  // @@protoc_insertion_point(field_get:choreo.MultiDOFJointState.twists)
  return twists_.Get(index);
}
::choreo::Twist* MultiDOFJointState::mutable_twists(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.MultiDOFJointState.twists)
  return twists_.Mutable(index);
}
::choreo::Twist* MultiDOFJointState::add_twists() {
  // @@protoc_insertion_point(field_add:choreo.MultiDOFJointState.twists)
  return twists_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Twist >*
MultiDOFJointState::mutable_twists() {
  // @@protoc_insertion_point(field_mutable_list:choreo.MultiDOFJointState.twists)
  return &twists_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Twist >&
MultiDOFJointState::twists() const {
  // @@protoc_insertion_point(field_list:choreo.MultiDOFJointState.twists)
  return twists_;
}

// repeated .choreo.Wrench wrenches = 4;
int MultiDOFJointState::wrenches_size() const {
  return wrenches_.size();
}
void MultiDOFJointState::clear_wrenches() {
  wrenches_.Clear();
}
const ::choreo::Wrench& MultiDOFJointState::wrenches(int index) const {
  // @@protoc_insertion_point(field_get:choreo.MultiDOFJointState.wrenches)
  return wrenches_.Get(index);
}
::choreo::Wrench* MultiDOFJointState::mutable_wrenches(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.MultiDOFJointState.wrenches)
  return wrenches_.Mutable(index);
}
::choreo::Wrench* MultiDOFJointState::add_wrenches() {
  // @@protoc_insertion_point(field_add:choreo.MultiDOFJointState.wrenches)
  return wrenches_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Wrench >*
MultiDOFJointState::mutable_wrenches() {
  // @@protoc_insertion_point(field_mutable_list:choreo.MultiDOFJointState.wrenches)
  return &wrenches_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Wrench >&
MultiDOFJointState::wrenches() const {
  // @@protoc_insertion_point(field_list:choreo.MultiDOFJointState.wrenches)
  return wrenches_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
