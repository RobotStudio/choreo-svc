// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/wrench.proto

#ifndef PROTOBUF_geometric_2fwrench_2eproto__INCLUDED
#define PROTOBUF_geometric_2fwrench_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive/header.pb.h"
#include "geometric/vector.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3Stamped;
class Vector3StampedDefaultTypeInternal;
extern Vector3StampedDefaultTypeInternal _Vector3Stamped_default_instance_;
class Wrench;
class WrenchDefaultTypeInternal;
extern WrenchDefaultTypeInternal _Wrench_default_instance_;
class WrenchStamped;
class WrenchStampedDefaultTypeInternal;
extern WrenchStampedDefaultTypeInternal _WrenchStamped_default_instance_;
}  // namespace choreo

namespace choreo {

namespace protobuf_geometric_2fwrench_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2fwrench_2eproto

// ===================================================================

class WrenchStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.WrenchStamped) */ {
 public:
  WrenchStamped();
  virtual ~WrenchStamped();

  WrenchStamped(const WrenchStamped& from);

  inline WrenchStamped& operator=(const WrenchStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WrenchStamped& default_instance();

  static inline const WrenchStamped* internal_default_instance() {
    return reinterpret_cast<const WrenchStamped*>(
               &_WrenchStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(WrenchStamped* other);

  // implements Message ----------------------------------------------

  inline WrenchStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  WrenchStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WrenchStamped& from);
  void MergeFrom(const WrenchStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WrenchStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Wrench wrench = 2;
  bool has_wrench() const;
  void clear_wrench();
  static const int kWrenchFieldNumber = 2;
  const ::choreo::Wrench& wrench() const;
  ::choreo::Wrench* mutable_wrench();
  ::choreo::Wrench* release_wrench();
  void set_allocated_wrench(::choreo::Wrench* wrench);

  // @@protoc_insertion_point(class_scope:choreo.WrenchStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Wrench* wrench_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fwrench_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Wrench : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Wrench) */ {
 public:
  Wrench();
  virtual ~Wrench();

  Wrench(const Wrench& from);

  inline Wrench& operator=(const Wrench& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Wrench& default_instance();

  static inline const Wrench* internal_default_instance() {
    return reinterpret_cast<const Wrench*>(
               &_Wrench_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Wrench* other);

  // implements Message ----------------------------------------------

  inline Wrench* New() const PROTOBUF_FINAL { return New(NULL); }

  Wrench* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Wrench& from);
  void MergeFrom(const Wrench& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Wrench* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Vector3 force = 1;
  bool has_force() const;
  void clear_force();
  static const int kForceFieldNumber = 1;
  const ::choreo::Vector3& force() const;
  ::choreo::Vector3* mutable_force();
  ::choreo::Vector3* release_force();
  void set_allocated_force(::choreo::Vector3* force);

  // .choreo.Vector3 torque = 2;
  bool has_torque() const;
  void clear_torque();
  static const int kTorqueFieldNumber = 2;
  const ::choreo::Vector3& torque() const;
  ::choreo::Vector3* mutable_torque();
  ::choreo::Vector3* release_torque();
  void set_allocated_torque(::choreo::Vector3* torque);

  // @@protoc_insertion_point(class_scope:choreo.Wrench)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Vector3* force_;
  ::choreo::Vector3* torque_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fwrench_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// WrenchStamped

// .choreo.Header header = 1;
inline bool WrenchStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void WrenchStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& WrenchStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.WrenchStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* WrenchStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.WrenchStamped.header)
  return header_;
}
inline ::choreo::Header* WrenchStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.WrenchStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void WrenchStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.WrenchStamped.header)
}

// .choreo.Wrench wrench = 2;
inline bool WrenchStamped::has_wrench() const {
  return this != internal_default_instance() && wrench_ != NULL;
}
inline void WrenchStamped::clear_wrench() {
  if (GetArenaNoVirtual() == NULL && wrench_ != NULL) delete wrench_;
  wrench_ = NULL;
}
inline const ::choreo::Wrench& WrenchStamped::wrench() const {
  // @@protoc_insertion_point(field_get:choreo.WrenchStamped.wrench)
  return wrench_ != NULL ? *wrench_
                         : *::choreo::Wrench::internal_default_instance();
}
inline ::choreo::Wrench* WrenchStamped::mutable_wrench() {
  
  if (wrench_ == NULL) {
    wrench_ = new ::choreo::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:choreo.WrenchStamped.wrench)
  return wrench_;
}
inline ::choreo::Wrench* WrenchStamped::release_wrench() {
  // @@protoc_insertion_point(field_release:choreo.WrenchStamped.wrench)
  
  ::choreo::Wrench* temp = wrench_;
  wrench_ = NULL;
  return temp;
}
inline void WrenchStamped::set_allocated_wrench(::choreo::Wrench* wrench) {
  delete wrench_;
  wrench_ = wrench;
  if (wrench) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.WrenchStamped.wrench)
}

// -------------------------------------------------------------------

// Wrench

// .choreo.Vector3 force = 1;
inline bool Wrench::has_force() const {
  return this != internal_default_instance() && force_ != NULL;
}
inline void Wrench::clear_force() {
  if (GetArenaNoVirtual() == NULL && force_ != NULL) delete force_;
  force_ = NULL;
}
inline const ::choreo::Vector3& Wrench::force() const {
  // @@protoc_insertion_point(field_get:choreo.Wrench.force)
  return force_ != NULL ? *force_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Wrench::mutable_force() {
  
  if (force_ == NULL) {
    force_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Wrench.force)
  return force_;
}
inline ::choreo::Vector3* Wrench::release_force() {
  // @@protoc_insertion_point(field_release:choreo.Wrench.force)
  
  ::choreo::Vector3* temp = force_;
  force_ = NULL;
  return temp;
}
inline void Wrench::set_allocated_force(::choreo::Vector3* force) {
  delete force_;
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Wrench.force)
}

// .choreo.Vector3 torque = 2;
inline bool Wrench::has_torque() const {
  return this != internal_default_instance() && torque_ != NULL;
}
inline void Wrench::clear_torque() {
  if (GetArenaNoVirtual() == NULL && torque_ != NULL) delete torque_;
  torque_ = NULL;
}
inline const ::choreo::Vector3& Wrench::torque() const {
  // @@protoc_insertion_point(field_get:choreo.Wrench.torque)
  return torque_ != NULL ? *torque_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Wrench::mutable_torque() {
  
  if (torque_ == NULL) {
    torque_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Wrench.torque)
  return torque_;
}
inline ::choreo::Vector3* Wrench::release_torque() {
  // @@protoc_insertion_point(field_release:choreo.Wrench.torque)
  
  ::choreo::Vector3* temp = torque_;
  torque_ = NULL;
  return temp;
}
inline void Wrench::set_allocated_torque(::choreo::Vector3* torque) {
  delete torque_;
  torque_ = torque;
  if (torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Wrench.torque)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2fwrench_2eproto__INCLUDED
