// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/twist.proto

#ifndef PROTOBUF_geometric_2ftwist_2eproto__INCLUDED
#define PROTOBUF_geometric_2ftwist_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive/header.pb.h"
#include "primitive/float.pb.h"
#include "geometric/vector.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class Float32;
class Float32DefaultTypeInternal;
extern Float32DefaultTypeInternal _Float32_default_instance_;
class Float32Array;
class Float32ArrayDefaultTypeInternal;
extern Float32ArrayDefaultTypeInternal _Float32Array_default_instance_;
class Float64;
class Float64DefaultTypeInternal;
extern Float64DefaultTypeInternal _Float64_default_instance_;
class Float64Array;
class Float64ArrayDefaultTypeInternal;
extern Float64ArrayDefaultTypeInternal _Float64Array_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Twist;
class TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class TwistStamped;
class TwistStampedDefaultTypeInternal;
extern TwistStampedDefaultTypeInternal _TwistStamped_default_instance_;
class TwistWithCovariance;
class TwistWithCovarianceDefaultTypeInternal;
extern TwistWithCovarianceDefaultTypeInternal _TwistWithCovariance_default_instance_;
class TwistWithCovarianceStamped;
class TwistWithCovarianceStampedDefaultTypeInternal;
extern TwistWithCovarianceStampedDefaultTypeInternal _TwistWithCovarianceStamped_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3Stamped;
class Vector3StampedDefaultTypeInternal;
extern Vector3StampedDefaultTypeInternal _Vector3Stamped_default_instance_;
}  // namespace choreo

namespace choreo {

namespace protobuf_geometric_2ftwist_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2ftwist_2eproto

// ===================================================================

class TwistStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.TwistStamped) */ {
 public:
  TwistStamped();
  virtual ~TwistStamped();

  TwistStamped(const TwistStamped& from);

  inline TwistStamped& operator=(const TwistStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TwistStamped& default_instance();

  static inline const TwistStamped* internal_default_instance() {
    return reinterpret_cast<const TwistStamped*>(
               &_TwistStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TwistStamped* other);

  // implements Message ----------------------------------------------

  inline TwistStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  TwistStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TwistStamped& from);
  void MergeFrom(const TwistStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TwistStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Twist twist = 2;
  bool has_twist() const;
  void clear_twist();
  static const int kTwistFieldNumber = 2;
  const ::choreo::Twist& twist() const;
  ::choreo::Twist* mutable_twist();
  ::choreo::Twist* release_twist();
  void set_allocated_twist(::choreo::Twist* twist);

  // @@protoc_insertion_point(class_scope:choreo.TwistStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Twist* twist_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2ftwist_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TwistWithCovarianceStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.TwistWithCovarianceStamped) */ {
 public:
  TwistWithCovarianceStamped();
  virtual ~TwistWithCovarianceStamped();

  TwistWithCovarianceStamped(const TwistWithCovarianceStamped& from);

  inline TwistWithCovarianceStamped& operator=(const TwistWithCovarianceStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TwistWithCovarianceStamped& default_instance();

  static inline const TwistWithCovarianceStamped* internal_default_instance() {
    return reinterpret_cast<const TwistWithCovarianceStamped*>(
               &_TwistWithCovarianceStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(TwistWithCovarianceStamped* other);

  // implements Message ----------------------------------------------

  inline TwistWithCovarianceStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  TwistWithCovarianceStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TwistWithCovarianceStamped& from);
  void MergeFrom(const TwistWithCovarianceStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TwistWithCovarianceStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.TwistWithCovariance twist = 2;
  bool has_twist() const;
  void clear_twist();
  static const int kTwistFieldNumber = 2;
  const ::choreo::TwistWithCovariance& twist() const;
  ::choreo::TwistWithCovariance* mutable_twist();
  ::choreo::TwistWithCovariance* release_twist();
  void set_allocated_twist(::choreo::TwistWithCovariance* twist);

  // @@protoc_insertion_point(class_scope:choreo.TwistWithCovarianceStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::TwistWithCovariance* twist_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2ftwist_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Twist : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Twist) */ {
 public:
  Twist();
  virtual ~Twist();

  Twist(const Twist& from);

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Twist& default_instance();

  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Twist* other);

  // implements Message ----------------------------------------------

  inline Twist* New() const PROTOBUF_FINAL { return New(NULL); }

  Twist* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Twist* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Vector3 linear = 1;
  bool has_linear() const;
  void clear_linear();
  static const int kLinearFieldNumber = 1;
  const ::choreo::Vector3& linear() const;
  ::choreo::Vector3* mutable_linear();
  ::choreo::Vector3* release_linear();
  void set_allocated_linear(::choreo::Vector3* linear);

  // .choreo.Vector3 angular = 2;
  bool has_angular() const;
  void clear_angular();
  static const int kAngularFieldNumber = 2;
  const ::choreo::Vector3& angular() const;
  ::choreo::Vector3* mutable_angular();
  ::choreo::Vector3* release_angular();
  void set_allocated_angular(::choreo::Vector3* angular);

  // @@protoc_insertion_point(class_scope:choreo.Twist)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Vector3* linear_;
  ::choreo::Vector3* angular_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2ftwist_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TwistWithCovariance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.TwistWithCovariance) */ {
 public:
  TwistWithCovariance();
  virtual ~TwistWithCovariance();

  TwistWithCovariance(const TwistWithCovariance& from);

  inline TwistWithCovariance& operator=(const TwistWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TwistWithCovariance& default_instance();

  static inline const TwistWithCovariance* internal_default_instance() {
    return reinterpret_cast<const TwistWithCovariance*>(
               &_TwistWithCovariance_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TwistWithCovariance* other);

  // implements Message ----------------------------------------------

  inline TwistWithCovariance* New() const PROTOBUF_FINAL { return New(NULL); }

  TwistWithCovariance* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TwistWithCovariance& from);
  void MergeFrom(const TwistWithCovariance& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TwistWithCovariance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .choreo.Float64 covariance = 2;
  int covariance_size() const;
  void clear_covariance();
  static const int kCovarianceFieldNumber = 2;
  const ::choreo::Float64& covariance(int index) const;
  ::choreo::Float64* mutable_covariance(int index);
  ::choreo::Float64* add_covariance();
  ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
      mutable_covariance();
  const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
      covariance() const;

  // .choreo.Twist twist = 1;
  bool has_twist() const;
  void clear_twist();
  static const int kTwistFieldNumber = 1;
  const ::choreo::Twist& twist() const;
  ::choreo::Twist* mutable_twist();
  ::choreo::Twist* release_twist();
  void set_allocated_twist(::choreo::Twist* twist);

  // @@protoc_insertion_point(class_scope:choreo.TwistWithCovariance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::choreo::Float64 > covariance_;
  ::choreo::Twist* twist_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2ftwist_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TwistStamped

// .choreo.Header header = 1;
inline bool TwistStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void TwistStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& TwistStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.TwistStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* TwistStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistStamped.header)
  return header_;
}
inline ::choreo::Header* TwistStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.TwistStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TwistStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistStamped.header)
}

// .choreo.Twist twist = 2;
inline bool TwistStamped::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
inline void TwistStamped::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
}
inline const ::choreo::Twist& TwistStamped::twist() const {
  // @@protoc_insertion_point(field_get:choreo.TwistStamped.twist)
  return twist_ != NULL ? *twist_
                         : *::choreo::Twist::internal_default_instance();
}
inline ::choreo::Twist* TwistStamped::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::choreo::Twist;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistStamped.twist)
  return twist_;
}
inline ::choreo::Twist* TwistStamped::release_twist() {
  // @@protoc_insertion_point(field_release:choreo.TwistStamped.twist)
  
  ::choreo::Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
inline void TwistStamped::set_allocated_twist(::choreo::Twist* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistStamped.twist)
}

// -------------------------------------------------------------------

// TwistWithCovarianceStamped

// .choreo.Header header = 1;
inline bool TwistWithCovarianceStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void TwistWithCovarianceStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& TwistWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovarianceStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* TwistWithCovarianceStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovarianceStamped.header)
  return header_;
}
inline ::choreo::Header* TwistWithCovarianceStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.TwistWithCovarianceStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TwistWithCovarianceStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistWithCovarianceStamped.header)
}

// .choreo.TwistWithCovariance twist = 2;
inline bool TwistWithCovarianceStamped::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
inline void TwistWithCovarianceStamped::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
}
inline const ::choreo::TwistWithCovariance& TwistWithCovarianceStamped::twist() const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovarianceStamped.twist)
  return twist_ != NULL ? *twist_
                         : *::choreo::TwistWithCovariance::internal_default_instance();
}
inline ::choreo::TwistWithCovariance* TwistWithCovarianceStamped::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::choreo::TwistWithCovariance;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovarianceStamped.twist)
  return twist_;
}
inline ::choreo::TwistWithCovariance* TwistWithCovarianceStamped::release_twist() {
  // @@protoc_insertion_point(field_release:choreo.TwistWithCovarianceStamped.twist)
  
  ::choreo::TwistWithCovariance* temp = twist_;
  twist_ = NULL;
  return temp;
}
inline void TwistWithCovarianceStamped::set_allocated_twist(::choreo::TwistWithCovariance* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistWithCovarianceStamped.twist)
}

// -------------------------------------------------------------------

// Twist

// .choreo.Vector3 linear = 1;
inline bool Twist::has_linear() const {
  return this != internal_default_instance() && linear_ != NULL;
}
inline void Twist::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
inline const ::choreo::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:choreo.Twist.linear)
  return linear_ != NULL ? *linear_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Twist::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Twist.linear)
  return linear_;
}
inline ::choreo::Vector3* Twist::release_linear() {
  // @@protoc_insertion_point(field_release:choreo.Twist.linear)
  
  ::choreo::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
inline void Twist::set_allocated_linear(::choreo::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Twist.linear)
}

// .choreo.Vector3 angular = 2;
inline bool Twist::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
inline void Twist::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
inline const ::choreo::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:choreo.Twist.angular)
  return angular_ != NULL ? *angular_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Twist::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Twist.angular)
  return angular_;
}
inline ::choreo::Vector3* Twist::release_angular() {
  // @@protoc_insertion_point(field_release:choreo.Twist.angular)
  
  ::choreo::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
inline void Twist::set_allocated_angular(::choreo::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Twist.angular)
}

// -------------------------------------------------------------------

// TwistWithCovariance

// .choreo.Twist twist = 1;
inline bool TwistWithCovariance::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
inline void TwistWithCovariance::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
}
inline const ::choreo::Twist& TwistWithCovariance::twist() const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovariance.twist)
  return twist_ != NULL ? *twist_
                         : *::choreo::Twist::internal_default_instance();
}
inline ::choreo::Twist* TwistWithCovariance::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::choreo::Twist;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovariance.twist)
  return twist_;
}
inline ::choreo::Twist* TwistWithCovariance::release_twist() {
  // @@protoc_insertion_point(field_release:choreo.TwistWithCovariance.twist)
  
  ::choreo::Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
inline void TwistWithCovariance::set_allocated_twist(::choreo::Twist* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistWithCovariance.twist)
}

// repeated .choreo.Float64 covariance = 2;
inline int TwistWithCovariance::covariance_size() const {
  return covariance_.size();
}
inline void TwistWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline const ::choreo::Float64& TwistWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovariance.covariance)
  return covariance_.Get(index);
}
inline ::choreo::Float64* TwistWithCovariance::mutable_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovariance.covariance)
  return covariance_.Mutable(index);
}
inline ::choreo::Float64* TwistWithCovariance::add_covariance() {
  // @@protoc_insertion_point(field_add:choreo.TwistWithCovariance.covariance)
  return covariance_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
TwistWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.TwistWithCovariance.covariance)
  return &covariance_;
}
inline const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
TwistWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:choreo.TwistWithCovariance.covariance)
  return covariance_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2ftwist_2eproto__INCLUDED
