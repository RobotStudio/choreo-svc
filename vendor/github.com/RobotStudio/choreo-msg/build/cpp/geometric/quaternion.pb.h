// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/quaternion.proto

#ifndef PROTOBUF_geometric_2fquaternion_2eproto__INCLUDED
#define PROTOBUF_geometric_2fquaternion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive/header.pb.h"
#include "primitive/float.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class Float32;
class Float32DefaultTypeInternal;
extern Float32DefaultTypeInternal _Float32_default_instance_;
class Float32Array;
class Float32ArrayDefaultTypeInternal;
extern Float32ArrayDefaultTypeInternal _Float32Array_default_instance_;
class Float64;
class Float64DefaultTypeInternal;
extern Float64DefaultTypeInternal _Float64_default_instance_;
class Float64Array;
class Float64ArrayDefaultTypeInternal;
extern Float64ArrayDefaultTypeInternal _Float64Array_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class QuaternionStamped;
class QuaternionStampedDefaultTypeInternal;
extern QuaternionStampedDefaultTypeInternal _QuaternionStamped_default_instance_;
}  // namespace choreo

namespace choreo {

namespace protobuf_geometric_2fquaternion_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2fquaternion_2eproto

// ===================================================================

class QuaternionStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.QuaternionStamped) */ {
 public:
  QuaternionStamped();
  virtual ~QuaternionStamped();

  QuaternionStamped(const QuaternionStamped& from);

  inline QuaternionStamped& operator=(const QuaternionStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuaternionStamped& default_instance();

  static inline const QuaternionStamped* internal_default_instance() {
    return reinterpret_cast<const QuaternionStamped*>(
               &_QuaternionStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(QuaternionStamped* other);

  // implements Message ----------------------------------------------

  inline QuaternionStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  QuaternionStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const QuaternionStamped& from);
  void MergeFrom(const QuaternionStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(QuaternionStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Quaternion quaternion = 2;
  bool has_quaternion() const;
  void clear_quaternion();
  static const int kQuaternionFieldNumber = 2;
  const ::choreo::Quaternion& quaternion() const;
  ::choreo::Quaternion* mutable_quaternion();
  ::choreo::Quaternion* release_quaternion();
  void set_allocated_quaternion(::choreo::Quaternion* quaternion);

  // @@protoc_insertion_point(class_scope:choreo.QuaternionStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Quaternion* quaternion_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fquaternion_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Quaternion : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Quaternion) */ {
 public:
  Quaternion();
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Quaternion& default_instance();

  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Quaternion* other);

  // implements Message ----------------------------------------------

  inline Quaternion* New() const PROTOBUF_FINAL { return New(NULL); }

  Quaternion* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Quaternion* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Float64 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  const ::choreo::Float64& x() const;
  ::choreo::Float64* mutable_x();
  ::choreo::Float64* release_x();
  void set_allocated_x(::choreo::Float64* x);

  // .choreo.Float64 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  const ::choreo::Float64& y() const;
  ::choreo::Float64* mutable_y();
  ::choreo::Float64* release_y();
  void set_allocated_y(::choreo::Float64* y);

  // .choreo.Float64 z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  const ::choreo::Float64& z() const;
  ::choreo::Float64* mutable_z();
  ::choreo::Float64* release_z();
  void set_allocated_z(::choreo::Float64* z);

  // .choreo.Float64 w = 4;
  bool has_w() const;
  void clear_w();
  static const int kWFieldNumber = 4;
  const ::choreo::Float64& w() const;
  ::choreo::Float64* mutable_w();
  ::choreo::Float64* release_w();
  void set_allocated_w(::choreo::Float64* w);

  // @@protoc_insertion_point(class_scope:choreo.Quaternion)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Float64* x_;
  ::choreo::Float64* y_;
  ::choreo::Float64* z_;
  ::choreo::Float64* w_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fquaternion_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// QuaternionStamped

// .choreo.Header header = 1;
inline bool QuaternionStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void QuaternionStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& QuaternionStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.QuaternionStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* QuaternionStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.QuaternionStamped.header)
  return header_;
}
inline ::choreo::Header* QuaternionStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.QuaternionStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void QuaternionStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.QuaternionStamped.header)
}

// .choreo.Quaternion quaternion = 2;
inline bool QuaternionStamped::has_quaternion() const {
  return this != internal_default_instance() && quaternion_ != NULL;
}
inline void QuaternionStamped::clear_quaternion() {
  if (GetArenaNoVirtual() == NULL && quaternion_ != NULL) delete quaternion_;
  quaternion_ = NULL;
}
inline const ::choreo::Quaternion& QuaternionStamped::quaternion() const {
  // @@protoc_insertion_point(field_get:choreo.QuaternionStamped.quaternion)
  return quaternion_ != NULL ? *quaternion_
                         : *::choreo::Quaternion::internal_default_instance();
}
inline ::choreo::Quaternion* QuaternionStamped::mutable_quaternion() {
  
  if (quaternion_ == NULL) {
    quaternion_ = new ::choreo::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:choreo.QuaternionStamped.quaternion)
  return quaternion_;
}
inline ::choreo::Quaternion* QuaternionStamped::release_quaternion() {
  // @@protoc_insertion_point(field_release:choreo.QuaternionStamped.quaternion)
  
  ::choreo::Quaternion* temp = quaternion_;
  quaternion_ = NULL;
  return temp;
}
inline void QuaternionStamped::set_allocated_quaternion(::choreo::Quaternion* quaternion) {
  delete quaternion_;
  quaternion_ = quaternion;
  if (quaternion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.QuaternionStamped.quaternion)
}

// -------------------------------------------------------------------

// Quaternion

// .choreo.Float64 x = 1;
inline bool Quaternion::has_x() const {
  return this != internal_default_instance() && x_ != NULL;
}
inline void Quaternion::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) delete x_;
  x_ = NULL;
}
inline const ::choreo::Float64& Quaternion::x() const {
  // @@protoc_insertion_point(field_get:choreo.Quaternion.x)
  return x_ != NULL ? *x_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Quaternion::mutable_x() {
  
  if (x_ == NULL) {
    x_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Quaternion.x)
  return x_;
}
inline ::choreo::Float64* Quaternion::release_x() {
  // @@protoc_insertion_point(field_release:choreo.Quaternion.x)
  
  ::choreo::Float64* temp = x_;
  x_ = NULL;
  return temp;
}
inline void Quaternion::set_allocated_x(::choreo::Float64* x) {
  delete x_;
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Quaternion.x)
}

// .choreo.Float64 y = 2;
inline bool Quaternion::has_y() const {
  return this != internal_default_instance() && y_ != NULL;
}
inline void Quaternion::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) delete y_;
  y_ = NULL;
}
inline const ::choreo::Float64& Quaternion::y() const {
  // @@protoc_insertion_point(field_get:choreo.Quaternion.y)
  return y_ != NULL ? *y_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Quaternion::mutable_y() {
  
  if (y_ == NULL) {
    y_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Quaternion.y)
  return y_;
}
inline ::choreo::Float64* Quaternion::release_y() {
  // @@protoc_insertion_point(field_release:choreo.Quaternion.y)
  
  ::choreo::Float64* temp = y_;
  y_ = NULL;
  return temp;
}
inline void Quaternion::set_allocated_y(::choreo::Float64* y) {
  delete y_;
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Quaternion.y)
}

// .choreo.Float64 z = 3;
inline bool Quaternion::has_z() const {
  return this != internal_default_instance() && z_ != NULL;
}
inline void Quaternion::clear_z() {
  if (GetArenaNoVirtual() == NULL && z_ != NULL) delete z_;
  z_ = NULL;
}
inline const ::choreo::Float64& Quaternion::z() const {
  // @@protoc_insertion_point(field_get:choreo.Quaternion.z)
  return z_ != NULL ? *z_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Quaternion::mutable_z() {
  
  if (z_ == NULL) {
    z_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Quaternion.z)
  return z_;
}
inline ::choreo::Float64* Quaternion::release_z() {
  // @@protoc_insertion_point(field_release:choreo.Quaternion.z)
  
  ::choreo::Float64* temp = z_;
  z_ = NULL;
  return temp;
}
inline void Quaternion::set_allocated_z(::choreo::Float64* z) {
  delete z_;
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Quaternion.z)
}

// .choreo.Float64 w = 4;
inline bool Quaternion::has_w() const {
  return this != internal_default_instance() && w_ != NULL;
}
inline void Quaternion::clear_w() {
  if (GetArenaNoVirtual() == NULL && w_ != NULL) delete w_;
  w_ = NULL;
}
inline const ::choreo::Float64& Quaternion::w() const {
  // @@protoc_insertion_point(field_get:choreo.Quaternion.w)
  return w_ != NULL ? *w_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Quaternion::mutable_w() {
  
  if (w_ == NULL) {
    w_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Quaternion.w)
  return w_;
}
inline ::choreo::Float64* Quaternion::release_w() {
  // @@protoc_insertion_point(field_release:choreo.Quaternion.w)
  
  ::choreo::Float64* temp = w_;
  w_ = NULL;
  return temp;
}
inline void Quaternion::set_allocated_w(::choreo::Float64* w) {
  delete w_;
  w_ = w;
  if (w) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Quaternion.w)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2fquaternion_2eproto__INCLUDED
