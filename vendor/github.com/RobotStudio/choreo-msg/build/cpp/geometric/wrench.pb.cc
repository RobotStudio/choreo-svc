// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/wrench.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometric/wrench.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class WrenchStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<WrenchStamped> {
} _WrenchStamped_default_instance_;
class WrenchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Wrench> {
} _Wrench_default_instance_;

namespace protobuf_geometric_2fwrench_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrenchStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrenchStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WrenchStamped, wrench_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, force_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Wrench, torque_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(WrenchStamped)},
  { 7, -1, sizeof(Wrench)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WrenchStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Wrench_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "geometric/wrench.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _WrenchStamped_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Wrench_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fvector_2eproto::InitDefaults();
  _WrenchStamped_default_instance_.DefaultConstruct();
  _Wrench_default_instance_.DefaultConstruct();
  _WrenchStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _WrenchStamped_default_instance_.get_mutable()->wrench_ = const_cast< ::choreo::Wrench*>(
      ::choreo::Wrench::internal_default_instance());
  _Wrench_default_instance_.get_mutable()->force_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _Wrench_default_instance_.get_mutable()->torque_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\026geometric/wrench.proto\022\006choreo\032\026primit"
      "ive/header.proto\032\026geometric/vector.proto"
      "\"O\n\rWrenchStamped\022\036\n\006header\030\001 \001(\0132\016.chor"
      "eo.Header\022\036\n\006wrench\030\002 \001(\0132\016.choreo.Wrenc"
      "h\"I\n\006Wrench\022\036\n\005force\030\001 \001(\0132\017.choreo.Vect"
      "or3\022\037\n\006torque\030\002 \001(\0132\017.choreo.Vector3B+Z)"
      "github.com/RobotStudio/choreo-msg/msg;ms"
      "gb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 289);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometric/wrench.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fvector_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_geometric_2fwrench_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WrenchStamped::kHeaderFieldNumber;
const int WrenchStamped::kWrenchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WrenchStamped::WrenchStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fwrench_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.WrenchStamped)
}
WrenchStamped::WrenchStamped(const WrenchStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_wrench()) {
    wrench_ = new ::choreo::Wrench(*from.wrench_);
  } else {
    wrench_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.WrenchStamped)
}

void WrenchStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&wrench_) -
    reinterpret_cast<char*>(&header_) + sizeof(wrench_));
  _cached_size_ = 0;
}

WrenchStamped::~WrenchStamped() {
  // @@protoc_insertion_point(destructor:choreo.WrenchStamped)
  SharedDtor();
}

void WrenchStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete wrench_;
  }
}

void WrenchStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WrenchStamped::descriptor() {
  protobuf_geometric_2fwrench_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fwrench_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WrenchStamped& WrenchStamped::default_instance() {
  protobuf_geometric_2fwrench_2eproto::InitDefaults();
  return *internal_default_instance();
}

WrenchStamped* WrenchStamped::New(::google::protobuf::Arena* arena) const {
  WrenchStamped* n = new WrenchStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WrenchStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.WrenchStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && wrench_ != NULL) {
    delete wrench_;
  }
  wrench_ = NULL;
}

bool WrenchStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.WrenchStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Wrench wrench = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wrench()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.WrenchStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.WrenchStamped)
  return false;
#undef DO_
}

void WrenchStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.WrenchStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Wrench wrench = 2;
  if (this->has_wrench()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->wrench_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.WrenchStamped)
}

::google::protobuf::uint8* WrenchStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.WrenchStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Wrench wrench = 2;
  if (this->has_wrench()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->wrench_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.WrenchStamped)
  return target;
}

size_t WrenchStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.WrenchStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Wrench wrench = 2;
  if (this->has_wrench()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->wrench_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WrenchStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.WrenchStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const WrenchStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WrenchStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.WrenchStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.WrenchStamped)
    MergeFrom(*source);
  }
}

void WrenchStamped::MergeFrom(const WrenchStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.WrenchStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_wrench()) {
    mutable_wrench()->::choreo::Wrench::MergeFrom(from.wrench());
  }
}

void WrenchStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.WrenchStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrenchStamped::CopyFrom(const WrenchStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.WrenchStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrenchStamped::IsInitialized() const {
  return true;
}

void WrenchStamped::Swap(WrenchStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WrenchStamped::InternalSwap(WrenchStamped* other) {
  std::swap(header_, other->header_);
  std::swap(wrench_, other->wrench_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WrenchStamped::GetMetadata() const {
  protobuf_geometric_2fwrench_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fwrench_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WrenchStamped

// .choreo.Header header = 1;
bool WrenchStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void WrenchStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& WrenchStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.WrenchStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* WrenchStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.WrenchStamped.header)
  return header_;
}
::choreo::Header* WrenchStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.WrenchStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void WrenchStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.WrenchStamped.header)
}

// .choreo.Wrench wrench = 2;
bool WrenchStamped::has_wrench() const {
  return this != internal_default_instance() && wrench_ != NULL;
}
void WrenchStamped::clear_wrench() {
  if (GetArenaNoVirtual() == NULL && wrench_ != NULL) delete wrench_;
  wrench_ = NULL;
}
const ::choreo::Wrench& WrenchStamped::wrench() const {
  // @@protoc_insertion_point(field_get:choreo.WrenchStamped.wrench)
  return wrench_ != NULL ? *wrench_
                         : *::choreo::Wrench::internal_default_instance();
}
::choreo::Wrench* WrenchStamped::mutable_wrench() {
  
  if (wrench_ == NULL) {
    wrench_ = new ::choreo::Wrench;
  }
  // @@protoc_insertion_point(field_mutable:choreo.WrenchStamped.wrench)
  return wrench_;
}
::choreo::Wrench* WrenchStamped::release_wrench() {
  // @@protoc_insertion_point(field_release:choreo.WrenchStamped.wrench)
  
  ::choreo::Wrench* temp = wrench_;
  wrench_ = NULL;
  return temp;
}
void WrenchStamped::set_allocated_wrench(::choreo::Wrench* wrench) {
  delete wrench_;
  wrench_ = wrench;
  if (wrench) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.WrenchStamped.wrench)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Wrench::kForceFieldNumber;
const int Wrench::kTorqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Wrench::Wrench()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fwrench_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Wrench)
}
Wrench::Wrench(const Wrench& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_force()) {
    force_ = new ::choreo::Vector3(*from.force_);
  } else {
    force_ = NULL;
  }
  if (from.has_torque()) {
    torque_ = new ::choreo::Vector3(*from.torque_);
  } else {
    torque_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Wrench)
}

void Wrench::SharedCtor() {
  ::memset(&force_, 0, reinterpret_cast<char*>(&torque_) -
    reinterpret_cast<char*>(&force_) + sizeof(torque_));
  _cached_size_ = 0;
}

Wrench::~Wrench() {
  // @@protoc_insertion_point(destructor:choreo.Wrench)
  SharedDtor();
}

void Wrench::SharedDtor() {
  if (this != internal_default_instance()) {
    delete force_;
  }
  if (this != internal_default_instance()) {
    delete torque_;
  }
}

void Wrench::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Wrench::descriptor() {
  protobuf_geometric_2fwrench_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fwrench_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Wrench& Wrench::default_instance() {
  protobuf_geometric_2fwrench_2eproto::InitDefaults();
  return *internal_default_instance();
}

Wrench* Wrench::New(::google::protobuf::Arena* arena) const {
  Wrench* n = new Wrench;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Wrench::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Wrench)
  if (GetArenaNoVirtual() == NULL && force_ != NULL) {
    delete force_;
  }
  force_ = NULL;
  if (GetArenaNoVirtual() == NULL && torque_ != NULL) {
    delete torque_;
  }
  torque_ = NULL;
}

bool Wrench::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Wrench)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Vector3 force = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_force()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Vector3 torque = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_torque()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Wrench)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Wrench)
  return false;
#undef DO_
}

void Wrench::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Wrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Vector3 force = 1;
  if (this->has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->force_, output);
  }

  // .choreo.Vector3 torque = 2;
  if (this->has_torque()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->torque_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Wrench)
}

::google::protobuf::uint8* Wrench::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Wrench)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Vector3 force = 1;
  if (this->has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->force_, deterministic, target);
  }

  // .choreo.Vector3 torque = 2;
  if (this->has_torque()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->torque_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Wrench)
  return target;
}

size_t Wrench::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Wrench)
  size_t total_size = 0;

  // .choreo.Vector3 force = 1;
  if (this->has_force()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->force_);
  }

  // .choreo.Vector3 torque = 2;
  if (this->has_torque()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->torque_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Wrench::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  const Wrench* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Wrench>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Wrench)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Wrench)
    MergeFrom(*source);
  }
}

void Wrench::MergeFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Wrench)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_force()) {
    mutable_force()->::choreo::Vector3::MergeFrom(from.force());
  }
  if (from.has_torque()) {
    mutable_torque()->::choreo::Vector3::MergeFrom(from.torque());
  }
}

void Wrench::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Wrench::CopyFrom(const Wrench& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Wrench)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wrench::IsInitialized() const {
  return true;
}

void Wrench::Swap(Wrench* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Wrench::InternalSwap(Wrench* other) {
  std::swap(force_, other->force_);
  std::swap(torque_, other->torque_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Wrench::GetMetadata() const {
  protobuf_geometric_2fwrench_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fwrench_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Wrench

// .choreo.Vector3 force = 1;
bool Wrench::has_force() const {
  return this != internal_default_instance() && force_ != NULL;
}
void Wrench::clear_force() {
  if (GetArenaNoVirtual() == NULL && force_ != NULL) delete force_;
  force_ = NULL;
}
const ::choreo::Vector3& Wrench::force() const {
  // @@protoc_insertion_point(field_get:choreo.Wrench.force)
  return force_ != NULL ? *force_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* Wrench::mutable_force() {
  
  if (force_ == NULL) {
    force_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Wrench.force)
  return force_;
}
::choreo::Vector3* Wrench::release_force() {
  // @@protoc_insertion_point(field_release:choreo.Wrench.force)
  
  ::choreo::Vector3* temp = force_;
  force_ = NULL;
  return temp;
}
void Wrench::set_allocated_force(::choreo::Vector3* force) {
  delete force_;
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Wrench.force)
}

// .choreo.Vector3 torque = 2;
bool Wrench::has_torque() const {
  return this != internal_default_instance() && torque_ != NULL;
}
void Wrench::clear_torque() {
  if (GetArenaNoVirtual() == NULL && torque_ != NULL) delete torque_;
  torque_ = NULL;
}
const ::choreo::Vector3& Wrench::torque() const {
  // @@protoc_insertion_point(field_get:choreo.Wrench.torque)
  return torque_ != NULL ? *torque_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* Wrench::mutable_torque() {
  
  if (torque_ == NULL) {
    torque_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Wrench.torque)
  return torque_;
}
::choreo::Vector3* Wrench::release_torque() {
  // @@protoc_insertion_point(field_release:choreo.Wrench.torque)
  
  ::choreo::Vector3* temp = torque_;
  torque_ = NULL;
  return temp;
}
void Wrench::set_allocated_torque(::choreo::Vector3* torque) {
  delete torque_;
  torque_ = torque;
  if (torque) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Wrench.torque)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
