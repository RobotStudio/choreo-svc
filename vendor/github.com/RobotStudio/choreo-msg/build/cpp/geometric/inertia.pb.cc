// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/inertia.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometric/inertia.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class InertiaStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<InertiaStamped> {
} _InertiaStamped_default_instance_;
class InertiaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Inertia> {
} _Inertia_default_instance_;

namespace protobuf_geometric_2finertia_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertiaStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertiaStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InertiaStamped, inertia_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, m_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, com_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, ixx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, ixy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, ixz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, iyy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, iyz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inertia, izz_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(InertiaStamped)},
  { 7, -1, sizeof(Inertia)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_InertiaStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Inertia_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "geometric/inertia.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _InertiaStamped_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Inertia_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fvector_2eproto::InitDefaults();
  _InertiaStamped_default_instance_.DefaultConstruct();
  _Inertia_default_instance_.DefaultConstruct();
  _InertiaStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _InertiaStamped_default_instance_.get_mutable()->inertia_ = const_cast< ::choreo::Inertia*>(
      ::choreo::Inertia::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->m_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->com_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->ixx_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->ixy_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->ixz_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->iyy_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->iyz_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Inertia_default_instance_.get_mutable()->izz_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027geometric/inertia.proto\022\006choreo\032\026primi"
      "tive/header.proto\032\025primitive/float.proto"
      "\032\026geometric/vector.proto\"R\n\016InertiaStamp"
      "ed\022\036\n\006header\030\001 \001(\0132\016.choreo.Header\022 \n\007in"
      "ertia\030\002 \001(\0132\017.choreo.Inertia\"\367\001\n\007Inertia"
      "\022\032\n\001m\030\001 \001(\0132\017.choreo.Float64\022\034\n\003com\030\002 \001("
      "\0132\017.choreo.Vector3\022\034\n\003ixx\030\003 \001(\0132\017.choreo"
      ".Float64\022\034\n\003ixy\030\004 \001(\0132\017.choreo.Float64\022\034"
      "\n\003ixz\030\005 \001(\0132\017.choreo.Float64\022\034\n\003iyy\030\007 \001("
      "\0132\017.choreo.Float64\022\034\n\003iyz\030\010 \001(\0132\017.choreo"
      ".Float64\022\034\n\003izz\030\006 \001(\0132\017.choreo.Float64B+"
      "Z)github.com/RobotStudio/choreo-msg/msg;"
      "msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 491);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometric/inertia.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fvector_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_geometric_2finertia_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InertiaStamped::kHeaderFieldNumber;
const int InertiaStamped::kInertiaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InertiaStamped::InertiaStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2finertia_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.InertiaStamped)
}
InertiaStamped::InertiaStamped(const InertiaStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_inertia()) {
    inertia_ = new ::choreo::Inertia(*from.inertia_);
  } else {
    inertia_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.InertiaStamped)
}

void InertiaStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&inertia_) -
    reinterpret_cast<char*>(&header_) + sizeof(inertia_));
  _cached_size_ = 0;
}

InertiaStamped::~InertiaStamped() {
  // @@protoc_insertion_point(destructor:choreo.InertiaStamped)
  SharedDtor();
}

void InertiaStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete inertia_;
  }
}

void InertiaStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InertiaStamped::descriptor() {
  protobuf_geometric_2finertia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2finertia_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InertiaStamped& InertiaStamped::default_instance() {
  protobuf_geometric_2finertia_2eproto::InitDefaults();
  return *internal_default_instance();
}

InertiaStamped* InertiaStamped::New(::google::protobuf::Arena* arena) const {
  InertiaStamped* n = new InertiaStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InertiaStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.InertiaStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && inertia_ != NULL) {
    delete inertia_;
  }
  inertia_ = NULL;
}

bool InertiaStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.InertiaStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Inertia inertia = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_inertia()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.InertiaStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.InertiaStamped)
  return false;
#undef DO_
}

void InertiaStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.InertiaStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Inertia inertia = 2;
  if (this->has_inertia()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->inertia_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.InertiaStamped)
}

::google::protobuf::uint8* InertiaStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.InertiaStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Inertia inertia = 2;
  if (this->has_inertia()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->inertia_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.InertiaStamped)
  return target;
}

size_t InertiaStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.InertiaStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Inertia inertia = 2;
  if (this->has_inertia()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->inertia_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InertiaStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.InertiaStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const InertiaStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InertiaStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.InertiaStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.InertiaStamped)
    MergeFrom(*source);
  }
}

void InertiaStamped::MergeFrom(const InertiaStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.InertiaStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_inertia()) {
    mutable_inertia()->::choreo::Inertia::MergeFrom(from.inertia());
  }
}

void InertiaStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.InertiaStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InertiaStamped::CopyFrom(const InertiaStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.InertiaStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InertiaStamped::IsInitialized() const {
  return true;
}

void InertiaStamped::Swap(InertiaStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InertiaStamped::InternalSwap(InertiaStamped* other) {
  std::swap(header_, other->header_);
  std::swap(inertia_, other->inertia_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InertiaStamped::GetMetadata() const {
  protobuf_geometric_2finertia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2finertia_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InertiaStamped

// .choreo.Header header = 1;
bool InertiaStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void InertiaStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& InertiaStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.InertiaStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* InertiaStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.InertiaStamped.header)
  return header_;
}
::choreo::Header* InertiaStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.InertiaStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void InertiaStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.InertiaStamped.header)
}

// .choreo.Inertia inertia = 2;
bool InertiaStamped::has_inertia() const {
  return this != internal_default_instance() && inertia_ != NULL;
}
void InertiaStamped::clear_inertia() {
  if (GetArenaNoVirtual() == NULL && inertia_ != NULL) delete inertia_;
  inertia_ = NULL;
}
const ::choreo::Inertia& InertiaStamped::inertia() const {
  // @@protoc_insertion_point(field_get:choreo.InertiaStamped.inertia)
  return inertia_ != NULL ? *inertia_
                         : *::choreo::Inertia::internal_default_instance();
}
::choreo::Inertia* InertiaStamped::mutable_inertia() {
  
  if (inertia_ == NULL) {
    inertia_ = new ::choreo::Inertia;
  }
  // @@protoc_insertion_point(field_mutable:choreo.InertiaStamped.inertia)
  return inertia_;
}
::choreo::Inertia* InertiaStamped::release_inertia() {
  // @@protoc_insertion_point(field_release:choreo.InertiaStamped.inertia)
  
  ::choreo::Inertia* temp = inertia_;
  inertia_ = NULL;
  return temp;
}
void InertiaStamped::set_allocated_inertia(::choreo::Inertia* inertia) {
  delete inertia_;
  inertia_ = inertia;
  if (inertia) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.InertiaStamped.inertia)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Inertia::kMFieldNumber;
const int Inertia::kComFieldNumber;
const int Inertia::kIxxFieldNumber;
const int Inertia::kIxyFieldNumber;
const int Inertia::kIxzFieldNumber;
const int Inertia::kIyyFieldNumber;
const int Inertia::kIyzFieldNumber;
const int Inertia::kIzzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Inertia::Inertia()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2finertia_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Inertia)
}
Inertia::Inertia(const Inertia& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_m()) {
    m_ = new ::choreo::Float64(*from.m_);
  } else {
    m_ = NULL;
  }
  if (from.has_com()) {
    com_ = new ::choreo::Vector3(*from.com_);
  } else {
    com_ = NULL;
  }
  if (from.has_ixx()) {
    ixx_ = new ::choreo::Float64(*from.ixx_);
  } else {
    ixx_ = NULL;
  }
  if (from.has_ixy()) {
    ixy_ = new ::choreo::Float64(*from.ixy_);
  } else {
    ixy_ = NULL;
  }
  if (from.has_ixz()) {
    ixz_ = new ::choreo::Float64(*from.ixz_);
  } else {
    ixz_ = NULL;
  }
  if (from.has_izz()) {
    izz_ = new ::choreo::Float64(*from.izz_);
  } else {
    izz_ = NULL;
  }
  if (from.has_iyy()) {
    iyy_ = new ::choreo::Float64(*from.iyy_);
  } else {
    iyy_ = NULL;
  }
  if (from.has_iyz()) {
    iyz_ = new ::choreo::Float64(*from.iyz_);
  } else {
    iyz_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Inertia)
}

void Inertia::SharedCtor() {
  ::memset(&m_, 0, reinterpret_cast<char*>(&iyz_) -
    reinterpret_cast<char*>(&m_) + sizeof(iyz_));
  _cached_size_ = 0;
}

Inertia::~Inertia() {
  // @@protoc_insertion_point(destructor:choreo.Inertia)
  SharedDtor();
}

void Inertia::SharedDtor() {
  if (this != internal_default_instance()) {
    delete m_;
  }
  if (this != internal_default_instance()) {
    delete com_;
  }
  if (this != internal_default_instance()) {
    delete ixx_;
  }
  if (this != internal_default_instance()) {
    delete ixy_;
  }
  if (this != internal_default_instance()) {
    delete ixz_;
  }
  if (this != internal_default_instance()) {
    delete izz_;
  }
  if (this != internal_default_instance()) {
    delete iyy_;
  }
  if (this != internal_default_instance()) {
    delete iyz_;
  }
}

void Inertia::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inertia::descriptor() {
  protobuf_geometric_2finertia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2finertia_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Inertia& Inertia::default_instance() {
  protobuf_geometric_2finertia_2eproto::InitDefaults();
  return *internal_default_instance();
}

Inertia* Inertia::New(::google::protobuf::Arena* arena) const {
  Inertia* n = new Inertia;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Inertia::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Inertia)
  if (GetArenaNoVirtual() == NULL && m_ != NULL) {
    delete m_;
  }
  m_ = NULL;
  if (GetArenaNoVirtual() == NULL && com_ != NULL) {
    delete com_;
  }
  com_ = NULL;
  if (GetArenaNoVirtual() == NULL && ixx_ != NULL) {
    delete ixx_;
  }
  ixx_ = NULL;
  if (GetArenaNoVirtual() == NULL && ixy_ != NULL) {
    delete ixy_;
  }
  ixy_ = NULL;
  if (GetArenaNoVirtual() == NULL && ixz_ != NULL) {
    delete ixz_;
  }
  ixz_ = NULL;
  if (GetArenaNoVirtual() == NULL && izz_ != NULL) {
    delete izz_;
  }
  izz_ = NULL;
  if (GetArenaNoVirtual() == NULL && iyy_ != NULL) {
    delete iyy_;
  }
  iyy_ = NULL;
  if (GetArenaNoVirtual() == NULL && iyz_ != NULL) {
    delete iyz_;
  }
  iyz_ = NULL;
}

bool Inertia::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Inertia)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Float64 m = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Vector3 com = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_com()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 ixx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ixx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 ixy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ixy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 ixz = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ixz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 izz = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_izz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 iyy = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iyy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 iyz = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iyz()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Inertia)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Inertia)
  return false;
#undef DO_
}

void Inertia::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Inertia)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Float64 m = 1;
  if (this->has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->m_, output);
  }

  // .choreo.Vector3 com = 2;
  if (this->has_com()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->com_, output);
  }

  // .choreo.Float64 ixx = 3;
  if (this->has_ixx()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->ixx_, output);
  }

  // .choreo.Float64 ixy = 4;
  if (this->has_ixy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->ixy_, output);
  }

  // .choreo.Float64 ixz = 5;
  if (this->has_ixz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ixz_, output);
  }

  // .choreo.Float64 izz = 6;
  if (this->has_izz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->izz_, output);
  }

  // .choreo.Float64 iyy = 7;
  if (this->has_iyy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->iyy_, output);
  }

  // .choreo.Float64 iyz = 8;
  if (this->has_iyz()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->iyz_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Inertia)
}

::google::protobuf::uint8* Inertia::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Inertia)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Float64 m = 1;
  if (this->has_m()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->m_, deterministic, target);
  }

  // .choreo.Vector3 com = 2;
  if (this->has_com()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->com_, deterministic, target);
  }

  // .choreo.Float64 ixx = 3;
  if (this->has_ixx()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->ixx_, deterministic, target);
  }

  // .choreo.Float64 ixy = 4;
  if (this->has_ixy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->ixy_, deterministic, target);
  }

  // .choreo.Float64 ixz = 5;
  if (this->has_ixz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ixz_, deterministic, target);
  }

  // .choreo.Float64 izz = 6;
  if (this->has_izz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->izz_, deterministic, target);
  }

  // .choreo.Float64 iyy = 7;
  if (this->has_iyy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->iyy_, deterministic, target);
  }

  // .choreo.Float64 iyz = 8;
  if (this->has_iyz()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->iyz_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Inertia)
  return target;
}

size_t Inertia::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Inertia)
  size_t total_size = 0;

  // .choreo.Float64 m = 1;
  if (this->has_m()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->m_);
  }

  // .choreo.Vector3 com = 2;
  if (this->has_com()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->com_);
  }

  // .choreo.Float64 ixx = 3;
  if (this->has_ixx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ixx_);
  }

  // .choreo.Float64 ixy = 4;
  if (this->has_ixy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ixy_);
  }

  // .choreo.Float64 ixz = 5;
  if (this->has_ixz()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ixz_);
  }

  // .choreo.Float64 izz = 6;
  if (this->has_izz()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->izz_);
  }

  // .choreo.Float64 iyy = 7;
  if (this->has_iyy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->iyy_);
  }

  // .choreo.Float64 iyz = 8;
  if (this->has_iyz()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->iyz_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inertia::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Inertia)
  GOOGLE_DCHECK_NE(&from, this);
  const Inertia* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Inertia>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Inertia)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Inertia)
    MergeFrom(*source);
  }
}

void Inertia::MergeFrom(const Inertia& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Inertia)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_m()) {
    mutable_m()->::choreo::Float64::MergeFrom(from.m());
  }
  if (from.has_com()) {
    mutable_com()->::choreo::Vector3::MergeFrom(from.com());
  }
  if (from.has_ixx()) {
    mutable_ixx()->::choreo::Float64::MergeFrom(from.ixx());
  }
  if (from.has_ixy()) {
    mutable_ixy()->::choreo::Float64::MergeFrom(from.ixy());
  }
  if (from.has_ixz()) {
    mutable_ixz()->::choreo::Float64::MergeFrom(from.ixz());
  }
  if (from.has_izz()) {
    mutable_izz()->::choreo::Float64::MergeFrom(from.izz());
  }
  if (from.has_iyy()) {
    mutable_iyy()->::choreo::Float64::MergeFrom(from.iyy());
  }
  if (from.has_iyz()) {
    mutable_iyz()->::choreo::Float64::MergeFrom(from.iyz());
  }
}

void Inertia::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Inertia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inertia::CopyFrom(const Inertia& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Inertia)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inertia::IsInitialized() const {
  return true;
}

void Inertia::Swap(Inertia* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Inertia::InternalSwap(Inertia* other) {
  std::swap(m_, other->m_);
  std::swap(com_, other->com_);
  std::swap(ixx_, other->ixx_);
  std::swap(ixy_, other->ixy_);
  std::swap(ixz_, other->ixz_);
  std::swap(izz_, other->izz_);
  std::swap(iyy_, other->iyy_);
  std::swap(iyz_, other->iyz_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Inertia::GetMetadata() const {
  protobuf_geometric_2finertia_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2finertia_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Inertia

// .choreo.Float64 m = 1;
bool Inertia::has_m() const {
  return this != internal_default_instance() && m_ != NULL;
}
void Inertia::clear_m() {
  if (GetArenaNoVirtual() == NULL && m_ != NULL) delete m_;
  m_ = NULL;
}
const ::choreo::Float64& Inertia::m() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.m)
  return m_ != NULL ? *m_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Inertia::mutable_m() {
  
  if (m_ == NULL) {
    m_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.m)
  return m_;
}
::choreo::Float64* Inertia::release_m() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.m)
  
  ::choreo::Float64* temp = m_;
  m_ = NULL;
  return temp;
}
void Inertia::set_allocated_m(::choreo::Float64* m) {
  delete m_;
  m_ = m;
  if (m) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.m)
}

// .choreo.Vector3 com = 2;
bool Inertia::has_com() const {
  return this != internal_default_instance() && com_ != NULL;
}
void Inertia::clear_com() {
  if (GetArenaNoVirtual() == NULL && com_ != NULL) delete com_;
  com_ = NULL;
}
const ::choreo::Vector3& Inertia::com() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.com)
  return com_ != NULL ? *com_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* Inertia::mutable_com() {
  
  if (com_ == NULL) {
    com_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.com)
  return com_;
}
::choreo::Vector3* Inertia::release_com() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.com)
  
  ::choreo::Vector3* temp = com_;
  com_ = NULL;
  return temp;
}
void Inertia::set_allocated_com(::choreo::Vector3* com) {
  delete com_;
  com_ = com;
  if (com) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.com)
}

// .choreo.Float64 ixx = 3;
bool Inertia::has_ixx() const {
  return this != internal_default_instance() && ixx_ != NULL;
}
void Inertia::clear_ixx() {
  if (GetArenaNoVirtual() == NULL && ixx_ != NULL) delete ixx_;
  ixx_ = NULL;
}
const ::choreo::Float64& Inertia::ixx() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.ixx)
  return ixx_ != NULL ? *ixx_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Inertia::mutable_ixx() {
  
  if (ixx_ == NULL) {
    ixx_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.ixx)
  return ixx_;
}
::choreo::Float64* Inertia::release_ixx() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.ixx)
  
  ::choreo::Float64* temp = ixx_;
  ixx_ = NULL;
  return temp;
}
void Inertia::set_allocated_ixx(::choreo::Float64* ixx) {
  delete ixx_;
  ixx_ = ixx;
  if (ixx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.ixx)
}

// .choreo.Float64 ixy = 4;
bool Inertia::has_ixy() const {
  return this != internal_default_instance() && ixy_ != NULL;
}
void Inertia::clear_ixy() {
  if (GetArenaNoVirtual() == NULL && ixy_ != NULL) delete ixy_;
  ixy_ = NULL;
}
const ::choreo::Float64& Inertia::ixy() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.ixy)
  return ixy_ != NULL ? *ixy_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Inertia::mutable_ixy() {
  
  if (ixy_ == NULL) {
    ixy_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.ixy)
  return ixy_;
}
::choreo::Float64* Inertia::release_ixy() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.ixy)
  
  ::choreo::Float64* temp = ixy_;
  ixy_ = NULL;
  return temp;
}
void Inertia::set_allocated_ixy(::choreo::Float64* ixy) {
  delete ixy_;
  ixy_ = ixy;
  if (ixy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.ixy)
}

// .choreo.Float64 ixz = 5;
bool Inertia::has_ixz() const {
  return this != internal_default_instance() && ixz_ != NULL;
}
void Inertia::clear_ixz() {
  if (GetArenaNoVirtual() == NULL && ixz_ != NULL) delete ixz_;
  ixz_ = NULL;
}
const ::choreo::Float64& Inertia::ixz() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.ixz)
  return ixz_ != NULL ? *ixz_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Inertia::mutable_ixz() {
  
  if (ixz_ == NULL) {
    ixz_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.ixz)
  return ixz_;
}
::choreo::Float64* Inertia::release_ixz() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.ixz)
  
  ::choreo::Float64* temp = ixz_;
  ixz_ = NULL;
  return temp;
}
void Inertia::set_allocated_ixz(::choreo::Float64* ixz) {
  delete ixz_;
  ixz_ = ixz;
  if (ixz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.ixz)
}

// .choreo.Float64 iyy = 7;
bool Inertia::has_iyy() const {
  return this != internal_default_instance() && iyy_ != NULL;
}
void Inertia::clear_iyy() {
  if (GetArenaNoVirtual() == NULL && iyy_ != NULL) delete iyy_;
  iyy_ = NULL;
}
const ::choreo::Float64& Inertia::iyy() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.iyy)
  return iyy_ != NULL ? *iyy_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Inertia::mutable_iyy() {
  
  if (iyy_ == NULL) {
    iyy_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.iyy)
  return iyy_;
}
::choreo::Float64* Inertia::release_iyy() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.iyy)
  
  ::choreo::Float64* temp = iyy_;
  iyy_ = NULL;
  return temp;
}
void Inertia::set_allocated_iyy(::choreo::Float64* iyy) {
  delete iyy_;
  iyy_ = iyy;
  if (iyy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.iyy)
}

// .choreo.Float64 iyz = 8;
bool Inertia::has_iyz() const {
  return this != internal_default_instance() && iyz_ != NULL;
}
void Inertia::clear_iyz() {
  if (GetArenaNoVirtual() == NULL && iyz_ != NULL) delete iyz_;
  iyz_ = NULL;
}
const ::choreo::Float64& Inertia::iyz() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.iyz)
  return iyz_ != NULL ? *iyz_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Inertia::mutable_iyz() {
  
  if (iyz_ == NULL) {
    iyz_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.iyz)
  return iyz_;
}
::choreo::Float64* Inertia::release_iyz() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.iyz)
  
  ::choreo::Float64* temp = iyz_;
  iyz_ = NULL;
  return temp;
}
void Inertia::set_allocated_iyz(::choreo::Float64* iyz) {
  delete iyz_;
  iyz_ = iyz;
  if (iyz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.iyz)
}

// .choreo.Float64 izz = 6;
bool Inertia::has_izz() const {
  return this != internal_default_instance() && izz_ != NULL;
}
void Inertia::clear_izz() {
  if (GetArenaNoVirtual() == NULL && izz_ != NULL) delete izz_;
  izz_ = NULL;
}
const ::choreo::Float64& Inertia::izz() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.izz)
  return izz_ != NULL ? *izz_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Inertia::mutable_izz() {
  
  if (izz_ == NULL) {
    izz_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.izz)
  return izz_;
}
::choreo::Float64* Inertia::release_izz() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.izz)
  
  ::choreo::Float64* temp = izz_;
  izz_ = NULL;
  return temp;
}
void Inertia::set_allocated_izz(::choreo::Float64* izz) {
  delete izz_;
  izz_ = izz;
  if (izz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.izz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
