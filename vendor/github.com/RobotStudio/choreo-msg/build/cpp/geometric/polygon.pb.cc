// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/polygon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometric/polygon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class PolygonStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PolygonStamped> {
} _PolygonStamped_default_instance_;
class Polygon32StampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Polygon32Stamped> {
} _Polygon32Stamped_default_instance_;
class PolygonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Polygon> {
} _Polygon_default_instance_;
class Polygon32DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Polygon32> {
} _Polygon32_default_instance_;

namespace protobuf_geometric_2fpolygon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PolygonStamped, polygon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon32Stamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon32Stamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon32Stamped, polygon_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polygon32, points_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PolygonStamped)},
  { 7, -1, sizeof(Polygon32Stamped)},
  { 14, -1, sizeof(Polygon)},
  { 20, -1, sizeof(Polygon32)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PolygonStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Polygon32Stamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Polygon32_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "geometric/polygon.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _PolygonStamped_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Polygon32Stamped_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Polygon_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Polygon32_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fpoint_2eproto::InitDefaults();
  _PolygonStamped_default_instance_.DefaultConstruct();
  _Polygon32Stamped_default_instance_.DefaultConstruct();
  _Polygon_default_instance_.DefaultConstruct();
  _Polygon32_default_instance_.DefaultConstruct();
  _PolygonStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _PolygonStamped_default_instance_.get_mutable()->polygon_ = const_cast< ::choreo::Polygon*>(
      ::choreo::Polygon::internal_default_instance());
  _Polygon32Stamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _Polygon32Stamped_default_instance_.get_mutable()->polygon_ = const_cast< ::choreo::Polygon32*>(
      ::choreo::Polygon32::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\027geometric/polygon.proto\022\006choreo\032\026primi"
      "tive/header.proto\032\025geometric/point.proto"
      "\"R\n\016PolygonStamped\022\036\n\006header\030\001 \001(\0132\016.cho"
      "reo.Header\022 \n\007polygon\030\002 \001(\0132\017.choreo.Pol"
      "ygon\"V\n\020Polygon32Stamped\022\036\n\006header\030\001 \001(\013"
      "2\016.choreo.Header\022\"\n\007polygon\030\002 \001(\0132\021.chor"
      "eo.Polygon32\"(\n\007Polygon\022\035\n\006points\030\001 \003(\0132"
      "\r.choreo.Point\",\n\tPolygon32\022\037\n\006points\030\001 "
      "\003(\0132\017.choreo.Point32B+Z)github.com/Robot"
      "Studio/choreo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometric/polygon.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fpoint_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_geometric_2fpolygon_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PolygonStamped::kHeaderFieldNumber;
const int PolygonStamped::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PolygonStamped::PolygonStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.PolygonStamped)
}
PolygonStamped::PolygonStamped(const PolygonStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::choreo::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.PolygonStamped)
}

void PolygonStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&polygon_) -
    reinterpret_cast<char*>(&header_) + sizeof(polygon_));
  _cached_size_ = 0;
}

PolygonStamped::~PolygonStamped() {
  // @@protoc_insertion_point(destructor:choreo.PolygonStamped)
  SharedDtor();
}

void PolygonStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void PolygonStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PolygonStamped::descriptor() {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PolygonStamped& PolygonStamped::default_instance() {
  protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PolygonStamped* PolygonStamped::New(::google::protobuf::Arena* arena) const {
  PolygonStamped* n = new PolygonStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PolygonStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.PolygonStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) {
    delete polygon_;
  }
  polygon_ = NULL;
}

bool PolygonStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.PolygonStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Polygon polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.PolygonStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.PolygonStamped)
  return false;
#undef DO_
}

void PolygonStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.PolygonStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Polygon polygon = 2;
  if (this->has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.PolygonStamped)
}

::google::protobuf::uint8* PolygonStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.PolygonStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Polygon polygon = 2;
  if (this->has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.PolygonStamped)
  return target;
}

size_t PolygonStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.PolygonStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Polygon polygon = 2;
  if (this->has_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PolygonStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.PolygonStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const PolygonStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PolygonStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.PolygonStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.PolygonStamped)
    MergeFrom(*source);
  }
}

void PolygonStamped::MergeFrom(const PolygonStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.PolygonStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_polygon()) {
    mutable_polygon()->::choreo::Polygon::MergeFrom(from.polygon());
  }
}

void PolygonStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.PolygonStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolygonStamped::CopyFrom(const PolygonStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.PolygonStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolygonStamped::IsInitialized() const {
  return true;
}

void PolygonStamped::Swap(PolygonStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PolygonStamped::InternalSwap(PolygonStamped* other) {
  std::swap(header_, other->header_);
  std::swap(polygon_, other->polygon_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PolygonStamped::GetMetadata() const {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PolygonStamped

// .choreo.Header header = 1;
bool PolygonStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PolygonStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& PolygonStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.PolygonStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* PolygonStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PolygonStamped.header)
  return header_;
}
::choreo::Header* PolygonStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.PolygonStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PolygonStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PolygonStamped.header)
}

// .choreo.Polygon polygon = 2;
bool PolygonStamped::has_polygon() const {
  return this != internal_default_instance() && polygon_ != NULL;
}
void PolygonStamped::clear_polygon() {
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) delete polygon_;
  polygon_ = NULL;
}
const ::choreo::Polygon& PolygonStamped::polygon() const {
  // @@protoc_insertion_point(field_get:choreo.PolygonStamped.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::choreo::Polygon::internal_default_instance();
}
::choreo::Polygon* PolygonStamped::mutable_polygon() {
  
  if (polygon_ == NULL) {
    polygon_ = new ::choreo::Polygon;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PolygonStamped.polygon)
  return polygon_;
}
::choreo::Polygon* PolygonStamped::release_polygon() {
  // @@protoc_insertion_point(field_release:choreo.PolygonStamped.polygon)
  
  ::choreo::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void PolygonStamped::set_allocated_polygon(::choreo::Polygon* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PolygonStamped.polygon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon32Stamped::kHeaderFieldNumber;
const int Polygon32Stamped::kPolygonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon32Stamped::Polygon32Stamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Polygon32Stamped)
}
Polygon32Stamped::Polygon32Stamped(const Polygon32Stamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::choreo::Polygon32(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Polygon32Stamped)
}

void Polygon32Stamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&polygon_) -
    reinterpret_cast<char*>(&header_) + sizeof(polygon_));
  _cached_size_ = 0;
}

Polygon32Stamped::~Polygon32Stamped() {
  // @@protoc_insertion_point(destructor:choreo.Polygon32Stamped)
  SharedDtor();
}

void Polygon32Stamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete polygon_;
  }
}

void Polygon32Stamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon32Stamped::descriptor() {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon32Stamped& Polygon32Stamped::default_instance() {
  protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Polygon32Stamped* Polygon32Stamped::New(::google::protobuf::Arena* arena) const {
  Polygon32Stamped* n = new Polygon32Stamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon32Stamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Polygon32Stamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) {
    delete polygon_;
  }
  polygon_ = NULL;
}

bool Polygon32Stamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Polygon32Stamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Polygon32 polygon = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Polygon32Stamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Polygon32Stamped)
  return false;
#undef DO_
}

void Polygon32Stamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Polygon32Stamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Polygon32 polygon = 2;
  if (this->has_polygon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->polygon_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Polygon32Stamped)
}

::google::protobuf::uint8* Polygon32Stamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Polygon32Stamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Polygon32 polygon = 2;
  if (this->has_polygon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->polygon_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Polygon32Stamped)
  return target;
}

size_t Polygon32Stamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Polygon32Stamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Polygon32 polygon = 2;
  if (this->has_polygon()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->polygon_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon32Stamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Polygon32Stamped)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon32Stamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon32Stamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Polygon32Stamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Polygon32Stamped)
    MergeFrom(*source);
  }
}

void Polygon32Stamped::MergeFrom(const Polygon32Stamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Polygon32Stamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_polygon()) {
    mutable_polygon()->::choreo::Polygon32::MergeFrom(from.polygon());
  }
}

void Polygon32Stamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Polygon32Stamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon32Stamped::CopyFrom(const Polygon32Stamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Polygon32Stamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon32Stamped::IsInitialized() const {
  return true;
}

void Polygon32Stamped::Swap(Polygon32Stamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon32Stamped::InternalSwap(Polygon32Stamped* other) {
  std::swap(header_, other->header_);
  std::swap(polygon_, other->polygon_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon32Stamped::GetMetadata() const {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon32Stamped

// .choreo.Header header = 1;
bool Polygon32Stamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Polygon32Stamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& Polygon32Stamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.Polygon32Stamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* Polygon32Stamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Polygon32Stamped.header)
  return header_;
}
::choreo::Header* Polygon32Stamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.Polygon32Stamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Polygon32Stamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Polygon32Stamped.header)
}

// .choreo.Polygon32 polygon = 2;
bool Polygon32Stamped::has_polygon() const {
  return this != internal_default_instance() && polygon_ != NULL;
}
void Polygon32Stamped::clear_polygon() {
  if (GetArenaNoVirtual() == NULL && polygon_ != NULL) delete polygon_;
  polygon_ = NULL;
}
const ::choreo::Polygon32& Polygon32Stamped::polygon() const {
  // @@protoc_insertion_point(field_get:choreo.Polygon32Stamped.polygon)
  return polygon_ != NULL ? *polygon_
                         : *::choreo::Polygon32::internal_default_instance();
}
::choreo::Polygon32* Polygon32Stamped::mutable_polygon() {
  
  if (polygon_ == NULL) {
    polygon_ = new ::choreo::Polygon32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Polygon32Stamped.polygon)
  return polygon_;
}
::choreo::Polygon32* Polygon32Stamped::release_polygon() {
  // @@protoc_insertion_point(field_release:choreo.Polygon32Stamped.polygon)
  
  ::choreo::Polygon32* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
void Polygon32Stamped::set_allocated_polygon(::choreo::Polygon32* polygon) {
  delete polygon_;
  polygon_ = polygon;
  if (polygon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Polygon32Stamped.polygon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.Polygon)
}

void Polygon::SharedCtor() {
  _cached_size_ = 0;
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:choreo.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Polygon* Polygon::New(::google::protobuf::Arena* arena) const {
  Polygon* n = new Polygon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Polygon)
  points_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Polygon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.Point points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Point points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Point points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Polygon)
  size_t total_size = 0;

  // repeated .choreo.Point points = 1;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  points_.InternalSwap(&other->points_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon

// repeated .choreo.Point points = 1;
int Polygon::points_size() const {
  return points_.size();
}
void Polygon::clear_points() {
  points_.Clear();
}
const ::choreo::Point& Polygon::points(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Polygon.points)
  return points_.Get(index);
}
::choreo::Point* Polygon::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Polygon.points)
  return points_.Mutable(index);
}
::choreo::Point* Polygon::add_points() {
  // @@protoc_insertion_point(field_add:choreo.Polygon.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Point >*
Polygon::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Polygon.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Point >&
Polygon::points() const {
  // @@protoc_insertion_point(field_list:choreo.Polygon.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon32::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon32::Polygon32()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Polygon32)
}
Polygon32::Polygon32(const Polygon32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.Polygon32)
}

void Polygon32::SharedCtor() {
  _cached_size_ = 0;
}

Polygon32::~Polygon32() {
  // @@protoc_insertion_point(destructor:choreo.Polygon32)
  SharedDtor();
}

void Polygon32::SharedDtor() {
}

void Polygon32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polygon32::descriptor() {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon32& Polygon32::default_instance() {
  protobuf_geometric_2fpolygon_2eproto::InitDefaults();
  return *internal_default_instance();
}

Polygon32* Polygon32::New(::google::protobuf::Arena* arena) const {
  Polygon32* n = new Polygon32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polygon32::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Polygon32)
  points_.Clear();
}

bool Polygon32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Polygon32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.Point32 points = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Polygon32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Polygon32)
  return false;
#undef DO_
}

void Polygon32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Polygon32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Point32 points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Polygon32)
}

::google::protobuf::uint8* Polygon32::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Polygon32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Point32 points = 1;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->points(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Polygon32)
  return target;
}

size_t Polygon32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Polygon32)
  size_t total_size = 0;

  // repeated .choreo.Point32 points = 1;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polygon32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Polygon32)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon32* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon32>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Polygon32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Polygon32)
    MergeFrom(*source);
  }
}

void Polygon32::MergeFrom(const Polygon32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Polygon32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void Polygon32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Polygon32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon32::CopyFrom(const Polygon32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Polygon32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon32::IsInitialized() const {
  return true;
}

void Polygon32::Swap(Polygon32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon32::InternalSwap(Polygon32* other) {
  points_.InternalSwap(&other->points_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polygon32::GetMetadata() const {
  protobuf_geometric_2fpolygon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpolygon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polygon32

// repeated .choreo.Point32 points = 1;
int Polygon32::points_size() const {
  return points_.size();
}
void Polygon32::clear_points() {
  points_.Clear();
}
const ::choreo::Point32& Polygon32::points(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Polygon32.points)
  return points_.Get(index);
}
::choreo::Point32* Polygon32::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Polygon32.points)
  return points_.Mutable(index);
}
::choreo::Point32* Polygon32::add_points() {
  // @@protoc_insertion_point(field_add:choreo.Polygon32.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Point32 >*
Polygon32::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Polygon32.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Point32 >&
Polygon32::points() const {
  // @@protoc_insertion_point(field_list:choreo.Polygon32.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
