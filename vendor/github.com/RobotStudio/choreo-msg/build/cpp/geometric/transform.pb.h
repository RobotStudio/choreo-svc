// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/transform.proto

#ifndef PROTOBUF_geometric_2ftransform_2eproto__INCLUDED
#define PROTOBUF_geometric_2ftransform_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive/header.pb.h"
#include "geometric/vector.pb.h"
#include "geometric/quaternion.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class QuaternionStamped;
class QuaternionStampedDefaultTypeInternal;
extern QuaternionStampedDefaultTypeInternal _QuaternionStamped_default_instance_;
class Transform;
class TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class TransformStamped;
class TransformStampedDefaultTypeInternal;
extern TransformStampedDefaultTypeInternal _TransformStamped_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3Stamped;
class Vector3StampedDefaultTypeInternal;
extern Vector3StampedDefaultTypeInternal _Vector3Stamped_default_instance_;
}  // namespace choreo

namespace choreo {

namespace protobuf_geometric_2ftransform_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2ftransform_2eproto

// ===================================================================

class TransformStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.TransformStamped) */ {
 public:
  TransformStamped();
  virtual ~TransformStamped();

  TransformStamped(const TransformStamped& from);

  inline TransformStamped& operator=(const TransformStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformStamped& default_instance();

  static inline const TransformStamped* internal_default_instance() {
    return reinterpret_cast<const TransformStamped*>(
               &_TransformStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(TransformStamped* other);

  // implements Message ----------------------------------------------

  inline TransformStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  TransformStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TransformStamped& from);
  void MergeFrom(const TransformStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TransformStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Transform transform = 2;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 2;
  const ::choreo::Transform& transform() const;
  ::choreo::Transform* mutable_transform();
  ::choreo::Transform* release_transform();
  void set_allocated_transform(::choreo::Transform* transform);

  // @@protoc_insertion_point(class_scope:choreo.TransformStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Transform* transform_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2ftransform_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Transform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Transform) */ {
 public:
  Transform();
  virtual ~Transform();

  Transform(const Transform& from);

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Transform& default_instance();

  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Transform* other);

  // implements Message ----------------------------------------------

  inline Transform* New() const PROTOBUF_FINAL { return New(NULL); }

  Transform* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Vector3 translation = 1;
  bool has_translation() const;
  void clear_translation();
  static const int kTranslationFieldNumber = 1;
  const ::choreo::Vector3& translation() const;
  ::choreo::Vector3* mutable_translation();
  ::choreo::Vector3* release_translation();
  void set_allocated_translation(::choreo::Vector3* translation);

  // .choreo.Quaternion rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  const ::choreo::Quaternion& rotation() const;
  ::choreo::Quaternion* mutable_rotation();
  ::choreo::Quaternion* release_rotation();
  void set_allocated_rotation(::choreo::Quaternion* rotation);

  // @@protoc_insertion_point(class_scope:choreo.Transform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Vector3* translation_;
  ::choreo::Quaternion* rotation_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2ftransform_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TransformStamped

// .choreo.Header header = 1;
inline bool TransformStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void TransformStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& TransformStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.TransformStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* TransformStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TransformStamped.header)
  return header_;
}
inline ::choreo::Header* TransformStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.TransformStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void TransformStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TransformStamped.header)
}

// .choreo.Transform transform = 2;
inline bool TransformStamped::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
inline void TransformStamped::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) delete transform_;
  transform_ = NULL;
}
inline const ::choreo::Transform& TransformStamped::transform() const {
  // @@protoc_insertion_point(field_get:choreo.TransformStamped.transform)
  return transform_ != NULL ? *transform_
                         : *::choreo::Transform::internal_default_instance();
}
inline ::choreo::Transform* TransformStamped::mutable_transform() {
  
  if (transform_ == NULL) {
    transform_ = new ::choreo::Transform;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TransformStamped.transform)
  return transform_;
}
inline ::choreo::Transform* TransformStamped::release_transform() {
  // @@protoc_insertion_point(field_release:choreo.TransformStamped.transform)
  
  ::choreo::Transform* temp = transform_;
  transform_ = NULL;
  return temp;
}
inline void TransformStamped::set_allocated_transform(::choreo::Transform* transform) {
  delete transform_;
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TransformStamped.transform)
}

// -------------------------------------------------------------------

// Transform

// .choreo.Vector3 translation = 1;
inline bool Transform::has_translation() const {
  return this != internal_default_instance() && translation_ != NULL;
}
inline void Transform::clear_translation() {
  if (GetArenaNoVirtual() == NULL && translation_ != NULL) delete translation_;
  translation_ = NULL;
}
inline const ::choreo::Vector3& Transform::translation() const {
  // @@protoc_insertion_point(field_get:choreo.Transform.translation)
  return translation_ != NULL ? *translation_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Transform::mutable_translation() {
  
  if (translation_ == NULL) {
    translation_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Transform.translation)
  return translation_;
}
inline ::choreo::Vector3* Transform::release_translation() {
  // @@protoc_insertion_point(field_release:choreo.Transform.translation)
  
  ::choreo::Vector3* temp = translation_;
  translation_ = NULL;
  return temp;
}
inline void Transform::set_allocated_translation(::choreo::Vector3* translation) {
  delete translation_;
  translation_ = translation;
  if (translation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Transform.translation)
}

// .choreo.Quaternion rotation = 2;
inline bool Transform::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void Transform::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) delete rotation_;
  rotation_ = NULL;
}
inline const ::choreo::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:choreo.Transform.rotation)
  return rotation_ != NULL ? *rotation_
                         : *::choreo::Quaternion::internal_default_instance();
}
inline ::choreo::Quaternion* Transform::mutable_rotation() {
  
  if (rotation_ == NULL) {
    rotation_ = new ::choreo::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Transform.rotation)
  return rotation_;
}
inline ::choreo::Quaternion* Transform::release_rotation() {
  // @@protoc_insertion_point(field_release:choreo.Transform.rotation)
  
  ::choreo::Quaternion* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline void Transform::set_allocated_rotation(::choreo::Quaternion* rotation) {
  delete rotation_;
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Transform.rotation)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2ftransform_2eproto__INCLUDED
