// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/inertia.proto

#ifndef PROTOBUF_geometric_2finertia_2eproto__INCLUDED
#define PROTOBUF_geometric_2finertia_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive/header.pb.h"
#include "primitive/float.pb.h"
#include "geometric/vector.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class Float32;
class Float32DefaultTypeInternal;
extern Float32DefaultTypeInternal _Float32_default_instance_;
class Float32Array;
class Float32ArrayDefaultTypeInternal;
extern Float32ArrayDefaultTypeInternal _Float32Array_default_instance_;
class Float64;
class Float64DefaultTypeInternal;
extern Float64DefaultTypeInternal _Float64_default_instance_;
class Float64Array;
class Float64ArrayDefaultTypeInternal;
extern Float64ArrayDefaultTypeInternal _Float64Array_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Inertia;
class InertiaDefaultTypeInternal;
extern InertiaDefaultTypeInternal _Inertia_default_instance_;
class InertiaStamped;
class InertiaStampedDefaultTypeInternal;
extern InertiaStampedDefaultTypeInternal _InertiaStamped_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3Stamped;
class Vector3StampedDefaultTypeInternal;
extern Vector3StampedDefaultTypeInternal _Vector3Stamped_default_instance_;
}  // namespace choreo

namespace choreo {

namespace protobuf_geometric_2finertia_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2finertia_2eproto

// ===================================================================

class InertiaStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.InertiaStamped) */ {
 public:
  InertiaStamped();
  virtual ~InertiaStamped();

  InertiaStamped(const InertiaStamped& from);

  inline InertiaStamped& operator=(const InertiaStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InertiaStamped& default_instance();

  static inline const InertiaStamped* internal_default_instance() {
    return reinterpret_cast<const InertiaStamped*>(
               &_InertiaStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InertiaStamped* other);

  // implements Message ----------------------------------------------

  inline InertiaStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  InertiaStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InertiaStamped& from);
  void MergeFrom(const InertiaStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InertiaStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Inertia inertia = 2;
  bool has_inertia() const;
  void clear_inertia();
  static const int kInertiaFieldNumber = 2;
  const ::choreo::Inertia& inertia() const;
  ::choreo::Inertia* mutable_inertia();
  ::choreo::Inertia* release_inertia();
  void set_allocated_inertia(::choreo::Inertia* inertia);

  // @@protoc_insertion_point(class_scope:choreo.InertiaStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Inertia* inertia_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2finertia_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Inertia : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Inertia) */ {
 public:
  Inertia();
  virtual ~Inertia();

  Inertia(const Inertia& from);

  inline Inertia& operator=(const Inertia& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Inertia& default_instance();

  static inline const Inertia* internal_default_instance() {
    return reinterpret_cast<const Inertia*>(
               &_Inertia_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Inertia* other);

  // implements Message ----------------------------------------------

  inline Inertia* New() const PROTOBUF_FINAL { return New(NULL); }

  Inertia* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Inertia& from);
  void MergeFrom(const Inertia& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Inertia* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Float64 m = 1;
  bool has_m() const;
  void clear_m();
  static const int kMFieldNumber = 1;
  const ::choreo::Float64& m() const;
  ::choreo::Float64* mutable_m();
  ::choreo::Float64* release_m();
  void set_allocated_m(::choreo::Float64* m);

  // .choreo.Vector3 com = 2;
  bool has_com() const;
  void clear_com();
  static const int kComFieldNumber = 2;
  const ::choreo::Vector3& com() const;
  ::choreo::Vector3* mutable_com();
  ::choreo::Vector3* release_com();
  void set_allocated_com(::choreo::Vector3* com);

  // .choreo.Float64 ixx = 3;
  bool has_ixx() const;
  void clear_ixx();
  static const int kIxxFieldNumber = 3;
  const ::choreo::Float64& ixx() const;
  ::choreo::Float64* mutable_ixx();
  ::choreo::Float64* release_ixx();
  void set_allocated_ixx(::choreo::Float64* ixx);

  // .choreo.Float64 ixy = 4;
  bool has_ixy() const;
  void clear_ixy();
  static const int kIxyFieldNumber = 4;
  const ::choreo::Float64& ixy() const;
  ::choreo::Float64* mutable_ixy();
  ::choreo::Float64* release_ixy();
  void set_allocated_ixy(::choreo::Float64* ixy);

  // .choreo.Float64 ixz = 5;
  bool has_ixz() const;
  void clear_ixz();
  static const int kIxzFieldNumber = 5;
  const ::choreo::Float64& ixz() const;
  ::choreo::Float64* mutable_ixz();
  ::choreo::Float64* release_ixz();
  void set_allocated_ixz(::choreo::Float64* ixz);

  // .choreo.Float64 izz = 6;
  bool has_izz() const;
  void clear_izz();
  static const int kIzzFieldNumber = 6;
  const ::choreo::Float64& izz() const;
  ::choreo::Float64* mutable_izz();
  ::choreo::Float64* release_izz();
  void set_allocated_izz(::choreo::Float64* izz);

  // .choreo.Float64 iyy = 7;
  bool has_iyy() const;
  void clear_iyy();
  static const int kIyyFieldNumber = 7;
  const ::choreo::Float64& iyy() const;
  ::choreo::Float64* mutable_iyy();
  ::choreo::Float64* release_iyy();
  void set_allocated_iyy(::choreo::Float64* iyy);

  // .choreo.Float64 iyz = 8;
  bool has_iyz() const;
  void clear_iyz();
  static const int kIyzFieldNumber = 8;
  const ::choreo::Float64& iyz() const;
  ::choreo::Float64* mutable_iyz();
  ::choreo::Float64* release_iyz();
  void set_allocated_iyz(::choreo::Float64* iyz);

  // @@protoc_insertion_point(class_scope:choreo.Inertia)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Float64* m_;
  ::choreo::Vector3* com_;
  ::choreo::Float64* ixx_;
  ::choreo::Float64* ixy_;
  ::choreo::Float64* ixz_;
  ::choreo::Float64* izz_;
  ::choreo::Float64* iyy_;
  ::choreo::Float64* iyz_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2finertia_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InertiaStamped

// .choreo.Header header = 1;
inline bool InertiaStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void InertiaStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& InertiaStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.InertiaStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* InertiaStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.InertiaStamped.header)
  return header_;
}
inline ::choreo::Header* InertiaStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.InertiaStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void InertiaStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.InertiaStamped.header)
}

// .choreo.Inertia inertia = 2;
inline bool InertiaStamped::has_inertia() const {
  return this != internal_default_instance() && inertia_ != NULL;
}
inline void InertiaStamped::clear_inertia() {
  if (GetArenaNoVirtual() == NULL && inertia_ != NULL) delete inertia_;
  inertia_ = NULL;
}
inline const ::choreo::Inertia& InertiaStamped::inertia() const {
  // @@protoc_insertion_point(field_get:choreo.InertiaStamped.inertia)
  return inertia_ != NULL ? *inertia_
                         : *::choreo::Inertia::internal_default_instance();
}
inline ::choreo::Inertia* InertiaStamped::mutable_inertia() {
  
  if (inertia_ == NULL) {
    inertia_ = new ::choreo::Inertia;
  }
  // @@protoc_insertion_point(field_mutable:choreo.InertiaStamped.inertia)
  return inertia_;
}
inline ::choreo::Inertia* InertiaStamped::release_inertia() {
  // @@protoc_insertion_point(field_release:choreo.InertiaStamped.inertia)
  
  ::choreo::Inertia* temp = inertia_;
  inertia_ = NULL;
  return temp;
}
inline void InertiaStamped::set_allocated_inertia(::choreo::Inertia* inertia) {
  delete inertia_;
  inertia_ = inertia;
  if (inertia) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.InertiaStamped.inertia)
}

// -------------------------------------------------------------------

// Inertia

// .choreo.Float64 m = 1;
inline bool Inertia::has_m() const {
  return this != internal_default_instance() && m_ != NULL;
}
inline void Inertia::clear_m() {
  if (GetArenaNoVirtual() == NULL && m_ != NULL) delete m_;
  m_ = NULL;
}
inline const ::choreo::Float64& Inertia::m() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.m)
  return m_ != NULL ? *m_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Inertia::mutable_m() {
  
  if (m_ == NULL) {
    m_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.m)
  return m_;
}
inline ::choreo::Float64* Inertia::release_m() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.m)
  
  ::choreo::Float64* temp = m_;
  m_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_m(::choreo::Float64* m) {
  delete m_;
  m_ = m;
  if (m) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.m)
}

// .choreo.Vector3 com = 2;
inline bool Inertia::has_com() const {
  return this != internal_default_instance() && com_ != NULL;
}
inline void Inertia::clear_com() {
  if (GetArenaNoVirtual() == NULL && com_ != NULL) delete com_;
  com_ = NULL;
}
inline const ::choreo::Vector3& Inertia::com() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.com)
  return com_ != NULL ? *com_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Inertia::mutable_com() {
  
  if (com_ == NULL) {
    com_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.com)
  return com_;
}
inline ::choreo::Vector3* Inertia::release_com() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.com)
  
  ::choreo::Vector3* temp = com_;
  com_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_com(::choreo::Vector3* com) {
  delete com_;
  com_ = com;
  if (com) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.com)
}

// .choreo.Float64 ixx = 3;
inline bool Inertia::has_ixx() const {
  return this != internal_default_instance() && ixx_ != NULL;
}
inline void Inertia::clear_ixx() {
  if (GetArenaNoVirtual() == NULL && ixx_ != NULL) delete ixx_;
  ixx_ = NULL;
}
inline const ::choreo::Float64& Inertia::ixx() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.ixx)
  return ixx_ != NULL ? *ixx_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Inertia::mutable_ixx() {
  
  if (ixx_ == NULL) {
    ixx_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.ixx)
  return ixx_;
}
inline ::choreo::Float64* Inertia::release_ixx() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.ixx)
  
  ::choreo::Float64* temp = ixx_;
  ixx_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_ixx(::choreo::Float64* ixx) {
  delete ixx_;
  ixx_ = ixx;
  if (ixx) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.ixx)
}

// .choreo.Float64 ixy = 4;
inline bool Inertia::has_ixy() const {
  return this != internal_default_instance() && ixy_ != NULL;
}
inline void Inertia::clear_ixy() {
  if (GetArenaNoVirtual() == NULL && ixy_ != NULL) delete ixy_;
  ixy_ = NULL;
}
inline const ::choreo::Float64& Inertia::ixy() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.ixy)
  return ixy_ != NULL ? *ixy_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Inertia::mutable_ixy() {
  
  if (ixy_ == NULL) {
    ixy_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.ixy)
  return ixy_;
}
inline ::choreo::Float64* Inertia::release_ixy() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.ixy)
  
  ::choreo::Float64* temp = ixy_;
  ixy_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_ixy(::choreo::Float64* ixy) {
  delete ixy_;
  ixy_ = ixy;
  if (ixy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.ixy)
}

// .choreo.Float64 ixz = 5;
inline bool Inertia::has_ixz() const {
  return this != internal_default_instance() && ixz_ != NULL;
}
inline void Inertia::clear_ixz() {
  if (GetArenaNoVirtual() == NULL && ixz_ != NULL) delete ixz_;
  ixz_ = NULL;
}
inline const ::choreo::Float64& Inertia::ixz() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.ixz)
  return ixz_ != NULL ? *ixz_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Inertia::mutable_ixz() {
  
  if (ixz_ == NULL) {
    ixz_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.ixz)
  return ixz_;
}
inline ::choreo::Float64* Inertia::release_ixz() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.ixz)
  
  ::choreo::Float64* temp = ixz_;
  ixz_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_ixz(::choreo::Float64* ixz) {
  delete ixz_;
  ixz_ = ixz;
  if (ixz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.ixz)
}

// .choreo.Float64 iyy = 7;
inline bool Inertia::has_iyy() const {
  return this != internal_default_instance() && iyy_ != NULL;
}
inline void Inertia::clear_iyy() {
  if (GetArenaNoVirtual() == NULL && iyy_ != NULL) delete iyy_;
  iyy_ = NULL;
}
inline const ::choreo::Float64& Inertia::iyy() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.iyy)
  return iyy_ != NULL ? *iyy_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Inertia::mutable_iyy() {
  
  if (iyy_ == NULL) {
    iyy_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.iyy)
  return iyy_;
}
inline ::choreo::Float64* Inertia::release_iyy() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.iyy)
  
  ::choreo::Float64* temp = iyy_;
  iyy_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_iyy(::choreo::Float64* iyy) {
  delete iyy_;
  iyy_ = iyy;
  if (iyy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.iyy)
}

// .choreo.Float64 iyz = 8;
inline bool Inertia::has_iyz() const {
  return this != internal_default_instance() && iyz_ != NULL;
}
inline void Inertia::clear_iyz() {
  if (GetArenaNoVirtual() == NULL && iyz_ != NULL) delete iyz_;
  iyz_ = NULL;
}
inline const ::choreo::Float64& Inertia::iyz() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.iyz)
  return iyz_ != NULL ? *iyz_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Inertia::mutable_iyz() {
  
  if (iyz_ == NULL) {
    iyz_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.iyz)
  return iyz_;
}
inline ::choreo::Float64* Inertia::release_iyz() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.iyz)
  
  ::choreo::Float64* temp = iyz_;
  iyz_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_iyz(::choreo::Float64* iyz) {
  delete iyz_;
  iyz_ = iyz;
  if (iyz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.iyz)
}

// .choreo.Float64 izz = 6;
inline bool Inertia::has_izz() const {
  return this != internal_default_instance() && izz_ != NULL;
}
inline void Inertia::clear_izz() {
  if (GetArenaNoVirtual() == NULL && izz_ != NULL) delete izz_;
  izz_ = NULL;
}
inline const ::choreo::Float64& Inertia::izz() const {
  // @@protoc_insertion_point(field_get:choreo.Inertia.izz)
  return izz_ != NULL ? *izz_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Inertia::mutable_izz() {
  
  if (izz_ == NULL) {
    izz_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Inertia.izz)
  return izz_;
}
inline ::choreo::Float64* Inertia::release_izz() {
  // @@protoc_insertion_point(field_release:choreo.Inertia.izz)
  
  ::choreo::Float64* temp = izz_;
  izz_ = NULL;
  return temp;
}
inline void Inertia::set_allocated_izz(::choreo::Float64* izz) {
  delete izz_;
  izz_ = izz;
  if (izz) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Inertia.izz)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2finertia_2eproto__INCLUDED
