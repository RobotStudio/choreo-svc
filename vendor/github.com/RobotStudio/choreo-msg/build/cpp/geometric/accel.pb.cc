// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/accel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometric/accel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class AccelStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccelStamped> {
} _AccelStamped_default_instance_;
class AccelWithCovarianceStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccelWithCovarianceStamped> {
} _AccelWithCovarianceStamped_default_instance_;
class AccelWithCovarianceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccelWithCovariance> {
} _AccelWithCovariance_default_instance_;
class AccelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Accel> {
} _Accel_default_instance_;

namespace protobuf_geometric_2faccel_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelStamped, accel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelWithCovarianceStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelWithCovarianceStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelWithCovarianceStamped, accel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelWithCovariance, accel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accel, linear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Accel, angular_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(AccelStamped)},
  { 7, -1, sizeof(AccelWithCovarianceStamped)},
  { 14, -1, sizeof(AccelWithCovariance)},
  { 21, -1, sizeof(Accel)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccelStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccelWithCovarianceStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccelWithCovariance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Accel_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "geometric/accel.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _AccelStamped_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AccelWithCovarianceStamped_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _AccelWithCovariance_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Accel_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fvector_2eproto::InitDefaults();
  _AccelStamped_default_instance_.DefaultConstruct();
  _AccelWithCovarianceStamped_default_instance_.DefaultConstruct();
  _AccelWithCovariance_default_instance_.DefaultConstruct();
  _Accel_default_instance_.DefaultConstruct();
  _AccelStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _AccelStamped_default_instance_.get_mutable()->accel_ = const_cast< ::choreo::Accel*>(
      ::choreo::Accel::internal_default_instance());
  _AccelWithCovarianceStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _AccelWithCovarianceStamped_default_instance_.get_mutable()->accel_ = const_cast< ::choreo::AccelWithCovariance*>(
      ::choreo::AccelWithCovariance::internal_default_instance());
  _AccelWithCovariance_default_instance_.get_mutable()->accel_ = const_cast< ::choreo::Accel*>(
      ::choreo::Accel::internal_default_instance());
  _Accel_default_instance_.get_mutable()->linear_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _Accel_default_instance_.get_mutable()->angular_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025geometric/accel.proto\022\006choreo\032\026primiti"
      "ve/header.proto\032\025primitive/float.proto\032\026"
      "geometric/vector.proto\"L\n\014AccelStamped\022\036"
      "\n\006header\030\001 \001(\0132\016.choreo.Header\022\034\n\005accel\030"
      "\002 \001(\0132\r.choreo.Accel\"h\n\032AccelWithCovaria"
      "nceStamped\022\036\n\006header\030\001 \001(\0132\016.choreo.Head"
      "er\022*\n\005accel\030\002 \001(\0132\033.choreo.AccelWithCova"
      "riance\"X\n\023AccelWithCovariance\022\034\n\005accel\030\001"
      " \001(\0132\r.choreo.Accel\022#\n\ncovariance\030\002 \003(\0132"
      "\017.choreo.Float64\"J\n\005Accel\022\037\n\006linear\030\001 \001("
      "\0132\017.choreo.Vector3\022 \n\007angular\030\002 \001(\0132\017.ch"
      "oreo.Vector3B+Z)github.com/RobotStudio/c"
      "horeo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometric/accel.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fvector_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_geometric_2faccel_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccelStamped::kHeaderFieldNumber;
const int AccelStamped::kAccelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccelStamped::AccelStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2faccel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.AccelStamped)
}
AccelStamped::AccelStamped(const AccelStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_accel()) {
    accel_ = new ::choreo::Accel(*from.accel_);
  } else {
    accel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.AccelStamped)
}

void AccelStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&accel_) -
    reinterpret_cast<char*>(&header_) + sizeof(accel_));
  _cached_size_ = 0;
}

AccelStamped::~AccelStamped() {
  // @@protoc_insertion_point(destructor:choreo.AccelStamped)
  SharedDtor();
}

void AccelStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete accel_;
  }
}

void AccelStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccelStamped::descriptor() {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccelStamped& AccelStamped::default_instance() {
  protobuf_geometric_2faccel_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccelStamped* AccelStamped::New(::google::protobuf::Arena* arena) const {
  AccelStamped* n = new AccelStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccelStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.AccelStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) {
    delete accel_;
  }
  accel_ = NULL;
}

bool AccelStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.AccelStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Accel accel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.AccelStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.AccelStamped)
  return false;
#undef DO_
}

void AccelStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.AccelStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Accel accel = 2;
  if (this->has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->accel_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.AccelStamped)
}

::google::protobuf::uint8* AccelStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.AccelStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Accel accel = 2;
  if (this->has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->accel_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.AccelStamped)
  return target;
}

size_t AccelStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.AccelStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Accel accel = 2;
  if (this->has_accel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccelStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.AccelStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccelStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.AccelStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.AccelStamped)
    MergeFrom(*source);
  }
}

void AccelStamped::MergeFrom(const AccelStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.AccelStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_accel()) {
    mutable_accel()->::choreo::Accel::MergeFrom(from.accel());
  }
}

void AccelStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.AccelStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelStamped::CopyFrom(const AccelStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.AccelStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelStamped::IsInitialized() const {
  return true;
}

void AccelStamped::Swap(AccelStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccelStamped::InternalSwap(AccelStamped* other) {
  std::swap(header_, other->header_);
  std::swap(accel_, other->accel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccelStamped::GetMetadata() const {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccelStamped

// .choreo.Header header = 1;
bool AccelStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AccelStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& AccelStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.AccelStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* AccelStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelStamped.header)
  return header_;
}
::choreo::Header* AccelStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.AccelStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void AccelStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelStamped.header)
}

// .choreo.Accel accel = 2;
bool AccelStamped::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
void AccelStamped::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) delete accel_;
  accel_ = NULL;
}
const ::choreo::Accel& AccelStamped::accel() const {
  // @@protoc_insertion_point(field_get:choreo.AccelStamped.accel)
  return accel_ != NULL ? *accel_
                         : *::choreo::Accel::internal_default_instance();
}
::choreo::Accel* AccelStamped::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::choreo::Accel;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelStamped.accel)
  return accel_;
}
::choreo::Accel* AccelStamped::release_accel() {
  // @@protoc_insertion_point(field_release:choreo.AccelStamped.accel)
  
  ::choreo::Accel* temp = accel_;
  accel_ = NULL;
  return temp;
}
void AccelStamped::set_allocated_accel(::choreo::Accel* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelStamped.accel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccelWithCovarianceStamped::kHeaderFieldNumber;
const int AccelWithCovarianceStamped::kAccelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccelWithCovarianceStamped::AccelWithCovarianceStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2faccel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.AccelWithCovarianceStamped)
}
AccelWithCovarianceStamped::AccelWithCovarianceStamped(const AccelWithCovarianceStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_accel()) {
    accel_ = new ::choreo::AccelWithCovariance(*from.accel_);
  } else {
    accel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.AccelWithCovarianceStamped)
}

void AccelWithCovarianceStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&accel_) -
    reinterpret_cast<char*>(&header_) + sizeof(accel_));
  _cached_size_ = 0;
}

AccelWithCovarianceStamped::~AccelWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:choreo.AccelWithCovarianceStamped)
  SharedDtor();
}

void AccelWithCovarianceStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete accel_;
  }
}

void AccelWithCovarianceStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccelWithCovarianceStamped::descriptor() {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccelWithCovarianceStamped& AccelWithCovarianceStamped::default_instance() {
  protobuf_geometric_2faccel_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccelWithCovarianceStamped* AccelWithCovarianceStamped::New(::google::protobuf::Arena* arena) const {
  AccelWithCovarianceStamped* n = new AccelWithCovarianceStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccelWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.AccelWithCovarianceStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) {
    delete accel_;
  }
  accel_ = NULL;
}

bool AccelWithCovarianceStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.AccelWithCovarianceStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.AccelWithCovariance accel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.AccelWithCovarianceStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.AccelWithCovarianceStamped)
  return false;
#undef DO_
}

void AccelWithCovarianceStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.AccelWithCovarianceStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.AccelWithCovariance accel = 2;
  if (this->has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->accel_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.AccelWithCovarianceStamped)
}

::google::protobuf::uint8* AccelWithCovarianceStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.AccelWithCovarianceStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.AccelWithCovariance accel = 2;
  if (this->has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->accel_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.AccelWithCovarianceStamped)
  return target;
}

size_t AccelWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.AccelWithCovarianceStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.AccelWithCovariance accel = 2;
  if (this->has_accel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccelWithCovarianceStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.AccelWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelWithCovarianceStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccelWithCovarianceStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.AccelWithCovarianceStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.AccelWithCovarianceStamped)
    MergeFrom(*source);
  }
}

void AccelWithCovarianceStamped::MergeFrom(const AccelWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.AccelWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_accel()) {
    mutable_accel()->::choreo::AccelWithCovariance::MergeFrom(from.accel());
  }
}

void AccelWithCovarianceStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.AccelWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelWithCovarianceStamped::CopyFrom(const AccelWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.AccelWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelWithCovarianceStamped::IsInitialized() const {
  return true;
}

void AccelWithCovarianceStamped::Swap(AccelWithCovarianceStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccelWithCovarianceStamped::InternalSwap(AccelWithCovarianceStamped* other) {
  std::swap(header_, other->header_);
  std::swap(accel_, other->accel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccelWithCovarianceStamped::GetMetadata() const {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccelWithCovarianceStamped

// .choreo.Header header = 1;
bool AccelWithCovarianceStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void AccelWithCovarianceStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& AccelWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovarianceStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* AccelWithCovarianceStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovarianceStamped.header)
  return header_;
}
::choreo::Header* AccelWithCovarianceStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.AccelWithCovarianceStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void AccelWithCovarianceStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelWithCovarianceStamped.header)
}

// .choreo.AccelWithCovariance accel = 2;
bool AccelWithCovarianceStamped::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
void AccelWithCovarianceStamped::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) delete accel_;
  accel_ = NULL;
}
const ::choreo::AccelWithCovariance& AccelWithCovarianceStamped::accel() const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovarianceStamped.accel)
  return accel_ != NULL ? *accel_
                         : *::choreo::AccelWithCovariance::internal_default_instance();
}
::choreo::AccelWithCovariance* AccelWithCovarianceStamped::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::choreo::AccelWithCovariance;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovarianceStamped.accel)
  return accel_;
}
::choreo::AccelWithCovariance* AccelWithCovarianceStamped::release_accel() {
  // @@protoc_insertion_point(field_release:choreo.AccelWithCovarianceStamped.accel)
  
  ::choreo::AccelWithCovariance* temp = accel_;
  accel_ = NULL;
  return temp;
}
void AccelWithCovarianceStamped::set_allocated_accel(::choreo::AccelWithCovariance* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelWithCovarianceStamped.accel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccelWithCovariance::kAccelFieldNumber;
const int AccelWithCovariance::kCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccelWithCovariance::AccelWithCovariance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2faccel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.AccelWithCovariance)
}
AccelWithCovariance::AccelWithCovariance(const AccelWithCovariance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      covariance_(from.covariance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accel()) {
    accel_ = new ::choreo::Accel(*from.accel_);
  } else {
    accel_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.AccelWithCovariance)
}

void AccelWithCovariance::SharedCtor() {
  accel_ = NULL;
  _cached_size_ = 0;
}

AccelWithCovariance::~AccelWithCovariance() {
  // @@protoc_insertion_point(destructor:choreo.AccelWithCovariance)
  SharedDtor();
}

void AccelWithCovariance::SharedDtor() {
  if (this != internal_default_instance()) {
    delete accel_;
  }
}

void AccelWithCovariance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccelWithCovariance::descriptor() {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AccelWithCovariance& AccelWithCovariance::default_instance() {
  protobuf_geometric_2faccel_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccelWithCovariance* AccelWithCovariance::New(::google::protobuf::Arena* arena) const {
  AccelWithCovariance* n = new AccelWithCovariance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccelWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.AccelWithCovariance)
  covariance_.Clear();
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) {
    delete accel_;
  }
  accel_ = NULL;
}

bool AccelWithCovariance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.AccelWithCovariance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Accel accel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 covariance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.AccelWithCovariance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.AccelWithCovariance)
  return false;
#undef DO_
}

void AccelWithCovariance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.AccelWithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Accel accel = 1;
  if (this->has_accel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->accel_, output);
  }

  // repeated .choreo.Float64 covariance = 2;
  for (unsigned int i = 0, n = this->covariance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->covariance(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.AccelWithCovariance)
}

::google::protobuf::uint8* AccelWithCovariance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.AccelWithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Accel accel = 1;
  if (this->has_accel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->accel_, deterministic, target);
  }

  // repeated .choreo.Float64 covariance = 2;
  for (unsigned int i = 0, n = this->covariance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->covariance(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.AccelWithCovariance)
  return target;
}

size_t AccelWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.AccelWithCovariance)
  size_t total_size = 0;

  // repeated .choreo.Float64 covariance = 2;
  {
    unsigned int count = this->covariance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->covariance(i));
    }
  }

  // .choreo.Accel accel = 1;
  if (this->has_accel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accel_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccelWithCovariance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.AccelWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelWithCovariance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccelWithCovariance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.AccelWithCovariance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.AccelWithCovariance)
    MergeFrom(*source);
  }
}

void AccelWithCovariance::MergeFrom(const AccelWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.AccelWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_accel()) {
    mutable_accel()->::choreo::Accel::MergeFrom(from.accel());
  }
}

void AccelWithCovariance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.AccelWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelWithCovariance::CopyFrom(const AccelWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.AccelWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelWithCovariance::IsInitialized() const {
  return true;
}

void AccelWithCovariance::Swap(AccelWithCovariance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccelWithCovariance::InternalSwap(AccelWithCovariance* other) {
  covariance_.InternalSwap(&other->covariance_);
  std::swap(accel_, other->accel_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccelWithCovariance::GetMetadata() const {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccelWithCovariance

// .choreo.Accel accel = 1;
bool AccelWithCovariance::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
void AccelWithCovariance::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) delete accel_;
  accel_ = NULL;
}
const ::choreo::Accel& AccelWithCovariance::accel() const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovariance.accel)
  return accel_ != NULL ? *accel_
                         : *::choreo::Accel::internal_default_instance();
}
::choreo::Accel* AccelWithCovariance::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::choreo::Accel;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovariance.accel)
  return accel_;
}
::choreo::Accel* AccelWithCovariance::release_accel() {
  // @@protoc_insertion_point(field_release:choreo.AccelWithCovariance.accel)
  
  ::choreo::Accel* temp = accel_;
  accel_ = NULL;
  return temp;
}
void AccelWithCovariance::set_allocated_accel(::choreo::Accel* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelWithCovariance.accel)
}

// repeated .choreo.Float64 covariance = 2;
int AccelWithCovariance::covariance_size() const {
  return covariance_.size();
}
void AccelWithCovariance::clear_covariance() {
  covariance_.Clear();
}
const ::choreo::Float64& AccelWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovariance.covariance)
  return covariance_.Get(index);
}
::choreo::Float64* AccelWithCovariance::mutable_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovariance.covariance)
  return covariance_.Mutable(index);
}
::choreo::Float64* AccelWithCovariance::add_covariance() {
  // @@protoc_insertion_point(field_add:choreo.AccelWithCovariance.covariance)
  return covariance_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
AccelWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.AccelWithCovariance.covariance)
  return &covariance_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
AccelWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:choreo.AccelWithCovariance.covariance)
  return covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Accel::kLinearFieldNumber;
const int Accel::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Accel::Accel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2faccel_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Accel)
}
Accel::Accel(const Accel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear()) {
    linear_ = new ::choreo::Vector3(*from.linear_);
  } else {
    linear_ = NULL;
  }
  if (from.has_angular()) {
    angular_ = new ::choreo::Vector3(*from.angular_);
  } else {
    angular_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Accel)
}

void Accel::SharedCtor() {
  ::memset(&linear_, 0, reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&linear_) + sizeof(angular_));
  _cached_size_ = 0;
}

Accel::~Accel() {
  // @@protoc_insertion_point(destructor:choreo.Accel)
  SharedDtor();
}

void Accel::SharedDtor() {
  if (this != internal_default_instance()) {
    delete linear_;
  }
  if (this != internal_default_instance()) {
    delete angular_;
  }
}

void Accel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Accel::descriptor() {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Accel& Accel::default_instance() {
  protobuf_geometric_2faccel_2eproto::InitDefaults();
  return *internal_default_instance();
}

Accel* Accel::New(::google::protobuf::Arena* arena) const {
  Accel* n = new Accel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Accel::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Accel)
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) {
    delete linear_;
  }
  linear_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) {
    delete angular_;
  }
  angular_ = NULL;
}

bool Accel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Accel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Vector3 linear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Vector3 angular = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Accel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Accel)
  return false;
#undef DO_
}

void Accel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Accel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Vector3 linear = 1;
  if (this->has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linear_, output);
  }

  // .choreo.Vector3 angular = 2;
  if (this->has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Accel)
}

::google::protobuf::uint8* Accel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Accel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Vector3 linear = 1;
  if (this->has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linear_, deterministic, target);
  }

  // .choreo.Vector3 angular = 2;
  if (this->has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angular_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Accel)
  return target;
}

size_t Accel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Accel)
  size_t total_size = 0;

  // .choreo.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_);
  }

  // .choreo.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Accel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  const Accel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Accel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Accel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Accel)
    MergeFrom(*source);
  }
}

void Accel::MergeFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Accel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    mutable_linear()->::choreo::Vector3::MergeFrom(from.linear());
  }
  if (from.has_angular()) {
    mutable_angular()->::choreo::Vector3::MergeFrom(from.angular());
  }
}

void Accel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Accel::CopyFrom(const Accel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Accel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Accel::IsInitialized() const {
  return true;
}

void Accel::Swap(Accel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Accel::InternalSwap(Accel* other) {
  std::swap(linear_, other->linear_);
  std::swap(angular_, other->angular_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Accel::GetMetadata() const {
  protobuf_geometric_2faccel_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2faccel_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Accel

// .choreo.Vector3 linear = 1;
bool Accel::has_linear() const {
  return this != internal_default_instance() && linear_ != NULL;
}
void Accel::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
const ::choreo::Vector3& Accel::linear() const {
  // @@protoc_insertion_point(field_get:choreo.Accel.linear)
  return linear_ != NULL ? *linear_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* Accel::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Accel.linear)
  return linear_;
}
::choreo::Vector3* Accel::release_linear() {
  // @@protoc_insertion_point(field_release:choreo.Accel.linear)
  
  ::choreo::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
void Accel::set_allocated_linear(::choreo::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Accel.linear)
}

// .choreo.Vector3 angular = 2;
bool Accel::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
void Accel::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
const ::choreo::Vector3& Accel::angular() const {
  // @@protoc_insertion_point(field_get:choreo.Accel.angular)
  return angular_ != NULL ? *angular_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* Accel::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Accel.angular)
  return angular_;
}
::choreo::Vector3* Accel::release_angular() {
  // @@protoc_insertion_point(field_release:choreo.Accel.angular)
  
  ::choreo::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
void Accel::set_allocated_angular(::choreo::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Accel.angular)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
