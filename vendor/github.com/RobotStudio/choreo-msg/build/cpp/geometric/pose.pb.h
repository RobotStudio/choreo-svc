// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/pose.proto

#ifndef PROTOBUF_geometric_2fpose_2eproto__INCLUDED
#define PROTOBUF_geometric_2fpose_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive/header.pb.h"
#include "primitive/float.pb.h"
#include "geometric/point.pb.h"
#include "geometric/quaternion.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class Float32;
class Float32DefaultTypeInternal;
extern Float32DefaultTypeInternal _Float32_default_instance_;
class Float32Array;
class Float32ArrayDefaultTypeInternal;
extern Float32ArrayDefaultTypeInternal _Float32Array_default_instance_;
class Float64;
class Float64DefaultTypeInternal;
extern Float64DefaultTypeInternal _Float64_default_instance_;
class Float64Array;
class Float64ArrayDefaultTypeInternal;
extern Float64ArrayDefaultTypeInternal _Float64Array_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Point32;
class Point32DefaultTypeInternal;
extern Point32DefaultTypeInternal _Point32_default_instance_;
class Point32Stamped;
class Point32StampedDefaultTypeInternal;
extern Point32StampedDefaultTypeInternal _Point32Stamped_default_instance_;
class PointStamped;
class PointStampedDefaultTypeInternal;
extern PointStampedDefaultTypeInternal _PointStamped_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Pose2D;
class Pose2DDefaultTypeInternal;
extern Pose2DDefaultTypeInternal _Pose2D_default_instance_;
class Pose2DStamped;
class Pose2DStampedDefaultTypeInternal;
extern Pose2DStampedDefaultTypeInternal _Pose2DStamped_default_instance_;
class PoseArray;
class PoseArrayDefaultTypeInternal;
extern PoseArrayDefaultTypeInternal _PoseArray_default_instance_;
class PoseStamped;
class PoseStampedDefaultTypeInternal;
extern PoseStampedDefaultTypeInternal _PoseStamped_default_instance_;
class PoseWithCovariance;
class PoseWithCovarianceDefaultTypeInternal;
extern PoseWithCovarianceDefaultTypeInternal _PoseWithCovariance_default_instance_;
class PoseWithCovarianceStamped;
class PoseWithCovarianceStampedDefaultTypeInternal;
extern PoseWithCovarianceStampedDefaultTypeInternal _PoseWithCovarianceStamped_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class QuaternionStamped;
class QuaternionStampedDefaultTypeInternal;
extern QuaternionStampedDefaultTypeInternal _QuaternionStamped_default_instance_;
}  // namespace choreo

namespace choreo {

namespace protobuf_geometric_2fpose_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2fpose_2eproto

// ===================================================================

class PoseStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.PoseStamped) */ {
 public:
  PoseStamped();
  virtual ~PoseStamped();

  PoseStamped(const PoseStamped& from);

  inline PoseStamped& operator=(const PoseStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseStamped& default_instance();

  static inline const PoseStamped* internal_default_instance() {
    return reinterpret_cast<const PoseStamped*>(
               &_PoseStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PoseStamped* other);

  // implements Message ----------------------------------------------

  inline PoseStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  PoseStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoseStamped& from);
  void MergeFrom(const PoseStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoseStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::choreo::Pose& pose() const;
  ::choreo::Pose* mutable_pose();
  ::choreo::Pose* release_pose();
  void set_allocated_pose(::choreo::Pose* pose);

  // @@protoc_insertion_point(class_scope:choreo.PoseStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Pose* pose_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fpose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseWithCovarianceStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.PoseWithCovarianceStamped) */ {
 public:
  PoseWithCovarianceStamped();
  virtual ~PoseWithCovarianceStamped();

  PoseWithCovarianceStamped(const PoseWithCovarianceStamped& from);

  inline PoseWithCovarianceStamped& operator=(const PoseWithCovarianceStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseWithCovarianceStamped& default_instance();

  static inline const PoseWithCovarianceStamped* internal_default_instance() {
    return reinterpret_cast<const PoseWithCovarianceStamped*>(
               &_PoseWithCovarianceStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PoseWithCovarianceStamped* other);

  // implements Message ----------------------------------------------

  inline PoseWithCovarianceStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  PoseWithCovarianceStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoseWithCovarianceStamped& from);
  void MergeFrom(const PoseWithCovarianceStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoseWithCovarianceStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.PoseWithCovariance pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::choreo::PoseWithCovariance& pose() const;
  ::choreo::PoseWithCovariance* mutable_pose();
  ::choreo::PoseWithCovariance* release_pose();
  void set_allocated_pose(::choreo::PoseWithCovariance* pose);

  // @@protoc_insertion_point(class_scope:choreo.PoseWithCovarianceStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::PoseWithCovariance* pose_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fpose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose2DStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Pose2DStamped) */ {
 public:
  Pose2DStamped();
  virtual ~Pose2DStamped();

  Pose2DStamped(const Pose2DStamped& from);

  inline Pose2DStamped& operator=(const Pose2DStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2DStamped& default_instance();

  static inline const Pose2DStamped* internal_default_instance() {
    return reinterpret_cast<const Pose2DStamped*>(
               &_Pose2DStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Pose2DStamped* other);

  // implements Message ----------------------------------------------

  inline Pose2DStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose2DStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose2DStamped& from);
  void MergeFrom(const Pose2DStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose2DStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Pose2D pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  const ::choreo::Pose2D& pose() const;
  ::choreo::Pose2D* mutable_pose();
  ::choreo::Pose2D* release_pose();
  void set_allocated_pose(::choreo::Pose2D* pose);

  // @@protoc_insertion_point(class_scope:choreo.Pose2DStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Pose2D* pose_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fpose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Pose* other);

  // implements Message ----------------------------------------------

  inline Pose* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Point position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::choreo::Point& position() const;
  ::choreo::Point* mutable_position();
  ::choreo::Point* release_position();
  void set_allocated_position(::choreo::Point* position);

  // .choreo.Quaternion orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  const ::choreo::Quaternion& orientation() const;
  ::choreo::Quaternion* mutable_orientation();
  ::choreo::Quaternion* release_orientation();
  void set_allocated_orientation(::choreo::Quaternion* orientation);

  // @@protoc_insertion_point(class_scope:choreo.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Point* position_;
  ::choreo::Quaternion* orientation_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fpose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.PoseArray) */ {
 public:
  PoseArray();
  virtual ~PoseArray();

  PoseArray(const PoseArray& from);

  inline PoseArray& operator=(const PoseArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseArray& default_instance();

  static inline const PoseArray* internal_default_instance() {
    return reinterpret_cast<const PoseArray*>(
               &_PoseArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PoseArray* other);

  // implements Message ----------------------------------------------

  inline PoseArray* New() const PROTOBUF_FINAL { return New(NULL); }

  PoseArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoseArray& from);
  void MergeFrom(const PoseArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoseArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .choreo.Pose poses = 2;
  int poses_size() const;
  void clear_poses();
  static const int kPosesFieldNumber = 2;
  const ::choreo::Pose& poses(int index) const;
  ::choreo::Pose* mutable_poses(int index);
  ::choreo::Pose* add_poses();
  ::google::protobuf::RepeatedPtrField< ::choreo::Pose >*
      mutable_poses();
  const ::google::protobuf::RepeatedPtrField< ::choreo::Pose >&
      poses() const;

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // @@protoc_insertion_point(class_scope:choreo.PoseArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::choreo::Pose > poses_;
  ::choreo::Header* header_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fpose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pose2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Pose2D) */ {
 public:
  Pose2D();
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2D& default_instance();

  static inline const Pose2D* internal_default_instance() {
    return reinterpret_cast<const Pose2D*>(
               &_Pose2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Pose2D* other);

  // implements Message ----------------------------------------------

  inline Pose2D* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Float64 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  const ::choreo::Float64& x() const;
  ::choreo::Float64* mutable_x();
  ::choreo::Float64* release_x();
  void set_allocated_x(::choreo::Float64* x);

  // .choreo.Float64 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  const ::choreo::Float64& y() const;
  ::choreo::Float64* mutable_y();
  ::choreo::Float64* release_y();
  void set_allocated_y(::choreo::Float64* y);

  // .choreo.Float64 theta = 3;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  const ::choreo::Float64& theta() const;
  ::choreo::Float64* mutable_theta();
  ::choreo::Float64* release_theta();
  void set_allocated_theta(::choreo::Float64* theta);

  // @@protoc_insertion_point(class_scope:choreo.Pose2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Float64* x_;
  ::choreo::Float64* y_;
  ::choreo::Float64* theta_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fpose_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PoseWithCovariance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.PoseWithCovariance) */ {
 public:
  PoseWithCovariance();
  virtual ~PoseWithCovariance();

  PoseWithCovariance(const PoseWithCovariance& from);

  inline PoseWithCovariance& operator=(const PoseWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PoseWithCovariance& default_instance();

  static inline const PoseWithCovariance* internal_default_instance() {
    return reinterpret_cast<const PoseWithCovariance*>(
               &_PoseWithCovariance_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PoseWithCovariance* other);

  // implements Message ----------------------------------------------

  inline PoseWithCovariance* New() const PROTOBUF_FINAL { return New(NULL); }

  PoseWithCovariance* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PoseWithCovariance& from);
  void MergeFrom(const PoseWithCovariance& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PoseWithCovariance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .choreo.Float64 covariance = 2;
  int covariance_size() const;
  void clear_covariance();
  static const int kCovarianceFieldNumber = 2;
  const ::choreo::Float64& covariance(int index) const;
  ::choreo::Float64* mutable_covariance(int index);
  ::choreo::Float64* add_covariance();
  ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
      mutable_covariance();
  const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
      covariance() const;

  // .choreo.Pose pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::choreo::Pose& pose() const;
  ::choreo::Pose* mutable_pose();
  ::choreo::Pose* release_pose();
  void set_allocated_pose(::choreo::Pose* pose);

  // @@protoc_insertion_point(class_scope:choreo.PoseWithCovariance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::choreo::Float64 > covariance_;
  ::choreo::Pose* pose_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2fpose_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// PoseStamped

// .choreo.Header header = 1;
inline bool PoseStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void PoseStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& PoseStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.PoseStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* PoseStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PoseStamped.header)
  return header_;
}
inline ::choreo::Header* PoseStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.PoseStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PoseStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PoseStamped.header)
}

// .choreo.Pose pose = 2;
inline bool PoseStamped::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void PoseStamped::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::choreo::Pose& PoseStamped::pose() const {
  // @@protoc_insertion_point(field_get:choreo.PoseStamped.pose)
  return pose_ != NULL ? *pose_
                         : *::choreo::Pose::internal_default_instance();
}
inline ::choreo::Pose* PoseStamped::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::choreo::Pose;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PoseStamped.pose)
  return pose_;
}
inline ::choreo::Pose* PoseStamped::release_pose() {
  // @@protoc_insertion_point(field_release:choreo.PoseStamped.pose)
  
  ::choreo::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void PoseStamped::set_allocated_pose(::choreo::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PoseStamped.pose)
}

// -------------------------------------------------------------------

// PoseWithCovarianceStamped

// .choreo.Header header = 1;
inline bool PoseWithCovarianceStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void PoseWithCovarianceStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& PoseWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.PoseWithCovarianceStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* PoseWithCovarianceStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PoseWithCovarianceStamped.header)
  return header_;
}
inline ::choreo::Header* PoseWithCovarianceStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.PoseWithCovarianceStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PoseWithCovarianceStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PoseWithCovarianceStamped.header)
}

// .choreo.PoseWithCovariance pose = 2;
inline bool PoseWithCovarianceStamped::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void PoseWithCovarianceStamped::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::choreo::PoseWithCovariance& PoseWithCovarianceStamped::pose() const {
  // @@protoc_insertion_point(field_get:choreo.PoseWithCovarianceStamped.pose)
  return pose_ != NULL ? *pose_
                         : *::choreo::PoseWithCovariance::internal_default_instance();
}
inline ::choreo::PoseWithCovariance* PoseWithCovarianceStamped::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::choreo::PoseWithCovariance;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PoseWithCovarianceStamped.pose)
  return pose_;
}
inline ::choreo::PoseWithCovariance* PoseWithCovarianceStamped::release_pose() {
  // @@protoc_insertion_point(field_release:choreo.PoseWithCovarianceStamped.pose)
  
  ::choreo::PoseWithCovariance* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void PoseWithCovarianceStamped::set_allocated_pose(::choreo::PoseWithCovariance* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PoseWithCovarianceStamped.pose)
}

// -------------------------------------------------------------------

// Pose2DStamped

// .choreo.Header header = 1;
inline bool Pose2DStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Pose2DStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& Pose2DStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.Pose2DStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* Pose2DStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Pose2DStamped.header)
  return header_;
}
inline ::choreo::Header* Pose2DStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.Pose2DStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Pose2DStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Pose2DStamped.header)
}

// .choreo.Pose2D pose = 2;
inline bool Pose2DStamped::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void Pose2DStamped::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::choreo::Pose2D& Pose2DStamped::pose() const {
  // @@protoc_insertion_point(field_get:choreo.Pose2DStamped.pose)
  return pose_ != NULL ? *pose_
                         : *::choreo::Pose2D::internal_default_instance();
}
inline ::choreo::Pose2D* Pose2DStamped::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::choreo::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Pose2DStamped.pose)
  return pose_;
}
inline ::choreo::Pose2D* Pose2DStamped::release_pose() {
  // @@protoc_insertion_point(field_release:choreo.Pose2DStamped.pose)
  
  ::choreo::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Pose2DStamped::set_allocated_pose(::choreo::Pose2D* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Pose2DStamped.pose)
}

// -------------------------------------------------------------------

// Pose

// .choreo.Point position = 1;
inline bool Pose::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Pose::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::choreo::Point& Pose::position() const {
  // @@protoc_insertion_point(field_get:choreo.Pose.position)
  return position_ != NULL ? *position_
                         : *::choreo::Point::internal_default_instance();
}
inline ::choreo::Point* Pose::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::choreo::Point;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Pose.position)
  return position_;
}
inline ::choreo::Point* Pose::release_position() {
  // @@protoc_insertion_point(field_release:choreo.Pose.position)
  
  ::choreo::Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pose::set_allocated_position(::choreo::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Pose.position)
}

// .choreo.Quaternion orientation = 2;
inline bool Pose::has_orientation() const {
  return this != internal_default_instance() && orientation_ != NULL;
}
inline void Pose::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
inline const ::choreo::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:choreo.Pose.orientation)
  return orientation_ != NULL ? *orientation_
                         : *::choreo::Quaternion::internal_default_instance();
}
inline ::choreo::Quaternion* Pose::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::choreo::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Pose.orientation)
  return orientation_;
}
inline ::choreo::Quaternion* Pose::release_orientation() {
  // @@protoc_insertion_point(field_release:choreo.Pose.orientation)
  
  ::choreo::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void Pose::set_allocated_orientation(::choreo::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Pose.orientation)
}

// -------------------------------------------------------------------

// PoseArray

// .choreo.Header header = 1;
inline bool PoseArray::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void PoseArray::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& PoseArray::header() const {
  // @@protoc_insertion_point(field_get:choreo.PoseArray.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* PoseArray::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PoseArray.header)
  return header_;
}
inline ::choreo::Header* PoseArray::release_header() {
  // @@protoc_insertion_point(field_release:choreo.PoseArray.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void PoseArray::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PoseArray.header)
}

// repeated .choreo.Pose poses = 2;
inline int PoseArray::poses_size() const {
  return poses_.size();
}
inline void PoseArray::clear_poses() {
  poses_.Clear();
}
inline const ::choreo::Pose& PoseArray::poses(int index) const {
  // @@protoc_insertion_point(field_get:choreo.PoseArray.poses)
  return poses_.Get(index);
}
inline ::choreo::Pose* PoseArray::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.PoseArray.poses)
  return poses_.Mutable(index);
}
inline ::choreo::Pose* PoseArray::add_poses() {
  // @@protoc_insertion_point(field_add:choreo.PoseArray.poses)
  return poses_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::choreo::Pose >*
PoseArray::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:choreo.PoseArray.poses)
  return &poses_;
}
inline const ::google::protobuf::RepeatedPtrField< ::choreo::Pose >&
PoseArray::poses() const {
  // @@protoc_insertion_point(field_list:choreo.PoseArray.poses)
  return poses_;
}

// -------------------------------------------------------------------

// Pose2D

// .choreo.Float64 x = 1;
inline bool Pose2D::has_x() const {
  return this != internal_default_instance() && x_ != NULL;
}
inline void Pose2D::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) delete x_;
  x_ = NULL;
}
inline const ::choreo::Float64& Pose2D::x() const {
  // @@protoc_insertion_point(field_get:choreo.Pose2D.x)
  return x_ != NULL ? *x_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Pose2D::mutable_x() {
  
  if (x_ == NULL) {
    x_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Pose2D.x)
  return x_;
}
inline ::choreo::Float64* Pose2D::release_x() {
  // @@protoc_insertion_point(field_release:choreo.Pose2D.x)
  
  ::choreo::Float64* temp = x_;
  x_ = NULL;
  return temp;
}
inline void Pose2D::set_allocated_x(::choreo::Float64* x) {
  delete x_;
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Pose2D.x)
}

// .choreo.Float64 y = 2;
inline bool Pose2D::has_y() const {
  return this != internal_default_instance() && y_ != NULL;
}
inline void Pose2D::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) delete y_;
  y_ = NULL;
}
inline const ::choreo::Float64& Pose2D::y() const {
  // @@protoc_insertion_point(field_get:choreo.Pose2D.y)
  return y_ != NULL ? *y_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Pose2D::mutable_y() {
  
  if (y_ == NULL) {
    y_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Pose2D.y)
  return y_;
}
inline ::choreo::Float64* Pose2D::release_y() {
  // @@protoc_insertion_point(field_release:choreo.Pose2D.y)
  
  ::choreo::Float64* temp = y_;
  y_ = NULL;
  return temp;
}
inline void Pose2D::set_allocated_y(::choreo::Float64* y) {
  delete y_;
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Pose2D.y)
}

// .choreo.Float64 theta = 3;
inline bool Pose2D::has_theta() const {
  return this != internal_default_instance() && theta_ != NULL;
}
inline void Pose2D::clear_theta() {
  if (GetArenaNoVirtual() == NULL && theta_ != NULL) delete theta_;
  theta_ = NULL;
}
inline const ::choreo::Float64& Pose2D::theta() const {
  // @@protoc_insertion_point(field_get:choreo.Pose2D.theta)
  return theta_ != NULL ? *theta_
                         : *::choreo::Float64::internal_default_instance();
}
inline ::choreo::Float64* Pose2D::mutable_theta() {
  
  if (theta_ == NULL) {
    theta_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Pose2D.theta)
  return theta_;
}
inline ::choreo::Float64* Pose2D::release_theta() {
  // @@protoc_insertion_point(field_release:choreo.Pose2D.theta)
  
  ::choreo::Float64* temp = theta_;
  theta_ = NULL;
  return temp;
}
inline void Pose2D::set_allocated_theta(::choreo::Float64* theta) {
  delete theta_;
  theta_ = theta;
  if (theta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Pose2D.theta)
}

// -------------------------------------------------------------------

// PoseWithCovariance

// .choreo.Pose pose = 1;
inline bool PoseWithCovariance::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void PoseWithCovariance::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) delete pose_;
  pose_ = NULL;
}
inline const ::choreo::Pose& PoseWithCovariance::pose() const {
  // @@protoc_insertion_point(field_get:choreo.PoseWithCovariance.pose)
  return pose_ != NULL ? *pose_
                         : *::choreo::Pose::internal_default_instance();
}
inline ::choreo::Pose* PoseWithCovariance::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::choreo::Pose;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PoseWithCovariance.pose)
  return pose_;
}
inline ::choreo::Pose* PoseWithCovariance::release_pose() {
  // @@protoc_insertion_point(field_release:choreo.PoseWithCovariance.pose)
  
  ::choreo::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void PoseWithCovariance::set_allocated_pose(::choreo::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PoseWithCovariance.pose)
}

// repeated .choreo.Float64 covariance = 2;
inline int PoseWithCovariance::covariance_size() const {
  return covariance_.size();
}
inline void PoseWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline const ::choreo::Float64& PoseWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.PoseWithCovariance.covariance)
  return covariance_.Get(index);
}
inline ::choreo::Float64* PoseWithCovariance::mutable_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.PoseWithCovariance.covariance)
  return covariance_.Mutable(index);
}
inline ::choreo::Float64* PoseWithCovariance::add_covariance() {
  // @@protoc_insertion_point(field_add:choreo.PoseWithCovariance.covariance)
  return covariance_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
PoseWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.PoseWithCovariance.covariance)
  return &covariance_;
}
inline const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
PoseWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:choreo.PoseWithCovariance.covariance)
  return covariance_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2fpose_2eproto__INCLUDED
