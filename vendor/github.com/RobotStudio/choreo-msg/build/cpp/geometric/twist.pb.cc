// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/twist.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometric/twist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class TwistStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TwistStamped> {
} _TwistStamped_default_instance_;
class TwistWithCovarianceStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TwistWithCovarianceStamped> {
} _TwistWithCovarianceStamped_default_instance_;
class TwistDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Twist> {
} _Twist_default_instance_;
class TwistWithCovarianceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TwistWithCovariance> {
} _TwistWithCovariance_default_instance_;

namespace protobuf_geometric_2ftwist_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistStamped, twist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistWithCovarianceStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistWithCovarianceStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistWithCovarianceStamped, twist_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, linear_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Twist, angular_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistWithCovariance, twist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwistWithCovariance, covariance_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(TwistStamped)},
  { 7, -1, sizeof(TwistWithCovarianceStamped)},
  { 14, -1, sizeof(Twist)},
  { 21, -1, sizeof(TwistWithCovariance)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_TwistStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TwistWithCovarianceStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Twist_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TwistWithCovariance_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "geometric/twist.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _TwistStamped_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _TwistWithCovarianceStamped_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Twist_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _TwistWithCovariance_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  ::choreo::protobuf_geometric_2fvector_2eproto::InitDefaults();
  _TwistStamped_default_instance_.DefaultConstruct();
  _TwistWithCovarianceStamped_default_instance_.DefaultConstruct();
  _Twist_default_instance_.DefaultConstruct();
  _TwistWithCovariance_default_instance_.DefaultConstruct();
  _TwistStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _TwistStamped_default_instance_.get_mutable()->twist_ = const_cast< ::choreo::Twist*>(
      ::choreo::Twist::internal_default_instance());
  _TwistWithCovarianceStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _TwistWithCovarianceStamped_default_instance_.get_mutable()->twist_ = const_cast< ::choreo::TwistWithCovariance*>(
      ::choreo::TwistWithCovariance::internal_default_instance());
  _Twist_default_instance_.get_mutable()->linear_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _Twist_default_instance_.get_mutable()->angular_ = const_cast< ::choreo::Vector3*>(
      ::choreo::Vector3::internal_default_instance());
  _TwistWithCovariance_default_instance_.get_mutable()->twist_ = const_cast< ::choreo::Twist*>(
      ::choreo::Twist::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025geometric/twist.proto\022\006choreo\032\026primiti"
      "ve/header.proto\032\025primitive/float.proto\032\026"
      "geometric/vector.proto\"L\n\014TwistStamped\022\036"
      "\n\006header\030\001 \001(\0132\016.choreo.Header\022\034\n\005twist\030"
      "\002 \001(\0132\r.choreo.Twist\"h\n\032TwistWithCovaria"
      "nceStamped\022\036\n\006header\030\001 \001(\0132\016.choreo.Head"
      "er\022*\n\005twist\030\002 \001(\0132\033.choreo.TwistWithCova"
      "riance\"J\n\005Twist\022\037\n\006linear\030\001 \001(\0132\017.choreo"
      ".Vector3\022 \n\007angular\030\002 \001(\0132\017.choreo.Vecto"
      "r3\"X\n\023TwistWithCovariance\022\034\n\005twist\030\001 \001(\013"
      "2\r.choreo.Twist\022#\n\ncovariance\030\002 \003(\0132\017.ch"
      "oreo.Float64B+Z)github.com/RobotStudio/c"
      "horeo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometric/twist.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::choreo::protobuf_geometric_2fvector_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_geometric_2ftwist_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwistStamped::kHeaderFieldNumber;
const int TwistStamped::kTwistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwistStamped::TwistStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2ftwist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.TwistStamped)
}
TwistStamped::TwistStamped(const TwistStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_twist()) {
    twist_ = new ::choreo::Twist(*from.twist_);
  } else {
    twist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.TwistStamped)
}

void TwistStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&twist_) -
    reinterpret_cast<char*>(&header_) + sizeof(twist_));
  _cached_size_ = 0;
}

TwistStamped::~TwistStamped() {
  // @@protoc_insertion_point(destructor:choreo.TwistStamped)
  SharedDtor();
}

void TwistStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete twist_;
  }
}

void TwistStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwistStamped::descriptor() {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwistStamped& TwistStamped::default_instance() {
  protobuf_geometric_2ftwist_2eproto::InitDefaults();
  return *internal_default_instance();
}

TwistStamped* TwistStamped::New(::google::protobuf::Arena* arena) const {
  TwistStamped* n = new TwistStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwistStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.TwistStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) {
    delete twist_;
  }
  twist_ = NULL;
}

bool TwistStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.TwistStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Twist twist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.TwistStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.TwistStamped)
  return false;
#undef DO_
}

void TwistStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.TwistStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Twist twist = 2;
  if (this->has_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->twist_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.TwistStamped)
}

::google::protobuf::uint8* TwistStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.TwistStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Twist twist = 2;
  if (this->has_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->twist_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.TwistStamped)
  return target;
}

size_t TwistStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.TwistStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Twist twist = 2;
  if (this->has_twist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->twist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwistStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.TwistStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwistStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.TwistStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.TwistStamped)
    MergeFrom(*source);
  }
}

void TwistStamped::MergeFrom(const TwistStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.TwistStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_twist()) {
    mutable_twist()->::choreo::Twist::MergeFrom(from.twist());
  }
}

void TwistStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.TwistStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistStamped::CopyFrom(const TwistStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.TwistStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistStamped::IsInitialized() const {
  return true;
}

void TwistStamped::Swap(TwistStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwistStamped::InternalSwap(TwistStamped* other) {
  std::swap(header_, other->header_);
  std::swap(twist_, other->twist_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwistStamped::GetMetadata() const {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwistStamped

// .choreo.Header header = 1;
bool TwistStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TwistStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& TwistStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.TwistStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* TwistStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistStamped.header)
  return header_;
}
::choreo::Header* TwistStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.TwistStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TwistStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistStamped.header)
}

// .choreo.Twist twist = 2;
bool TwistStamped::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
void TwistStamped::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
}
const ::choreo::Twist& TwistStamped::twist() const {
  // @@protoc_insertion_point(field_get:choreo.TwistStamped.twist)
  return twist_ != NULL ? *twist_
                         : *::choreo::Twist::internal_default_instance();
}
::choreo::Twist* TwistStamped::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::choreo::Twist;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistStamped.twist)
  return twist_;
}
::choreo::Twist* TwistStamped::release_twist() {
  // @@protoc_insertion_point(field_release:choreo.TwistStamped.twist)
  
  ::choreo::Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
void TwistStamped::set_allocated_twist(::choreo::Twist* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistStamped.twist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwistWithCovarianceStamped::kHeaderFieldNumber;
const int TwistWithCovarianceStamped::kTwistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwistWithCovarianceStamped::TwistWithCovarianceStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2ftwist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.TwistWithCovarianceStamped)
}
TwistWithCovarianceStamped::TwistWithCovarianceStamped(const TwistWithCovarianceStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_twist()) {
    twist_ = new ::choreo::TwistWithCovariance(*from.twist_);
  } else {
    twist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.TwistWithCovarianceStamped)
}

void TwistWithCovarianceStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&twist_) -
    reinterpret_cast<char*>(&header_) + sizeof(twist_));
  _cached_size_ = 0;
}

TwistWithCovarianceStamped::~TwistWithCovarianceStamped() {
  // @@protoc_insertion_point(destructor:choreo.TwistWithCovarianceStamped)
  SharedDtor();
}

void TwistWithCovarianceStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete twist_;
  }
}

void TwistWithCovarianceStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwistWithCovarianceStamped::descriptor() {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwistWithCovarianceStamped& TwistWithCovarianceStamped::default_instance() {
  protobuf_geometric_2ftwist_2eproto::InitDefaults();
  return *internal_default_instance();
}

TwistWithCovarianceStamped* TwistWithCovarianceStamped::New(::google::protobuf::Arena* arena) const {
  TwistWithCovarianceStamped* n = new TwistWithCovarianceStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwistWithCovarianceStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.TwistWithCovarianceStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) {
    delete twist_;
  }
  twist_ = NULL;
}

bool TwistWithCovarianceStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.TwistWithCovarianceStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.TwistWithCovariance twist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.TwistWithCovarianceStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.TwistWithCovarianceStamped)
  return false;
#undef DO_
}

void TwistWithCovarianceStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.TwistWithCovarianceStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.TwistWithCovariance twist = 2;
  if (this->has_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->twist_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.TwistWithCovarianceStamped)
}

::google::protobuf::uint8* TwistWithCovarianceStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.TwistWithCovarianceStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.TwistWithCovariance twist = 2;
  if (this->has_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->twist_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.TwistWithCovarianceStamped)
  return target;
}

size_t TwistWithCovarianceStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.TwistWithCovarianceStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.TwistWithCovariance twist = 2;
  if (this->has_twist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->twist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwistWithCovarianceStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.TwistWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistWithCovarianceStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwistWithCovarianceStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.TwistWithCovarianceStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.TwistWithCovarianceStamped)
    MergeFrom(*source);
  }
}

void TwistWithCovarianceStamped::MergeFrom(const TwistWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.TwistWithCovarianceStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_twist()) {
    mutable_twist()->::choreo::TwistWithCovariance::MergeFrom(from.twist());
  }
}

void TwistWithCovarianceStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.TwistWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistWithCovarianceStamped::CopyFrom(const TwistWithCovarianceStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.TwistWithCovarianceStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistWithCovarianceStamped::IsInitialized() const {
  return true;
}

void TwistWithCovarianceStamped::Swap(TwistWithCovarianceStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwistWithCovarianceStamped::InternalSwap(TwistWithCovarianceStamped* other) {
  std::swap(header_, other->header_);
  std::swap(twist_, other->twist_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwistWithCovarianceStamped::GetMetadata() const {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwistWithCovarianceStamped

// .choreo.Header header = 1;
bool TwistWithCovarianceStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void TwistWithCovarianceStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& TwistWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovarianceStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* TwistWithCovarianceStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovarianceStamped.header)
  return header_;
}
::choreo::Header* TwistWithCovarianceStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.TwistWithCovarianceStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TwistWithCovarianceStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistWithCovarianceStamped.header)
}

// .choreo.TwistWithCovariance twist = 2;
bool TwistWithCovarianceStamped::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
void TwistWithCovarianceStamped::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
}
const ::choreo::TwistWithCovariance& TwistWithCovarianceStamped::twist() const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovarianceStamped.twist)
  return twist_ != NULL ? *twist_
                         : *::choreo::TwistWithCovariance::internal_default_instance();
}
::choreo::TwistWithCovariance* TwistWithCovarianceStamped::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::choreo::TwistWithCovariance;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovarianceStamped.twist)
  return twist_;
}
::choreo::TwistWithCovariance* TwistWithCovarianceStamped::release_twist() {
  // @@protoc_insertion_point(field_release:choreo.TwistWithCovarianceStamped.twist)
  
  ::choreo::TwistWithCovariance* temp = twist_;
  twist_ = NULL;
  return temp;
}
void TwistWithCovarianceStamped::set_allocated_twist(::choreo::TwistWithCovariance* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistWithCovarianceStamped.twist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Twist::kLinearFieldNumber;
const int Twist::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Twist::Twist()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2ftwist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Twist)
}
Twist::Twist(const Twist& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_linear()) {
    linear_ = new ::choreo::Vector3(*from.linear_);
  } else {
    linear_ = NULL;
  }
  if (from.has_angular()) {
    angular_ = new ::choreo::Vector3(*from.angular_);
  } else {
    angular_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Twist)
}

void Twist::SharedCtor() {
  ::memset(&linear_, 0, reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&linear_) + sizeof(angular_));
  _cached_size_ = 0;
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:choreo.Twist)
  SharedDtor();
}

void Twist::SharedDtor() {
  if (this != internal_default_instance()) {
    delete linear_;
  }
  if (this != internal_default_instance()) {
    delete angular_;
  }
}

void Twist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Twist::descriptor() {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Twist& Twist::default_instance() {
  protobuf_geometric_2ftwist_2eproto::InitDefaults();
  return *internal_default_instance();
}

Twist* Twist::New(::google::protobuf::Arena* arena) const {
  Twist* n = new Twist;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Twist)
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) {
    delete linear_;
  }
  linear_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) {
    delete angular_;
  }
  angular_ = NULL;
}

bool Twist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Twist)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Vector3 linear = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Vector3 angular = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Twist)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Twist)
  return false;
#undef DO_
}

void Twist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Vector3 linear = 1;
  if (this->has_linear()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->linear_, output);
  }

  // .choreo.Vector3 angular = 2;
  if (this->has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->angular_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Twist)
}

::google::protobuf::uint8* Twist::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Twist)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Vector3 linear = 1;
  if (this->has_linear()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->linear_, deterministic, target);
  }

  // .choreo.Vector3 angular = 2;
  if (this->has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->angular_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Twist)
  return target;
}

size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Twist)
  size_t total_size = 0;

  // .choreo.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->linear_);
  }

  // .choreo.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Twist::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  const Twist* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Twist>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Twist)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Twist)
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    mutable_linear()->::choreo::Vector3::MergeFrom(from.linear());
  }
  if (from.has_angular()) {
    mutable_angular()->::choreo::Vector3::MergeFrom(from.angular());
  }
}

void Twist::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {
  return true;
}

void Twist::Swap(Twist* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Twist::InternalSwap(Twist* other) {
  std::swap(linear_, other->linear_);
  std::swap(angular_, other->angular_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Twist::GetMetadata() const {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Twist

// .choreo.Vector3 linear = 1;
bool Twist::has_linear() const {
  return this != internal_default_instance() && linear_ != NULL;
}
void Twist::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
const ::choreo::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:choreo.Twist.linear)
  return linear_ != NULL ? *linear_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* Twist::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Twist.linear)
  return linear_;
}
::choreo::Vector3* Twist::release_linear() {
  // @@protoc_insertion_point(field_release:choreo.Twist.linear)
  
  ::choreo::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
void Twist::set_allocated_linear(::choreo::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Twist.linear)
}

// .choreo.Vector3 angular = 2;
bool Twist::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
void Twist::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
const ::choreo::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:choreo.Twist.angular)
  return angular_ != NULL ? *angular_
                         : *::choreo::Vector3::internal_default_instance();
}
::choreo::Vector3* Twist::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Twist.angular)
  return angular_;
}
::choreo::Vector3* Twist::release_angular() {
  // @@protoc_insertion_point(field_release:choreo.Twist.angular)
  
  ::choreo::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
void Twist::set_allocated_angular(::choreo::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Twist.angular)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TwistWithCovariance::kTwistFieldNumber;
const int TwistWithCovariance::kCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TwistWithCovariance::TwistWithCovariance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2ftwist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.TwistWithCovariance)
}
TwistWithCovariance::TwistWithCovariance(const TwistWithCovariance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      covariance_(from.covariance_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_twist()) {
    twist_ = new ::choreo::Twist(*from.twist_);
  } else {
    twist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.TwistWithCovariance)
}

void TwistWithCovariance::SharedCtor() {
  twist_ = NULL;
  _cached_size_ = 0;
}

TwistWithCovariance::~TwistWithCovariance() {
  // @@protoc_insertion_point(destructor:choreo.TwistWithCovariance)
  SharedDtor();
}

void TwistWithCovariance::SharedDtor() {
  if (this != internal_default_instance()) {
    delete twist_;
  }
}

void TwistWithCovariance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwistWithCovariance::descriptor() {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TwistWithCovariance& TwistWithCovariance::default_instance() {
  protobuf_geometric_2ftwist_2eproto::InitDefaults();
  return *internal_default_instance();
}

TwistWithCovariance* TwistWithCovariance::New(::google::protobuf::Arena* arena) const {
  TwistWithCovariance* n = new TwistWithCovariance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TwistWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.TwistWithCovariance)
  covariance_.Clear();
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) {
    delete twist_;
  }
  twist_ = NULL;
}

bool TwistWithCovariance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.TwistWithCovariance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Twist twist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_twist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.Float64 covariance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_covariance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.TwistWithCovariance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.TwistWithCovariance)
  return false;
#undef DO_
}

void TwistWithCovariance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.TwistWithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Twist twist = 1;
  if (this->has_twist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->twist_, output);
  }

  // repeated .choreo.Float64 covariance = 2;
  for (unsigned int i = 0, n = this->covariance_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->covariance(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.TwistWithCovariance)
}

::google::protobuf::uint8* TwistWithCovariance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.TwistWithCovariance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Twist twist = 1;
  if (this->has_twist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->twist_, deterministic, target);
  }

  // repeated .choreo.Float64 covariance = 2;
  for (unsigned int i = 0, n = this->covariance_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->covariance(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.TwistWithCovariance)
  return target;
}

size_t TwistWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.TwistWithCovariance)
  size_t total_size = 0;

  // repeated .choreo.Float64 covariance = 2;
  {
    unsigned int count = this->covariance_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->covariance(i));
    }
  }

  // .choreo.Twist twist = 1;
  if (this->has_twist()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->twist_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwistWithCovariance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.TwistWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const TwistWithCovariance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TwistWithCovariance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.TwistWithCovariance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.TwistWithCovariance)
    MergeFrom(*source);
  }
}

void TwistWithCovariance::MergeFrom(const TwistWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.TwistWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_twist()) {
    mutable_twist()->::choreo::Twist::MergeFrom(from.twist());
  }
}

void TwistWithCovariance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.TwistWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwistWithCovariance::CopyFrom(const TwistWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.TwistWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwistWithCovariance::IsInitialized() const {
  return true;
}

void TwistWithCovariance::Swap(TwistWithCovariance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TwistWithCovariance::InternalSwap(TwistWithCovariance* other) {
  covariance_.InternalSwap(&other->covariance_);
  std::swap(twist_, other->twist_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TwistWithCovariance::GetMetadata() const {
  protobuf_geometric_2ftwist_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2ftwist_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TwistWithCovariance

// .choreo.Twist twist = 1;
bool TwistWithCovariance::has_twist() const {
  return this != internal_default_instance() && twist_ != NULL;
}
void TwistWithCovariance::clear_twist() {
  if (GetArenaNoVirtual() == NULL && twist_ != NULL) delete twist_;
  twist_ = NULL;
}
const ::choreo::Twist& TwistWithCovariance::twist() const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovariance.twist)
  return twist_ != NULL ? *twist_
                         : *::choreo::Twist::internal_default_instance();
}
::choreo::Twist* TwistWithCovariance::mutable_twist() {
  
  if (twist_ == NULL) {
    twist_ = new ::choreo::Twist;
  }
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovariance.twist)
  return twist_;
}
::choreo::Twist* TwistWithCovariance::release_twist() {
  // @@protoc_insertion_point(field_release:choreo.TwistWithCovariance.twist)
  
  ::choreo::Twist* temp = twist_;
  twist_ = NULL;
  return temp;
}
void TwistWithCovariance::set_allocated_twist(::choreo::Twist* twist) {
  delete twist_;
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.TwistWithCovariance.twist)
}

// repeated .choreo.Float64 covariance = 2;
int TwistWithCovariance::covariance_size() const {
  return covariance_.size();
}
void TwistWithCovariance::clear_covariance() {
  covariance_.Clear();
}
const ::choreo::Float64& TwistWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.TwistWithCovariance.covariance)
  return covariance_.Get(index);
}
::choreo::Float64* TwistWithCovariance::mutable_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.TwistWithCovariance.covariance)
  return covariance_.Mutable(index);
}
::choreo::Float64* TwistWithCovariance::add_covariance() {
  // @@protoc_insertion_point(field_add:choreo.TwistWithCovariance.covariance)
  return covariance_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
TwistWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.TwistWithCovariance.covariance)
  return &covariance_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
TwistWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:choreo.TwistWithCovariance.covariance)
  return covariance_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
