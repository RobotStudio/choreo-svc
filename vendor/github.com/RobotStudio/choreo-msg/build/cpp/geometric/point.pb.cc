// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/point.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "geometric/point.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class Point32StampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point32Stamped> {
} _Point32Stamped_default_instance_;
class PointStampedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointStamped> {
} _PointStamped_default_instance_;
class Point32DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point32> {
} _Point32_default_instance_;
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;

namespace protobuf_geometric_2fpoint_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point32Stamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point32Stamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point32Stamped, point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointStamped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointStamped, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointStamped, point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point32, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point32, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point32, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Point32Stamped)},
  { 7, -1, sizeof(PointStamped)},
  { 14, -1, sizeof(Point32)},
  { 22, -1, sizeof(Point)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point32Stamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PointStamped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point32_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "geometric/point.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _Point32Stamped_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PointStamped_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Point32_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2ffloat_2eproto::InitDefaults();
  _Point32Stamped_default_instance_.DefaultConstruct();
  _PointStamped_default_instance_.DefaultConstruct();
  _Point32_default_instance_.DefaultConstruct();
  _Point_default_instance_.DefaultConstruct();
  _Point32Stamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _Point32Stamped_default_instance_.get_mutable()->point_ = const_cast< ::choreo::Point32*>(
      ::choreo::Point32::internal_default_instance());
  _PointStamped_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _PointStamped_default_instance_.get_mutable()->point_ = const_cast< ::choreo::Point*>(
      ::choreo::Point::internal_default_instance());
  _Point32_default_instance_.get_mutable()->x_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _Point32_default_instance_.get_mutable()->y_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _Point32_default_instance_.get_mutable()->z_ = const_cast< ::choreo::Float32*>(
      ::choreo::Float32::internal_default_instance());
  _Point_default_instance_.get_mutable()->x_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Point_default_instance_.get_mutable()->y_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
  _Point_default_instance_.get_mutable()->z_ = const_cast< ::choreo::Float64*>(
      ::choreo::Float64::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025geometric/point.proto\022\006choreo\032\026primiti"
      "ve/header.proto\032\025primitive/float.proto\"P"
      "\n\016Point32Stamped\022\036\n\006header\030\001 \001(\0132\016.chore"
      "o.Header\022\036\n\005point\030\002 \001(\0132\017.choreo.Point32"
      "\"L\n\014PointStamped\022\036\n\006header\030\001 \001(\0132\016.chore"
      "o.Header\022\034\n\005point\030\002 \001(\0132\r.choreo.Point\"]"
      "\n\007Point32\022\032\n\001x\030\001 \001(\0132\017.choreo.Float32\022\032\n"
      "\001y\030\002 \001(\0132\017.choreo.Float32\022\032\n\001z\030\003 \001(\0132\017.c"
      "horeo.Float32\"[\n\005Point\022\032\n\001x\030\001 \001(\0132\017.chor"
      "eo.Float64\022\032\n\001y\030\002 \001(\0132\017.choreo.Float64\022\032"
      "\n\001z\030\003 \001(\0132\017.choreo.Float64B+Z)github.com"
      "/RobotStudio/choreo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "geometric/point.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2ffloat_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_geometric_2fpoint_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point32Stamped::kHeaderFieldNumber;
const int Point32Stamped::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point32Stamped::Point32Stamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Point32Stamped)
}
Point32Stamped::Point32Stamped(const Point32Stamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_point()) {
    point_ = new ::choreo::Point32(*from.point_);
  } else {
    point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Point32Stamped)
}

void Point32Stamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&header_) + sizeof(point_));
  _cached_size_ = 0;
}

Point32Stamped::~Point32Stamped() {
  // @@protoc_insertion_point(destructor:choreo.Point32Stamped)
  SharedDtor();
}

void Point32Stamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete point_;
  }
}

void Point32Stamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point32Stamped::descriptor() {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point32Stamped& Point32Stamped::default_instance() {
  protobuf_geometric_2fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point32Stamped* Point32Stamped::New(::google::protobuf::Arena* arena) const {
  Point32Stamped* n = new Point32Stamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point32Stamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Point32Stamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}

bool Point32Stamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Point32Stamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Point32 point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Point32Stamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Point32Stamped)
  return false;
#undef DO_
}

void Point32Stamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Point32Stamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Point32 point = 2;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Point32Stamped)
}

::google::protobuf::uint8* Point32Stamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Point32Stamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Point32 point = 2;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->point_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Point32Stamped)
  return target;
}

size_t Point32Stamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Point32Stamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Point32 point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point32Stamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Point32Stamped)
  GOOGLE_DCHECK_NE(&from, this);
  const Point32Stamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point32Stamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Point32Stamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Point32Stamped)
    MergeFrom(*source);
  }
}

void Point32Stamped::MergeFrom(const Point32Stamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Point32Stamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_point()) {
    mutable_point()->::choreo::Point32::MergeFrom(from.point());
  }
}

void Point32Stamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Point32Stamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point32Stamped::CopyFrom(const Point32Stamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Point32Stamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point32Stamped::IsInitialized() const {
  return true;
}

void Point32Stamped::Swap(Point32Stamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point32Stamped::InternalSwap(Point32Stamped* other) {
  std::swap(header_, other->header_);
  std::swap(point_, other->point_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point32Stamped::GetMetadata() const {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point32Stamped

// .choreo.Header header = 1;
bool Point32Stamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Point32Stamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& Point32Stamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.Point32Stamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* Point32Stamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point32Stamped.header)
  return header_;
}
::choreo::Header* Point32Stamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.Point32Stamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Point32Stamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point32Stamped.header)
}

// .choreo.Point32 point = 2;
bool Point32Stamped::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
void Point32Stamped::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
const ::choreo::Point32& Point32Stamped::point() const {
  // @@protoc_insertion_point(field_get:choreo.Point32Stamped.point)
  return point_ != NULL ? *point_
                         : *::choreo::Point32::internal_default_instance();
}
::choreo::Point32* Point32Stamped::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::choreo::Point32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point32Stamped.point)
  return point_;
}
::choreo::Point32* Point32Stamped::release_point() {
  // @@protoc_insertion_point(field_release:choreo.Point32Stamped.point)
  
  ::choreo::Point32* temp = point_;
  point_ = NULL;
  return temp;
}
void Point32Stamped::set_allocated_point(::choreo::Point32* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point32Stamped.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointStamped::kHeaderFieldNumber;
const int PointStamped::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointStamped::PointStamped()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.PointStamped)
}
PointStamped::PointStamped(const PointStamped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_point()) {
    point_ = new ::choreo::Point(*from.point_);
  } else {
    point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.PointStamped)
}

void PointStamped::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&point_) -
    reinterpret_cast<char*>(&header_) + sizeof(point_));
  _cached_size_ = 0;
}

PointStamped::~PointStamped() {
  // @@protoc_insertion_point(destructor:choreo.PointStamped)
  SharedDtor();
}

void PointStamped::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete point_;
  }
}

void PointStamped::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointStamped::descriptor() {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PointStamped& PointStamped::default_instance() {
  protobuf_geometric_2fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointStamped* PointStamped::New(::google::protobuf::Arena* arena) const {
  PointStamped* n = new PointStamped;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointStamped::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.PointStamped)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && point_ != NULL) {
    delete point_;
  }
  point_ = NULL;
}

bool PointStamped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.PointStamped)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Point point = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.PointStamped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.PointStamped)
  return false;
#undef DO_
}

void PointStamped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.PointStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Point point = 2;
  if (this->has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->point_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.PointStamped)
}

::google::protobuf::uint8* PointStamped::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.PointStamped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Point point = 2;
  if (this->has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->point_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.PointStamped)
  return target;
}

size_t PointStamped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.PointStamped)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Point point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointStamped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.PointStamped)
  GOOGLE_DCHECK_NE(&from, this);
  const PointStamped* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PointStamped>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.PointStamped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.PointStamped)
    MergeFrom(*source);
  }
}

void PointStamped::MergeFrom(const PointStamped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.PointStamped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_point()) {
    mutable_point()->::choreo::Point::MergeFrom(from.point());
  }
}

void PointStamped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.PointStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointStamped::CopyFrom(const PointStamped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.PointStamped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointStamped::IsInitialized() const {
  return true;
}

void PointStamped::Swap(PointStamped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointStamped::InternalSwap(PointStamped* other) {
  std::swap(header_, other->header_);
  std::swap(point_, other->point_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointStamped::GetMetadata() const {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointStamped

// .choreo.Header header = 1;
bool PointStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void PointStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& PointStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.PointStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* PointStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PointStamped.header)
  return header_;
}
::choreo::Header* PointStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.PointStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PointStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PointStamped.header)
}

// .choreo.Point point = 2;
bool PointStamped::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
void PointStamped::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
const ::choreo::Point& PointStamped::point() const {
  // @@protoc_insertion_point(field_get:choreo.PointStamped.point)
  return point_ != NULL ? *point_
                         : *::choreo::Point::internal_default_instance();
}
::choreo::Point* PointStamped::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::choreo::Point;
  }
  // @@protoc_insertion_point(field_mutable:choreo.PointStamped.point)
  return point_;
}
::choreo::Point* PointStamped::release_point() {
  // @@protoc_insertion_point(field_release:choreo.PointStamped.point)
  
  ::choreo::Point* temp = point_;
  point_ = NULL;
  return temp;
}
void PointStamped::set_allocated_point(::choreo::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.PointStamped.point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point32::kXFieldNumber;
const int Point32::kYFieldNumber;
const int Point32::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point32::Point32()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Point32)
}
Point32::Point32(const Point32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::choreo::Float32(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::choreo::Float32(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_z()) {
    z_ = new ::choreo::Float32(*from.z_);
  } else {
    z_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Point32)
}

void Point32::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Point32::~Point32() {
  // @@protoc_insertion_point(destructor:choreo.Point32)
  SharedDtor();
}

void Point32::SharedDtor() {
  if (this != internal_default_instance()) {
    delete x_;
  }
  if (this != internal_default_instance()) {
    delete y_;
  }
  if (this != internal_default_instance()) {
    delete z_;
  }
}

void Point32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point32::descriptor() {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point32& Point32::default_instance() {
  protobuf_geometric_2fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point32* Point32::New(::google::protobuf::Arena* arena) const {
  Point32* n = new Point32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point32::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Point32)
  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
}

bool Point32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Point32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Float32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float32 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Point32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Point32)
  return false;
#undef DO_
}

void Point32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Point32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Float32 x = 1;
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->x_, output);
  }

  // .choreo.Float32 y = 2;
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->y_, output);
  }

  // .choreo.Float32 z = 3;
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->z_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Point32)
}

::google::protobuf::uint8* Point32::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Point32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Float32 x = 1;
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->x_, deterministic, target);
  }

  // .choreo.Float32 y = 2;
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->y_, deterministic, target);
  }

  // .choreo.Float32 z = 3;
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->z_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Point32)
  return target;
}

size_t Point32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Point32)
  size_t total_size = 0;

  // .choreo.Float32 x = 1;
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->x_);
  }

  // .choreo.Float32 y = 2;
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->y_);
  }

  // .choreo.Float32 z = 3;
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->z_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Point32)
  GOOGLE_DCHECK_NE(&from, this);
  const Point32* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point32>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Point32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Point32)
    MergeFrom(*source);
  }
}

void Point32::MergeFrom(const Point32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Point32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::choreo::Float32::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::choreo::Float32::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::choreo::Float32::MergeFrom(from.z());
  }
}

void Point32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Point32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point32::CopyFrom(const Point32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Point32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point32::IsInitialized() const {
  return true;
}

void Point32::Swap(Point32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point32::InternalSwap(Point32* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point32::GetMetadata() const {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point32

// .choreo.Float32 x = 1;
bool Point32::has_x() const {
  return this != internal_default_instance() && x_ != NULL;
}
void Point32::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) delete x_;
  x_ = NULL;
}
const ::choreo::Float32& Point32::x() const {
  // @@protoc_insertion_point(field_get:choreo.Point32.x)
  return x_ != NULL ? *x_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* Point32::mutable_x() {
  
  if (x_ == NULL) {
    x_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point32.x)
  return x_;
}
::choreo::Float32* Point32::release_x() {
  // @@protoc_insertion_point(field_release:choreo.Point32.x)
  
  ::choreo::Float32* temp = x_;
  x_ = NULL;
  return temp;
}
void Point32::set_allocated_x(::choreo::Float32* x) {
  delete x_;
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point32.x)
}

// .choreo.Float32 y = 2;
bool Point32::has_y() const {
  return this != internal_default_instance() && y_ != NULL;
}
void Point32::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) delete y_;
  y_ = NULL;
}
const ::choreo::Float32& Point32::y() const {
  // @@protoc_insertion_point(field_get:choreo.Point32.y)
  return y_ != NULL ? *y_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* Point32::mutable_y() {
  
  if (y_ == NULL) {
    y_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point32.y)
  return y_;
}
::choreo::Float32* Point32::release_y() {
  // @@protoc_insertion_point(field_release:choreo.Point32.y)
  
  ::choreo::Float32* temp = y_;
  y_ = NULL;
  return temp;
}
void Point32::set_allocated_y(::choreo::Float32* y) {
  delete y_;
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point32.y)
}

// .choreo.Float32 z = 3;
bool Point32::has_z() const {
  return this != internal_default_instance() && z_ != NULL;
}
void Point32::clear_z() {
  if (GetArenaNoVirtual() == NULL && z_ != NULL) delete z_;
  z_ = NULL;
}
const ::choreo::Float32& Point32::z() const {
  // @@protoc_insertion_point(field_get:choreo.Point32.z)
  return z_ != NULL ? *z_
                         : *::choreo::Float32::internal_default_instance();
}
::choreo::Float32* Point32::mutable_z() {
  
  if (z_ == NULL) {
    z_ = new ::choreo::Float32;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point32.z)
  return z_;
}
::choreo::Float32* Point32::release_z() {
  // @@protoc_insertion_point(field_release:choreo.Point32.z)
  
  ::choreo::Float32* temp = z_;
  z_ = NULL;
  return temp;
}
void Point32::set_allocated_z(::choreo::Float32* z) {
  delete z_;
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point32.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_geometric_2fpoint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_x()) {
    x_ = new ::choreo::Float64(*from.x_);
  } else {
    x_ = NULL;
  }
  if (from.has_y()) {
    y_ = new ::choreo::Float64(*from.y_);
  } else {
    y_ = NULL;
  }
  if (from.has_z()) {
    z_ = new ::choreo::Float64(*from.z_);
  } else {
    z_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  _cached_size_ = 0;
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:choreo.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != internal_default_instance()) {
    delete x_;
  }
  if (this != internal_default_instance()) {
    delete y_;
  }
  if (this != internal_default_instance()) {
    delete z_;
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  protobuf_geometric_2fpoint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Point)
  if (GetArenaNoVirtual() == NULL && x_ != NULL) {
    delete x_;
  }
  x_ = NULL;
  if (GetArenaNoVirtual() == NULL && y_ != NULL) {
    delete y_;
  }
  y_ = NULL;
  if (GetArenaNoVirtual() == NULL && z_ != NULL) {
    delete z_;
  }
  z_ = NULL;
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Float64 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Float64 z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_z()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Float64 x = 1;
  if (this->has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->x_, output);
  }

  // .choreo.Float64 y = 2;
  if (this->has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->y_, output);
  }

  // .choreo.Float64 z = 3;
  if (this->has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->z_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Float64 x = 1;
  if (this->has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->x_, deterministic, target);
  }

  // .choreo.Float64 y = 2;
  if (this->has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->y_, deterministic, target);
  }

  // .choreo.Float64 z = 3;
  if (this->has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->z_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Point)
  size_t total_size = 0;

  // .choreo.Float64 x = 1;
  if (this->has_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->x_);
  }

  // .choreo.Float64 y = 2;
  if (this->has_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->y_);
  }

  // .choreo.Float64 z = 3;
  if (this->has_z()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->z_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_x()) {
    mutable_x()->::choreo::Float64::MergeFrom(from.x());
  }
  if (from.has_y()) {
    mutable_y()->::choreo::Float64::MergeFrom(from.y());
  }
  if (from.has_z()) {
    mutable_z()->::choreo::Float64::MergeFrom(from.z());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_geometric_2fpoint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_geometric_2fpoint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// .choreo.Float64 x = 1;
bool Point::has_x() const {
  return this != internal_default_instance() && x_ != NULL;
}
void Point::clear_x() {
  if (GetArenaNoVirtual() == NULL && x_ != NULL) delete x_;
  x_ = NULL;
}
const ::choreo::Float64& Point::x() const {
  // @@protoc_insertion_point(field_get:choreo.Point.x)
  return x_ != NULL ? *x_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Point::mutable_x() {
  
  if (x_ == NULL) {
    x_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point.x)
  return x_;
}
::choreo::Float64* Point::release_x() {
  // @@protoc_insertion_point(field_release:choreo.Point.x)
  
  ::choreo::Float64* temp = x_;
  x_ = NULL;
  return temp;
}
void Point::set_allocated_x(::choreo::Float64* x) {
  delete x_;
  x_ = x;
  if (x) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point.x)
}

// .choreo.Float64 y = 2;
bool Point::has_y() const {
  return this != internal_default_instance() && y_ != NULL;
}
void Point::clear_y() {
  if (GetArenaNoVirtual() == NULL && y_ != NULL) delete y_;
  y_ = NULL;
}
const ::choreo::Float64& Point::y() const {
  // @@protoc_insertion_point(field_get:choreo.Point.y)
  return y_ != NULL ? *y_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Point::mutable_y() {
  
  if (y_ == NULL) {
    y_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point.y)
  return y_;
}
::choreo::Float64* Point::release_y() {
  // @@protoc_insertion_point(field_release:choreo.Point.y)
  
  ::choreo::Float64* temp = y_;
  y_ = NULL;
  return temp;
}
void Point::set_allocated_y(::choreo::Float64* y) {
  delete y_;
  y_ = y;
  if (y) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point.y)
}

// .choreo.Float64 z = 3;
bool Point::has_z() const {
  return this != internal_default_instance() && z_ != NULL;
}
void Point::clear_z() {
  if (GetArenaNoVirtual() == NULL && z_ != NULL) delete z_;
  z_ = NULL;
}
const ::choreo::Float64& Point::z() const {
  // @@protoc_insertion_point(field_get:choreo.Point.z)
  return z_ != NULL ? *z_
                         : *::choreo::Float64::internal_default_instance();
}
::choreo::Float64* Point::mutable_z() {
  
  if (z_ == NULL) {
    z_ = new ::choreo::Float64;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Point.z)
  return z_;
}
::choreo::Float64* Point::release_z() {
  // @@protoc_insertion_point(field_release:choreo.Point.z)
  
  ::choreo::Float64* temp = z_;
  z_ = NULL;
  return temp;
}
void Point::set_allocated_z(::choreo::Float64* z) {
  delete z_;
  z_ = z;
  if (z) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
