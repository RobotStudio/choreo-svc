// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometric/accel.proto

#ifndef PROTOBUF_geometric_2faccel_2eproto__INCLUDED
#define PROTOBUF_geometric_2faccel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "primitive/header.pb.h"
#include "primitive/float.pb.h"
#include "geometric/vector.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class Accel;
class AccelDefaultTypeInternal;
extern AccelDefaultTypeInternal _Accel_default_instance_;
class AccelStamped;
class AccelStampedDefaultTypeInternal;
extern AccelStampedDefaultTypeInternal _AccelStamped_default_instance_;
class AccelWithCovariance;
class AccelWithCovarianceDefaultTypeInternal;
extern AccelWithCovarianceDefaultTypeInternal _AccelWithCovariance_default_instance_;
class AccelWithCovarianceStamped;
class AccelWithCovarianceStampedDefaultTypeInternal;
extern AccelWithCovarianceStampedDefaultTypeInternal _AccelWithCovarianceStamped_default_instance_;
class Float;
class FloatDefaultTypeInternal;
extern FloatDefaultTypeInternal _Float_default_instance_;
class Float32;
class Float32DefaultTypeInternal;
extern Float32DefaultTypeInternal _Float32_default_instance_;
class Float32Array;
class Float32ArrayDefaultTypeInternal;
extern Float32ArrayDefaultTypeInternal _Float32Array_default_instance_;
class Float64;
class Float64DefaultTypeInternal;
extern Float64DefaultTypeInternal _Float64_default_instance_;
class Float64Array;
class Float64ArrayDefaultTypeInternal;
extern Float64ArrayDefaultTypeInternal _Float64Array_default_instance_;
class FloatArray;
class FloatArrayDefaultTypeInternal;
extern FloatArrayDefaultTypeInternal _FloatArray_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class Vector3Stamped;
class Vector3StampedDefaultTypeInternal;
extern Vector3StampedDefaultTypeInternal _Vector3Stamped_default_instance_;
}  // namespace choreo

namespace choreo {

namespace protobuf_geometric_2faccel_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_geometric_2faccel_2eproto

// ===================================================================

class AccelStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.AccelStamped) */ {
 public:
  AccelStamped();
  virtual ~AccelStamped();

  AccelStamped(const AccelStamped& from);

  inline AccelStamped& operator=(const AccelStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccelStamped& default_instance();

  static inline const AccelStamped* internal_default_instance() {
    return reinterpret_cast<const AccelStamped*>(
               &_AccelStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AccelStamped* other);

  // implements Message ----------------------------------------------

  inline AccelStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  AccelStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccelStamped& from);
  void MergeFrom(const AccelStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccelStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.Accel accel = 2;
  bool has_accel() const;
  void clear_accel();
  static const int kAccelFieldNumber = 2;
  const ::choreo::Accel& accel() const;
  ::choreo::Accel* mutable_accel();
  ::choreo::Accel* release_accel();
  void set_allocated_accel(::choreo::Accel* accel);

  // @@protoc_insertion_point(class_scope:choreo.AccelStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::Accel* accel_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2faccel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccelWithCovarianceStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.AccelWithCovarianceStamped) */ {
 public:
  AccelWithCovarianceStamped();
  virtual ~AccelWithCovarianceStamped();

  AccelWithCovarianceStamped(const AccelWithCovarianceStamped& from);

  inline AccelWithCovarianceStamped& operator=(const AccelWithCovarianceStamped& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccelWithCovarianceStamped& default_instance();

  static inline const AccelWithCovarianceStamped* internal_default_instance() {
    return reinterpret_cast<const AccelWithCovarianceStamped*>(
               &_AccelWithCovarianceStamped_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AccelWithCovarianceStamped* other);

  // implements Message ----------------------------------------------

  inline AccelWithCovarianceStamped* New() const PROTOBUF_FINAL { return New(NULL); }

  AccelWithCovarianceStamped* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccelWithCovarianceStamped& from);
  void MergeFrom(const AccelWithCovarianceStamped& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccelWithCovarianceStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // .choreo.AccelWithCovariance accel = 2;
  bool has_accel() const;
  void clear_accel();
  static const int kAccelFieldNumber = 2;
  const ::choreo::AccelWithCovariance& accel() const;
  ::choreo::AccelWithCovariance* mutable_accel();
  ::choreo::AccelWithCovariance* release_accel();
  void set_allocated_accel(::choreo::AccelWithCovariance* accel);

  // @@protoc_insertion_point(class_scope:choreo.AccelWithCovarianceStamped)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Header* header_;
  ::choreo::AccelWithCovariance* accel_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2faccel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AccelWithCovariance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.AccelWithCovariance) */ {
 public:
  AccelWithCovariance();
  virtual ~AccelWithCovariance();

  AccelWithCovariance(const AccelWithCovariance& from);

  inline AccelWithCovariance& operator=(const AccelWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccelWithCovariance& default_instance();

  static inline const AccelWithCovariance* internal_default_instance() {
    return reinterpret_cast<const AccelWithCovariance*>(
               &_AccelWithCovariance_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(AccelWithCovariance* other);

  // implements Message ----------------------------------------------

  inline AccelWithCovariance* New() const PROTOBUF_FINAL { return New(NULL); }

  AccelWithCovariance* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AccelWithCovariance& from);
  void MergeFrom(const AccelWithCovariance& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AccelWithCovariance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .choreo.Float64 covariance = 2;
  int covariance_size() const;
  void clear_covariance();
  static const int kCovarianceFieldNumber = 2;
  const ::choreo::Float64& covariance(int index) const;
  ::choreo::Float64* mutable_covariance(int index);
  ::choreo::Float64* add_covariance();
  ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
      mutable_covariance();
  const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
      covariance() const;

  // .choreo.Accel accel = 1;
  bool has_accel() const;
  void clear_accel();
  static const int kAccelFieldNumber = 1;
  const ::choreo::Accel& accel() const;
  ::choreo::Accel* mutable_accel();
  ::choreo::Accel* release_accel();
  void set_allocated_accel(::choreo::Accel* accel);

  // @@protoc_insertion_point(class_scope:choreo.AccelWithCovariance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::choreo::Float64 > covariance_;
  ::choreo::Accel* accel_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2faccel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Accel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.Accel) */ {
 public:
  Accel();
  virtual ~Accel();

  Accel(const Accel& from);

  inline Accel& operator=(const Accel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Accel& default_instance();

  static inline const Accel* internal_default_instance() {
    return reinterpret_cast<const Accel*>(
               &_Accel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Accel* other);

  // implements Message ----------------------------------------------

  inline Accel* New() const PROTOBUF_FINAL { return New(NULL); }

  Accel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Accel& from);
  void MergeFrom(const Accel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Accel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .choreo.Vector3 linear = 1;
  bool has_linear() const;
  void clear_linear();
  static const int kLinearFieldNumber = 1;
  const ::choreo::Vector3& linear() const;
  ::choreo::Vector3* mutable_linear();
  ::choreo::Vector3* release_linear();
  void set_allocated_linear(::choreo::Vector3* linear);

  // .choreo.Vector3 angular = 2;
  bool has_angular() const;
  void clear_angular();
  static const int kAngularFieldNumber = 2;
  const ::choreo::Vector3& angular() const;
  ::choreo::Vector3* mutable_angular();
  ::choreo::Vector3* release_angular();
  void set_allocated_angular(::choreo::Vector3* angular);

  // @@protoc_insertion_point(class_scope:choreo.Accel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::Vector3* linear_;
  ::choreo::Vector3* angular_;
  mutable int _cached_size_;
  friend struct protobuf_geometric_2faccel_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AccelStamped

// .choreo.Header header = 1;
inline bool AccelStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AccelStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& AccelStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.AccelStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* AccelStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelStamped.header)
  return header_;
}
inline ::choreo::Header* AccelStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.AccelStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void AccelStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelStamped.header)
}

// .choreo.Accel accel = 2;
inline bool AccelStamped::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
inline void AccelStamped::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) delete accel_;
  accel_ = NULL;
}
inline const ::choreo::Accel& AccelStamped::accel() const {
  // @@protoc_insertion_point(field_get:choreo.AccelStamped.accel)
  return accel_ != NULL ? *accel_
                         : *::choreo::Accel::internal_default_instance();
}
inline ::choreo::Accel* AccelStamped::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::choreo::Accel;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelStamped.accel)
  return accel_;
}
inline ::choreo::Accel* AccelStamped::release_accel() {
  // @@protoc_insertion_point(field_release:choreo.AccelStamped.accel)
  
  ::choreo::Accel* temp = accel_;
  accel_ = NULL;
  return temp;
}
inline void AccelStamped::set_allocated_accel(::choreo::Accel* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelStamped.accel)
}

// -------------------------------------------------------------------

// AccelWithCovarianceStamped

// .choreo.Header header = 1;
inline bool AccelWithCovarianceStamped::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void AccelWithCovarianceStamped::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& AccelWithCovarianceStamped::header() const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovarianceStamped.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* AccelWithCovarianceStamped::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovarianceStamped.header)
  return header_;
}
inline ::choreo::Header* AccelWithCovarianceStamped::release_header() {
  // @@protoc_insertion_point(field_release:choreo.AccelWithCovarianceStamped.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void AccelWithCovarianceStamped::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelWithCovarianceStamped.header)
}

// .choreo.AccelWithCovariance accel = 2;
inline bool AccelWithCovarianceStamped::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
inline void AccelWithCovarianceStamped::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) delete accel_;
  accel_ = NULL;
}
inline const ::choreo::AccelWithCovariance& AccelWithCovarianceStamped::accel() const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovarianceStamped.accel)
  return accel_ != NULL ? *accel_
                         : *::choreo::AccelWithCovariance::internal_default_instance();
}
inline ::choreo::AccelWithCovariance* AccelWithCovarianceStamped::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::choreo::AccelWithCovariance;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovarianceStamped.accel)
  return accel_;
}
inline ::choreo::AccelWithCovariance* AccelWithCovarianceStamped::release_accel() {
  // @@protoc_insertion_point(field_release:choreo.AccelWithCovarianceStamped.accel)
  
  ::choreo::AccelWithCovariance* temp = accel_;
  accel_ = NULL;
  return temp;
}
inline void AccelWithCovarianceStamped::set_allocated_accel(::choreo::AccelWithCovariance* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelWithCovarianceStamped.accel)
}

// -------------------------------------------------------------------

// AccelWithCovariance

// .choreo.Accel accel = 1;
inline bool AccelWithCovariance::has_accel() const {
  return this != internal_default_instance() && accel_ != NULL;
}
inline void AccelWithCovariance::clear_accel() {
  if (GetArenaNoVirtual() == NULL && accel_ != NULL) delete accel_;
  accel_ = NULL;
}
inline const ::choreo::Accel& AccelWithCovariance::accel() const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovariance.accel)
  return accel_ != NULL ? *accel_
                         : *::choreo::Accel::internal_default_instance();
}
inline ::choreo::Accel* AccelWithCovariance::mutable_accel() {
  
  if (accel_ == NULL) {
    accel_ = new ::choreo::Accel;
  }
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovariance.accel)
  return accel_;
}
inline ::choreo::Accel* AccelWithCovariance::release_accel() {
  // @@protoc_insertion_point(field_release:choreo.AccelWithCovariance.accel)
  
  ::choreo::Accel* temp = accel_;
  accel_ = NULL;
  return temp;
}
inline void AccelWithCovariance::set_allocated_accel(::choreo::Accel* accel) {
  delete accel_;
  accel_ = accel;
  if (accel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.AccelWithCovariance.accel)
}

// repeated .choreo.Float64 covariance = 2;
inline int AccelWithCovariance::covariance_size() const {
  return covariance_.size();
}
inline void AccelWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline const ::choreo::Float64& AccelWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:choreo.AccelWithCovariance.covariance)
  return covariance_.Get(index);
}
inline ::choreo::Float64* AccelWithCovariance::mutable_covariance(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.AccelWithCovariance.covariance)
  return covariance_.Mutable(index);
}
inline ::choreo::Float64* AccelWithCovariance::add_covariance() {
  // @@protoc_insertion_point(field_add:choreo.AccelWithCovariance.covariance)
  return covariance_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
AccelWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:choreo.AccelWithCovariance.covariance)
  return &covariance_;
}
inline const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
AccelWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:choreo.AccelWithCovariance.covariance)
  return covariance_;
}

// -------------------------------------------------------------------

// Accel

// .choreo.Vector3 linear = 1;
inline bool Accel::has_linear() const {
  return this != internal_default_instance() && linear_ != NULL;
}
inline void Accel::clear_linear() {
  if (GetArenaNoVirtual() == NULL && linear_ != NULL) delete linear_;
  linear_ = NULL;
}
inline const ::choreo::Vector3& Accel::linear() const {
  // @@protoc_insertion_point(field_get:choreo.Accel.linear)
  return linear_ != NULL ? *linear_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Accel::mutable_linear() {
  
  if (linear_ == NULL) {
    linear_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Accel.linear)
  return linear_;
}
inline ::choreo::Vector3* Accel::release_linear() {
  // @@protoc_insertion_point(field_release:choreo.Accel.linear)
  
  ::choreo::Vector3* temp = linear_;
  linear_ = NULL;
  return temp;
}
inline void Accel::set_allocated_linear(::choreo::Vector3* linear) {
  delete linear_;
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Accel.linear)
}

// .choreo.Vector3 angular = 2;
inline bool Accel::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
inline void Accel::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
inline const ::choreo::Vector3& Accel::angular() const {
  // @@protoc_insertion_point(field_get:choreo.Accel.angular)
  return angular_ != NULL ? *angular_
                         : *::choreo::Vector3::internal_default_instance();
}
inline ::choreo::Vector3* Accel::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::choreo::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:choreo.Accel.angular)
  return angular_;
}
inline ::choreo::Vector3* Accel::release_angular() {
  // @@protoc_insertion_point(field_release:choreo.Accel.angular)
  
  ::choreo::Vector3* temp = angular_;
  angular_ = NULL;
  return temp;
}
inline void Accel::set_allocated_angular(::choreo::Vector3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.Accel.angular)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometric_2faccel_2eproto__INCLUDED
