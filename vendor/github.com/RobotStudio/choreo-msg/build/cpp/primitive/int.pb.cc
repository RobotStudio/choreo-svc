// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitive/int.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "primitive/int.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class Int32ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Int32Array> {
} _Int32Array_default_instance_;
class Int32DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Int32> {
} _Int32_default_instance_;
class Int64ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Int64Array> {
} _Int64Array_default_instance_;
class Int64DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Int64> {
} _Int64_default_instance_;
class SInt32ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SInt32Array> {
} _SInt32Array_default_instance_;
class SInt32DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SInt32> {
} _SInt32_default_instance_;
class SInt64ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SInt64Array> {
} _SInt64Array_default_instance_;
class SInt64DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SInt64> {
} _SInt64_default_instance_;
class UInt32ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UInt32Array> {
} _UInt32Array_default_instance_;
class UInt32DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UInt32> {
} _UInt32_default_instance_;
class UInt64ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UInt64Array> {
} _UInt64Array_default_instance_;
class UInt64DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UInt64> {
} _UInt64_default_instance_;

namespace protobuf_primitive_2fint_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[12];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int32, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Int64, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt32, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SInt64, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt32, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UInt64, data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Int32Array)},
  { 6, -1, sizeof(Int32)},
  { 12, -1, sizeof(Int64Array)},
  { 18, -1, sizeof(Int64)},
  { 24, -1, sizeof(SInt32Array)},
  { 30, -1, sizeof(SInt32)},
  { 36, -1, sizeof(SInt64Array)},
  { 42, -1, sizeof(SInt64)},
  { 48, -1, sizeof(UInt32Array)},
  { 54, -1, sizeof(UInt32)},
  { 60, -1, sizeof(UInt64Array)},
  { 66, -1, sizeof(UInt64)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Int32Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Int32_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Int64Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Int64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SInt32Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SInt32_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SInt64Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SInt64_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UInt32Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UInt32_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UInt64Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UInt64_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "primitive/int.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

}  // namespace

void TableStruct::Shutdown() {
  _Int32Array_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Int32_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Int64Array_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Int64_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SInt32Array_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _SInt32_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _SInt64Array_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _SInt64_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _UInt32Array_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _UInt32_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _UInt64Array_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _UInt64_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Int32Array_default_instance_.DefaultConstruct();
  _Int32_default_instance_.DefaultConstruct();
  _Int64Array_default_instance_.DefaultConstruct();
  _Int64_default_instance_.DefaultConstruct();
  _SInt32Array_default_instance_.DefaultConstruct();
  _SInt32_default_instance_.DefaultConstruct();
  _SInt64Array_default_instance_.DefaultConstruct();
  _SInt64_default_instance_.DefaultConstruct();
  _UInt32Array_default_instance_.DefaultConstruct();
  _UInt32_default_instance_.DefaultConstruct();
  _UInt64Array_default_instance_.DefaultConstruct();
  _UInt64_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023primitive/int.proto\022\006choreo\")\n\nInt32Ar"
      "ray\022\033\n\004data\030\001 \003(\0132\r.choreo.Int32\"\025\n\005Int3"
      "2\022\014\n\004data\030\001 \001(\005\")\n\nInt64Array\022\033\n\004data\030\001 "
      "\003(\0132\r.choreo.Int64\"\025\n\005Int64\022\014\n\004data\030\001 \001("
      "\003\"+\n\013SInt32Array\022\034\n\004data\030\001 \003(\0132\016.choreo."
      "SInt32\"\026\n\006SInt32\022\014\n\004data\030\001 \001(\005\"+\n\013SInt64"
      "Array\022\034\n\004data\030\001 \003(\0132\016.choreo.SInt64\"\026\n\006S"
      "Int64\022\014\n\004data\030\001 \001(\003\"+\n\013UInt32Array\022\034\n\004da"
      "ta\030\001 \003(\0132\016.choreo.UInt32\"\026\n\006UInt32\022\014\n\004da"
      "ta\030\001 \001(\r\"+\n\013UInt64Array\022\034\n\004data\030\001 \003(\0132\016."
      "choreo.UInt64\"\026\n\006UInt64\022\014\n\004data\030\001 \001(\004B+Z"
      ")github.com/RobotStudio/choreo-msg/msg;m"
      "sgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "primitive/int.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_primitive_2fint_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int32Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int32Array::Int32Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Int32Array)
}
Int32Array::Int32Array(const Int32Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.Int32Array)
}

void Int32Array::SharedCtor() {
  _cached_size_ = 0;
}

Int32Array::~Int32Array() {
  // @@protoc_insertion_point(destructor:choreo.Int32Array)
  SharedDtor();
}

void Int32Array::SharedDtor() {
}

void Int32Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int32Array::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int32Array& Int32Array::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Int32Array* Int32Array::New(::google::protobuf::Arena* arena) const {
  Int32Array* n = new Int32Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int32Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Int32Array)
  data_.Clear();
}

bool Int32Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Int32Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.Int32 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Int32Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Int32Array)
  return false;
#undef DO_
}

void Int32Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Int32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Int32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Int32Array)
}

::google::protobuf::uint8* Int32Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Int32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Int32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Int32Array)
  return target;
}

size_t Int32Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Int32Array)
  size_t total_size = 0;

  // repeated .choreo.Int32 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int32Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Int32Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Int32Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int32Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Int32Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Int32Array)
    MergeFrom(*source);
  }
}

void Int32Array::MergeFrom(const Int32Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Int32Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void Int32Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Int32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32Array::CopyFrom(const Int32Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Int32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Array::IsInitialized() const {
  return true;
}

void Int32Array::Swap(Int32Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int32Array::InternalSwap(Int32Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int32Array::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int32Array

// repeated .choreo.Int32 data = 1;
int Int32Array::data_size() const {
  return data_.size();
}
void Int32Array::clear_data() {
  data_.Clear();
}
const ::choreo::Int32& Int32Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Int32Array.data)
  return data_.Get(index);
}
::choreo::Int32* Int32Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Int32Array.data)
  return data_.Mutable(index);
}
::choreo::Int32* Int32Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.Int32Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Int32 >*
Int32Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Int32Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Int32 >&
Int32Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.Int32Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int32::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int32::Int32()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Int32)
}
Int32::Int32(const Int32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.Int32)
}

void Int32::SharedCtor() {
  data_ = 0;
  _cached_size_ = 0;
}

Int32::~Int32() {
  // @@protoc_insertion_point(destructor:choreo.Int32)
  SharedDtor();
}

void Int32::SharedDtor() {
}

void Int32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int32::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int32& Int32::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Int32* Int32::New(::google::protobuf::Arena* arena) const {
  Int32* n = new Int32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int32::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Int32)
  data_ = 0;
}

bool Int32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Int32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Int32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Int32)
  return false;
#undef DO_
}

void Int32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Int32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Int32)
}

::google::protobuf::uint8* Int32::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Int32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Int32)
  return target;
}

size_t Int32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Int32)
  size_t total_size = 0;

  // int32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Int32)
  GOOGLE_DCHECK_NE(&from, this);
  const Int32* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int32>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Int32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Int32)
    MergeFrom(*source);
  }
}

void Int32::MergeFrom(const Int32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Int32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void Int32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Int32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32::CopyFrom(const Int32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Int32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32::IsInitialized() const {
  return true;
}

void Int32::Swap(Int32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int32::InternalSwap(Int32* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int32::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int32

// int32 data = 1;
void Int32::clear_data() {
  data_ = 0;
}
::google::protobuf::int32 Int32::data() const {
  // @@protoc_insertion_point(field_get:choreo.Int32.data)
  return data_;
}
void Int32::set_data(::google::protobuf::int32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.Int32.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64Array::Int64Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Int64Array)
}
Int64Array::Int64Array(const Int64Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.Int64Array)
}

void Int64Array::SharedCtor() {
  _cached_size_ = 0;
}

Int64Array::~Int64Array() {
  // @@protoc_insertion_point(destructor:choreo.Int64Array)
  SharedDtor();
}

void Int64Array::SharedDtor() {
}

void Int64Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int64Array::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int64Array& Int64Array::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Int64Array* Int64Array::New(::google::protobuf::Arena* arena) const {
  Int64Array* n = new Int64Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int64Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Int64Array)
  data_.Clear();
}

bool Int64Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Int64Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.Int64 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Int64Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Int64Array)
  return false;
#undef DO_
}

void Int64Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Int64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Int64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Int64Array)
}

::google::protobuf::uint8* Int64Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Int64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Int64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Int64Array)
  return target;
}

size_t Int64Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Int64Array)
  size_t total_size = 0;

  // repeated .choreo.Int64 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int64Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Int64Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int64Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Int64Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Int64Array)
    MergeFrom(*source);
  }
}

void Int64Array::MergeFrom(const Int64Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Int64Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void Int64Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Int64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64Array::CopyFrom(const Int64Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Int64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64Array::IsInitialized() const {
  return true;
}

void Int64Array::Swap(Int64Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64Array::InternalSwap(Int64Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int64Array::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int64Array

// repeated .choreo.Int64 data = 1;
int Int64Array::data_size() const {
  return data_.size();
}
void Int64Array::clear_data() {
  data_.Clear();
}
const ::choreo::Int64& Int64Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Int64Array.data)
  return data_.Get(index);
}
::choreo::Int64* Int64Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Int64Array.data)
  return data_.Mutable(index);
}
::choreo::Int64* Int64Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.Int64Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Int64 >*
Int64Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Int64Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Int64 >&
Int64Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.Int64Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Int64::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Int64::Int64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Int64)
}
Int64::Int64(const Int64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.Int64)
}

void Int64::SharedCtor() {
  data_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Int64::~Int64() {
  // @@protoc_insertion_point(destructor:choreo.Int64)
  SharedDtor();
}

void Int64::SharedDtor() {
}

void Int64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Int64::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Int64& Int64::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

Int64* Int64::New(::google::protobuf::Arena* arena) const {
  Int64* n = new Int64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Int64::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Int64)
  data_ = GOOGLE_LONGLONG(0);
}

bool Int64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Int64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Int64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Int64)
  return false;
#undef DO_
}

void Int64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Int64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Int64)
}

::google::protobuf::uint8* Int64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Int64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Int64)
  return target;
}

size_t Int64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Int64)
  size_t total_size = 0;

  // int64 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Int64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Int64)
  GOOGLE_DCHECK_NE(&from, this);
  const Int64* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Int64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Int64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Int64)
    MergeFrom(*source);
  }
}

void Int64::MergeFrom(const Int64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Int64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void Int64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Int64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int64::CopyFrom(const Int64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Int64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int64::IsInitialized() const {
  return true;
}

void Int64::Swap(Int64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Int64::InternalSwap(Int64* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Int64::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Int64

// int64 data = 1;
void Int64::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Int64::data() const {
  // @@protoc_insertion_point(field_get:choreo.Int64.data)
  return data_;
}
void Int64::set_data(::google::protobuf::int64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.Int64.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt32Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt32Array::SInt32Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.SInt32Array)
}
SInt32Array::SInt32Array(const SInt32Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.SInt32Array)
}

void SInt32Array::SharedCtor() {
  _cached_size_ = 0;
}

SInt32Array::~SInt32Array() {
  // @@protoc_insertion_point(destructor:choreo.SInt32Array)
  SharedDtor();
}

void SInt32Array::SharedDtor() {
}

void SInt32Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt32Array::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SInt32Array& SInt32Array::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SInt32Array* SInt32Array::New(::google::protobuf::Arena* arena) const {
  SInt32Array* n = new SInt32Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt32Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.SInt32Array)
  data_.Clear();
}

bool SInt32Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.SInt32Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.SInt32 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.SInt32Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.SInt32Array)
  return false;
#undef DO_
}

void SInt32Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.SInt32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.SInt32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.SInt32Array)
}

::google::protobuf::uint8* SInt32Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.SInt32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.SInt32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.SInt32Array)
  return target;
}

size_t SInt32Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.SInt32Array)
  size_t total_size = 0;

  // repeated .choreo.SInt32 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt32Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.SInt32Array)
  GOOGLE_DCHECK_NE(&from, this);
  const SInt32Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt32Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.SInt32Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.SInt32Array)
    MergeFrom(*source);
  }
}

void SInt32Array::MergeFrom(const SInt32Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.SInt32Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SInt32Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.SInt32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt32Array::CopyFrom(const SInt32Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.SInt32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt32Array::IsInitialized() const {
  return true;
}

void SInt32Array::Swap(SInt32Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt32Array::InternalSwap(SInt32Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt32Array::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt32Array

// repeated .choreo.SInt32 data = 1;
int SInt32Array::data_size() const {
  return data_.size();
}
void SInt32Array::clear_data() {
  data_.Clear();
}
const ::choreo::SInt32& SInt32Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.SInt32Array.data)
  return data_.Get(index);
}
::choreo::SInt32* SInt32Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.SInt32Array.data)
  return data_.Mutable(index);
}
::choreo::SInt32* SInt32Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.SInt32Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::SInt32 >*
SInt32Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.SInt32Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::SInt32 >&
SInt32Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.SInt32Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt32::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt32::SInt32()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.SInt32)
}
SInt32::SInt32(const SInt32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.SInt32)
}

void SInt32::SharedCtor() {
  data_ = 0;
  _cached_size_ = 0;
}

SInt32::~SInt32() {
  // @@protoc_insertion_point(destructor:choreo.SInt32)
  SharedDtor();
}

void SInt32::SharedDtor() {
}

void SInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt32::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SInt32& SInt32::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SInt32* SInt32::New(::google::protobuf::Arena* arena) const {
  SInt32* n = new SInt32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.SInt32)
  data_ = 0;
}

bool SInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.SInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.SInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.SInt32)
  return false;
#undef DO_
}

void SInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.SInt32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.SInt32)
}

::google::protobuf::uint8* SInt32::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.SInt32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.SInt32)
  return target;
}

size_t SInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.SInt32)
  size_t total_size = 0;

  // int32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.SInt32)
  GOOGLE_DCHECK_NE(&from, this);
  const SInt32* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt32>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.SInt32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.SInt32)
    MergeFrom(*source);
  }
}

void SInt32::MergeFrom(const SInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.SInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void SInt32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.SInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt32::CopyFrom(const SInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.SInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt32::IsInitialized() const {
  return true;
}

void SInt32::Swap(SInt32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt32::InternalSwap(SInt32* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt32::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt32

// int32 data = 1;
void SInt32::clear_data() {
  data_ = 0;
}
::google::protobuf::int32 SInt32::data() const {
  // @@protoc_insertion_point(field_get:choreo.SInt32.data)
  return data_;
}
void SInt32::set_data(::google::protobuf::int32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.SInt32.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt64Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt64Array::SInt64Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.SInt64Array)
}
SInt64Array::SInt64Array(const SInt64Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.SInt64Array)
}

void SInt64Array::SharedCtor() {
  _cached_size_ = 0;
}

SInt64Array::~SInt64Array() {
  // @@protoc_insertion_point(destructor:choreo.SInt64Array)
  SharedDtor();
}

void SInt64Array::SharedDtor() {
}

void SInt64Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt64Array::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SInt64Array& SInt64Array::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SInt64Array* SInt64Array::New(::google::protobuf::Arena* arena) const {
  SInt64Array* n = new SInt64Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt64Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.SInt64Array)
  data_.Clear();
}

bool SInt64Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.SInt64Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.SInt64 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.SInt64Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.SInt64Array)
  return false;
#undef DO_
}

void SInt64Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.SInt64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.SInt64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.SInt64Array)
}

::google::protobuf::uint8* SInt64Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.SInt64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.SInt64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.SInt64Array)
  return target;
}

size_t SInt64Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.SInt64Array)
  size_t total_size = 0;

  // repeated .choreo.SInt64 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt64Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.SInt64Array)
  GOOGLE_DCHECK_NE(&from, this);
  const SInt64Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt64Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.SInt64Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.SInt64Array)
    MergeFrom(*source);
  }
}

void SInt64Array::MergeFrom(const SInt64Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.SInt64Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void SInt64Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.SInt64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt64Array::CopyFrom(const SInt64Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.SInt64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt64Array::IsInitialized() const {
  return true;
}

void SInt64Array::Swap(SInt64Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt64Array::InternalSwap(SInt64Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt64Array::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt64Array

// repeated .choreo.SInt64 data = 1;
int SInt64Array::data_size() const {
  return data_.size();
}
void SInt64Array::clear_data() {
  data_.Clear();
}
const ::choreo::SInt64& SInt64Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.SInt64Array.data)
  return data_.Get(index);
}
::choreo::SInt64* SInt64Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.SInt64Array.data)
  return data_.Mutable(index);
}
::choreo::SInt64* SInt64Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.SInt64Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::SInt64 >*
SInt64Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.SInt64Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::SInt64 >&
SInt64Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.SInt64Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SInt64::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SInt64::SInt64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.SInt64)
}
SInt64::SInt64(const SInt64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.SInt64)
}

void SInt64::SharedCtor() {
  data_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

SInt64::~SInt64() {
  // @@protoc_insertion_point(destructor:choreo.SInt64)
  SharedDtor();
}

void SInt64::SharedDtor() {
}

void SInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SInt64::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SInt64& SInt64::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

SInt64* SInt64::New(::google::protobuf::Arena* arena) const {
  SInt64* n = new SInt64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.SInt64)
  data_ = GOOGLE_LONGLONG(0);
}

bool SInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.SInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.SInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.SInt64)
  return false;
#undef DO_
}

void SInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.SInt64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.SInt64)
}

::google::protobuf::uint8* SInt64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.SInt64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.SInt64)
  return target;
}

size_t SInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.SInt64)
  size_t total_size = 0;

  // int64 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SInt64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.SInt64)
  GOOGLE_DCHECK_NE(&from, this);
  const SInt64* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SInt64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.SInt64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.SInt64)
    MergeFrom(*source);
  }
}

void SInt64::MergeFrom(const SInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.SInt64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void SInt64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.SInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SInt64::CopyFrom(const SInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.SInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SInt64::IsInitialized() const {
  return true;
}

void SInt64::Swap(SInt64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SInt64::InternalSwap(SInt64* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SInt64::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SInt64

// int64 data = 1;
void SInt64::clear_data() {
  data_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SInt64::data() const {
  // @@protoc_insertion_point(field_get:choreo.SInt64.data)
  return data_;
}
void SInt64::set_data(::google::protobuf::int64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.SInt64.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt32Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt32Array::UInt32Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.UInt32Array)
}
UInt32Array::UInt32Array(const UInt32Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.UInt32Array)
}

void UInt32Array::SharedCtor() {
  _cached_size_ = 0;
}

UInt32Array::~UInt32Array() {
  // @@protoc_insertion_point(destructor:choreo.UInt32Array)
  SharedDtor();
}

void UInt32Array::SharedDtor() {
}

void UInt32Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt32Array::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt32Array& UInt32Array::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

UInt32Array* UInt32Array::New(::google::protobuf::Arena* arena) const {
  UInt32Array* n = new UInt32Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt32Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.UInt32Array)
  data_.Clear();
}

bool UInt32Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.UInt32Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.UInt32 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.UInt32Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.UInt32Array)
  return false;
#undef DO_
}

void UInt32Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.UInt32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.UInt32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.UInt32Array)
}

::google::protobuf::uint8* UInt32Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.UInt32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.UInt32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.UInt32Array)
  return target;
}

size_t UInt32Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.UInt32Array)
  size_t total_size = 0;

  // repeated .choreo.UInt32 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt32Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.UInt32Array)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt32Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt32Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.UInt32Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.UInt32Array)
    MergeFrom(*source);
  }
}

void UInt32Array::MergeFrom(const UInt32Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.UInt32Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UInt32Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.UInt32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt32Array::CopyFrom(const UInt32Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.UInt32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32Array::IsInitialized() const {
  return true;
}

void UInt32Array::Swap(UInt32Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt32Array::InternalSwap(UInt32Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt32Array::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt32Array

// repeated .choreo.UInt32 data = 1;
int UInt32Array::data_size() const {
  return data_.size();
}
void UInt32Array::clear_data() {
  data_.Clear();
}
const ::choreo::UInt32& UInt32Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.UInt32Array.data)
  return data_.Get(index);
}
::choreo::UInt32* UInt32Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.UInt32Array.data)
  return data_.Mutable(index);
}
::choreo::UInt32* UInt32Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.UInt32Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::UInt32 >*
UInt32Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.UInt32Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::UInt32 >&
UInt32Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.UInt32Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt32::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt32::UInt32()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.UInt32)
}
UInt32::UInt32(const UInt32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.UInt32)
}

void UInt32::SharedCtor() {
  data_ = 0u;
  _cached_size_ = 0;
}

UInt32::~UInt32() {
  // @@protoc_insertion_point(destructor:choreo.UInt32)
  SharedDtor();
}

void UInt32::SharedDtor() {
}

void UInt32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt32::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt32& UInt32::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

UInt32* UInt32::New(::google::protobuf::Arena* arena) const {
  UInt32* n = new UInt32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.UInt32)
  data_ = 0u;
}

bool UInt32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.UInt32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.UInt32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.UInt32)
  return false;
#undef DO_
}

void UInt32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.UInt32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.UInt32)
}

::google::protobuf::uint8* UInt32::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.UInt32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.UInt32)
  return target;
}

size_t UInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.UInt32)
  size_t total_size = 0;

  // uint32 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.UInt32)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt32* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt32>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.UInt32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.UInt32)
    MergeFrom(*source);
  }
}

void UInt32::MergeFrom(const UInt32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.UInt32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void UInt32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.UInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt32::CopyFrom(const UInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.UInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt32::IsInitialized() const {
  return true;
}

void UInt32::Swap(UInt32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt32::InternalSwap(UInt32* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt32::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt32

// uint32 data = 1;
void UInt32::clear_data() {
  data_ = 0u;
}
::google::protobuf::uint32 UInt32::data() const {
  // @@protoc_insertion_point(field_get:choreo.UInt32.data)
  return data_;
}
void UInt32::set_data(::google::protobuf::uint32 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.UInt32.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64Array::UInt64Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.UInt64Array)
}
UInt64Array::UInt64Array(const UInt64Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.UInt64Array)
}

void UInt64Array::SharedCtor() {
  _cached_size_ = 0;
}

UInt64Array::~UInt64Array() {
  // @@protoc_insertion_point(destructor:choreo.UInt64Array)
  SharedDtor();
}

void UInt64Array::SharedDtor() {
}

void UInt64Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt64Array::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt64Array& UInt64Array::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

UInt64Array* UInt64Array::New(::google::protobuf::Arena* arena) const {
  UInt64Array* n = new UInt64Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt64Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.UInt64Array)
  data_.Clear();
}

bool UInt64Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.UInt64Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.UInt64 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.UInt64Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.UInt64Array)
  return false;
#undef DO_
}

void UInt64Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.UInt64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.UInt64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.UInt64Array)
}

::google::protobuf::uint8* UInt64Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.UInt64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.UInt64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.UInt64Array)
  return target;
}

size_t UInt64Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.UInt64Array)
  size_t total_size = 0;

  // repeated .choreo.UInt64 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt64Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.UInt64Array)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt64Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.UInt64Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.UInt64Array)
    MergeFrom(*source);
  }
}

void UInt64Array::MergeFrom(const UInt64Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.UInt64Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void UInt64Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.UInt64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64Array::CopyFrom(const UInt64Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.UInt64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64Array::IsInitialized() const {
  return true;
}

void UInt64Array::Swap(UInt64Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64Array::InternalSwap(UInt64Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt64Array::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt64Array

// repeated .choreo.UInt64 data = 1;
int UInt64Array::data_size() const {
  return data_.size();
}
void UInt64Array::clear_data() {
  data_.Clear();
}
const ::choreo::UInt64& UInt64Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.UInt64Array.data)
  return data_.Get(index);
}
::choreo::UInt64* UInt64Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.UInt64Array.data)
  return data_.Mutable(index);
}
::choreo::UInt64* UInt64Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.UInt64Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::UInt64 >*
UInt64Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.UInt64Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::UInt64 >&
UInt64Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.UInt64Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UInt64::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UInt64::UInt64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2fint_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.UInt64)
}
UInt64::UInt64(const UInt64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.UInt64)
}

void UInt64::SharedCtor() {
  data_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

UInt64::~UInt64() {
  // @@protoc_insertion_point(destructor:choreo.UInt64)
  SharedDtor();
}

void UInt64::SharedDtor() {
}

void UInt64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UInt64::descriptor() {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UInt64& UInt64::default_instance() {
  protobuf_primitive_2fint_2eproto::InitDefaults();
  return *internal_default_instance();
}

UInt64* UInt64::New(::google::protobuf::Arena* arena) const {
  UInt64* n = new UInt64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UInt64::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.UInt64)
  data_ = GOOGLE_ULONGLONG(0);
}

bool UInt64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.UInt64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.UInt64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.UInt64)
  return false;
#undef DO_
}

void UInt64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.UInt64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.UInt64)
}

::google::protobuf::uint8* UInt64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.UInt64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.UInt64)
  return target;
}

size_t UInt64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.UInt64)
  size_t total_size = 0;

  // uint64 data = 1;
  if (this->data() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UInt64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.UInt64)
  GOOGLE_DCHECK_NE(&from, this);
  const UInt64* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UInt64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.UInt64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.UInt64)
    MergeFrom(*source);
  }
}

void UInt64::MergeFrom(const UInt64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.UInt64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void UInt64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.UInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UInt64::CopyFrom(const UInt64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.UInt64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UInt64::IsInitialized() const {
  return true;
}

void UInt64::Swap(UInt64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UInt64::InternalSwap(UInt64* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UInt64::GetMetadata() const {
  protobuf_primitive_2fint_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2fint_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UInt64

// uint64 data = 1;
void UInt64::clear_data() {
  data_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 UInt64::data() const {
  // @@protoc_insertion_point(field_get:choreo.UInt64.data)
  return data_;
}
void UInt64::set_data(::google::protobuf::uint64 value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.UInt64.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
