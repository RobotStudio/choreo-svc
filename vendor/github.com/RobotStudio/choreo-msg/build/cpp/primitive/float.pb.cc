// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: primitive/float.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "primitive/float.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class FloatArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FloatArray> {
} _FloatArray_default_instance_;
class FloatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Float> {
} _Float_default_instance_;
class Float32ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Float32Array> {
} _Float32Array_default_instance_;
class Float32DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Float32> {
} _Float32_default_instance_;
class Float64ArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Float64Array> {
} _Float64Array_default_instance_;
class Float64DefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Float64> {
} _Float64_default_instance_;

namespace protobuf_primitive_2ffloat_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FloatArray, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float32Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float32Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float32, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float64Array, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float64Array, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Float64, data_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(FloatArray)},
  { 6, -1, sizeof(Float)},
  { 12, -1, sizeof(Float32Array)},
  { 18, -1, sizeof(Float32)},
  { 24, -1, sizeof(Float64Array)},
  { 30, -1, sizeof(Float64)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FloatArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Float_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Float32Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Float32_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Float64Array_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Float64_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "primitive/float.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _FloatArray_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Float_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Float32Array_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Float32_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Float64Array_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Float64_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FloatArray_default_instance_.DefaultConstruct();
  _Float_default_instance_.DefaultConstruct();
  _Float32Array_default_instance_.DefaultConstruct();
  _Float32_default_instance_.DefaultConstruct();
  _Float64Array_default_instance_.DefaultConstruct();
  _Float64_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025primitive/float.proto\022\006choreo\")\n\nFloat"
      "Array\022\033\n\004data\030\001 \003(\0132\r.choreo.Float\"\025\n\005Fl"
      "oat\022\014\n\004data\030\001 \001(\002\"-\n\014Float32Array\022\035\n\004dat"
      "a\030\001 \003(\0132\017.choreo.Float32\"\027\n\007Float32\022\014\n\004d"
      "ata\030\001 \001(\002\"-\n\014Float64Array\022\035\n\004data\030\001 \003(\0132"
      "\017.choreo.Float64\"\027\n\007Float64\022\014\n\004data\030\001 \001("
      "\002B+Z)github.com/RobotStudio/choreo-msg/m"
      "sg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "primitive/float.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_primitive_2ffloat_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FloatArray::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FloatArray::FloatArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2ffloat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.FloatArray)
}
FloatArray::FloatArray(const FloatArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.FloatArray)
}

void FloatArray::SharedCtor() {
  _cached_size_ = 0;
}

FloatArray::~FloatArray() {
  // @@protoc_insertion_point(destructor:choreo.FloatArray)
  SharedDtor();
}

void FloatArray::SharedDtor() {
}

void FloatArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FloatArray::descriptor() {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FloatArray& FloatArray::default_instance() {
  protobuf_primitive_2ffloat_2eproto::InitDefaults();
  return *internal_default_instance();
}

FloatArray* FloatArray::New(::google::protobuf::Arena* arena) const {
  FloatArray* n = new FloatArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FloatArray::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.FloatArray)
  data_.Clear();
}

bool FloatArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.FloatArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.Float data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.FloatArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.FloatArray)
  return false;
#undef DO_
}

void FloatArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.FloatArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Float data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.FloatArray)
}

::google::protobuf::uint8* FloatArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.FloatArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Float data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.FloatArray)
  return target;
}

size_t FloatArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.FloatArray)
  size_t total_size = 0;

  // repeated .choreo.Float data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloatArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FloatArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.FloatArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.FloatArray)
    MergeFrom(*source);
  }
}

void FloatArray::MergeFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.FloatArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void FloatArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatArray::CopyFrom(const FloatArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.FloatArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatArray::IsInitialized() const {
  return true;
}

void FloatArray::Swap(FloatArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FloatArray::InternalSwap(FloatArray* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FloatArray::GetMetadata() const {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FloatArray

// repeated .choreo.Float data = 1;
int FloatArray::data_size() const {
  return data_.size();
}
void FloatArray::clear_data() {
  data_.Clear();
}
const ::choreo::Float& FloatArray::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.FloatArray.data)
  return data_.Get(index);
}
::choreo::Float* FloatArray::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.FloatArray.data)
  return data_.Mutable(index);
}
::choreo::Float* FloatArray::add_data() {
  // @@protoc_insertion_point(field_add:choreo.FloatArray.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float >*
FloatArray::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.FloatArray.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float >&
FloatArray::data() const {
  // @@protoc_insertion_point(field_list:choreo.FloatArray.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Float::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Float::Float()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2ffloat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Float)
}
Float::Float(const Float& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.Float)
}

void Float::SharedCtor() {
  data_ = 0;
  _cached_size_ = 0;
}

Float::~Float() {
  // @@protoc_insertion_point(destructor:choreo.Float)
  SharedDtor();
}

void Float::SharedDtor() {
}

void Float::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Float::descriptor() {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Float& Float::default_instance() {
  protobuf_primitive_2ffloat_2eproto::InitDefaults();
  return *internal_default_instance();
}

Float* Float::New(::google::protobuf::Arena* arena) const {
  Float* n = new Float;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Float::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Float)
  data_ = 0;
}

bool Float::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Float)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Float)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Float)
  return false;
#undef DO_
}

void Float::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Float)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Float)
}

::google::protobuf::uint8* Float::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Float)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Float)
  return target;
}

size_t Float::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Float)
  size_t total_size = 0;

  // float data = 1;
  if (this->data() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Float::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Float)
  GOOGLE_DCHECK_NE(&from, this);
  const Float* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Float>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Float)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Float)
    MergeFrom(*source);
  }
}

void Float::MergeFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Float)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void Float::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float::CopyFrom(const Float& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Float)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float::IsInitialized() const {
  return true;
}

void Float::Swap(Float* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Float::InternalSwap(Float* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Float::GetMetadata() const {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Float

// float data = 1;
void Float::clear_data() {
  data_ = 0;
}
float Float::data() const {
  // @@protoc_insertion_point(field_get:choreo.Float.data)
  return data_;
}
void Float::set_data(float value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.Float.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Float32Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Float32Array::Float32Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2ffloat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Float32Array)
}
Float32Array::Float32Array(const Float32Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.Float32Array)
}

void Float32Array::SharedCtor() {
  _cached_size_ = 0;
}

Float32Array::~Float32Array() {
  // @@protoc_insertion_point(destructor:choreo.Float32Array)
  SharedDtor();
}

void Float32Array::SharedDtor() {
}

void Float32Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Float32Array::descriptor() {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Float32Array& Float32Array::default_instance() {
  protobuf_primitive_2ffloat_2eproto::InitDefaults();
  return *internal_default_instance();
}

Float32Array* Float32Array::New(::google::protobuf::Arena* arena) const {
  Float32Array* n = new Float32Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Float32Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Float32Array)
  data_.Clear();
}

bool Float32Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Float32Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.Float32 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Float32Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Float32Array)
  return false;
#undef DO_
}

void Float32Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Float32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Float32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Float32Array)
}

::google::protobuf::uint8* Float32Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Float32Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Float32 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Float32Array)
  return target;
}

size_t Float32Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Float32Array)
  size_t total_size = 0;

  // repeated .choreo.Float32 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Float32Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Float32Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Float32Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Float32Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Float32Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Float32Array)
    MergeFrom(*source);
  }
}

void Float32Array::MergeFrom(const Float32Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Float32Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void Float32Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Float32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float32Array::CopyFrom(const Float32Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Float32Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float32Array::IsInitialized() const {
  return true;
}

void Float32Array::Swap(Float32Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Float32Array::InternalSwap(Float32Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Float32Array::GetMetadata() const {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Float32Array

// repeated .choreo.Float32 data = 1;
int Float32Array::data_size() const {
  return data_.size();
}
void Float32Array::clear_data() {
  data_.Clear();
}
const ::choreo::Float32& Float32Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Float32Array.data)
  return data_.Get(index);
}
::choreo::Float32* Float32Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Float32Array.data)
  return data_.Mutable(index);
}
::choreo::Float32* Float32Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.Float32Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float32 >*
Float32Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Float32Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float32 >&
Float32Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.Float32Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Float32::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Float32::Float32()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2ffloat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Float32)
}
Float32::Float32(const Float32& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.Float32)
}

void Float32::SharedCtor() {
  data_ = 0;
  _cached_size_ = 0;
}

Float32::~Float32() {
  // @@protoc_insertion_point(destructor:choreo.Float32)
  SharedDtor();
}

void Float32::SharedDtor() {
}

void Float32::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Float32::descriptor() {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Float32& Float32::default_instance() {
  protobuf_primitive_2ffloat_2eproto::InitDefaults();
  return *internal_default_instance();
}

Float32* Float32::New(::google::protobuf::Arena* arena) const {
  Float32* n = new Float32;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Float32::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Float32)
  data_ = 0;
}

bool Float32::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Float32)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Float32)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Float32)
  return false;
#undef DO_
}

void Float32::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Float32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Float32)
}

::google::protobuf::uint8* Float32::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Float32)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Float32)
  return target;
}

size_t Float32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Float32)
  size_t total_size = 0;

  // float data = 1;
  if (this->data() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Float32::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Float32)
  GOOGLE_DCHECK_NE(&from, this);
  const Float32* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Float32>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Float32)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Float32)
    MergeFrom(*source);
  }
}

void Float32::MergeFrom(const Float32& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Float32)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void Float32::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Float32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float32::CopyFrom(const Float32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Float32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float32::IsInitialized() const {
  return true;
}

void Float32::Swap(Float32* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Float32::InternalSwap(Float32* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Float32::GetMetadata() const {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Float32

// float data = 1;
void Float32::clear_data() {
  data_ = 0;
}
float Float32::data() const {
  // @@protoc_insertion_point(field_get:choreo.Float32.data)
  return data_;
}
void Float32::set_data(float value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.Float32.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Float64Array::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Float64Array::Float64Array()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2ffloat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Float64Array)
}
Float64Array::Float64Array(const Float64Array& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:choreo.Float64Array)
}

void Float64Array::SharedCtor() {
  _cached_size_ = 0;
}

Float64Array::~Float64Array() {
  // @@protoc_insertion_point(destructor:choreo.Float64Array)
  SharedDtor();
}

void Float64Array::SharedDtor() {
}

void Float64Array::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Float64Array::descriptor() {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Float64Array& Float64Array::default_instance() {
  protobuf_primitive_2ffloat_2eproto::InitDefaults();
  return *internal_default_instance();
}

Float64Array* Float64Array::New(::google::protobuf::Arena* arena) const {
  Float64Array* n = new Float64Array;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Float64Array::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Float64Array)
  data_.Clear();
}

bool Float64Array::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Float64Array)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .choreo.Float64 data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Float64Array)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Float64Array)
  return false;
#undef DO_
}

void Float64Array::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Float64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Float64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Float64Array)
}

::google::protobuf::uint8* Float64Array::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Float64Array)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .choreo.Float64 data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Float64Array)
  return target;
}

size_t Float64Array::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Float64Array)
  size_t total_size = 0;

  // repeated .choreo.Float64 data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Float64Array::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Float64Array)
  GOOGLE_DCHECK_NE(&from, this);
  const Float64Array* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Float64Array>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Float64Array)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Float64Array)
    MergeFrom(*source);
  }
}

void Float64Array::MergeFrom(const Float64Array& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Float64Array)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void Float64Array::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Float64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float64Array::CopyFrom(const Float64Array& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Float64Array)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float64Array::IsInitialized() const {
  return true;
}

void Float64Array::Swap(Float64Array* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Float64Array::InternalSwap(Float64Array* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Float64Array::GetMetadata() const {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Float64Array

// repeated .choreo.Float64 data = 1;
int Float64Array::data_size() const {
  return data_.size();
}
void Float64Array::clear_data() {
  data_.Clear();
}
const ::choreo::Float64& Float64Array::data(int index) const {
  // @@protoc_insertion_point(field_get:choreo.Float64Array.data)
  return data_.Get(index);
}
::choreo::Float64* Float64Array::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.Float64Array.data)
  return data_.Mutable(index);
}
::choreo::Float64* Float64Array::add_data() {
  // @@protoc_insertion_point(field_add:choreo.Float64Array.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::Float64 >*
Float64Array::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:choreo.Float64Array.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::Float64 >&
Float64Array::data() const {
  // @@protoc_insertion_point(field_list:choreo.Float64Array.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Float64::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Float64::Float64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_primitive_2ffloat_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.Float64)
}
Float64::Float64(const Float64& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:choreo.Float64)
}

void Float64::SharedCtor() {
  data_ = 0;
  _cached_size_ = 0;
}

Float64::~Float64() {
  // @@protoc_insertion_point(destructor:choreo.Float64)
  SharedDtor();
}

void Float64::SharedDtor() {
}

void Float64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Float64::descriptor() {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Float64& Float64::default_instance() {
  protobuf_primitive_2ffloat_2eproto::InitDefaults();
  return *internal_default_instance();
}

Float64* Float64::New(::google::protobuf::Arena* arena) const {
  Float64* n = new Float64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Float64::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.Float64)
  data_ = 0;
}

bool Float64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.Float64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.Float64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.Float64)
  return false;
#undef DO_
}

void Float64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.Float64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float data = 1;
  if (this->data() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.Float64)
}

::google::protobuf::uint8* Float64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.Float64)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float data = 1;
  if (this->data() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.Float64)
  return target;
}

size_t Float64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.Float64)
  size_t total_size = 0;

  // float data = 1;
  if (this->data() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Float64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.Float64)
  GOOGLE_DCHECK_NE(&from, this);
  const Float64* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Float64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.Float64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.Float64)
    MergeFrom(*source);
  }
}

void Float64::MergeFrom(const Float64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.Float64)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data() != 0) {
    set_data(from.data());
  }
}

void Float64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.Float64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Float64::CopyFrom(const Float64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.Float64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Float64::IsInitialized() const {
  return true;
}

void Float64::Swap(Float64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Float64::InternalSwap(Float64* other) {
  std::swap(data_, other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Float64::GetMetadata() const {
  protobuf_primitive_2ffloat_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_primitive_2ffloat_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Float64

// float data = 1;
void Float64::clear_data() {
  data_ = 0;
}
float Float64::data() const {
  // @@protoc_insertion_point(field_get:choreo.Float64.data)
  return data_;
}
void Float64::set_data(float value) {
  
  data_ = value;
  // @@protoc_insertion_point(field_set:choreo.Float64.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
