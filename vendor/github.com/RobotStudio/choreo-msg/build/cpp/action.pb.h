// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#ifndef PROTOBUF_action_2eproto__INCLUDED
#define PROTOBUF_action_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "primitive/header.pb.h"
#include "primitive/string.pb.h"
// @@protoc_insertion_point(includes)
namespace choreo {
class GoalID;
class GoalIDDefaultTypeInternal;
extern GoalIDDefaultTypeInternal _GoalID_default_instance_;
class GoalStatus;
class GoalStatusDefaultTypeInternal;
extern GoalStatusDefaultTypeInternal _GoalStatus_default_instance_;
class GoalStatusArray;
class GoalStatusArrayDefaultTypeInternal;
extern GoalStatusArrayDefaultTypeInternal _GoalStatusArray_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class String;
class StringDefaultTypeInternal;
extern StringDefaultTypeInternal _String_default_instance_;
}  // namespace choreo
namespace google {
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace choreo {

namespace protobuf_action_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_action_2eproto

enum GoalStatus_GoalStatusType {
  GoalStatus_GoalStatusType_PENDING = 0,
  GoalStatus_GoalStatusType_ACTIVE = 1,
  GoalStatus_GoalStatusType_PREEMPTED = 2,
  GoalStatus_GoalStatusType_SUCCEEDED = 3,
  GoalStatus_GoalStatusType_ABORTED = 4,
  GoalStatus_GoalStatusType_REJECTED = 5,
  GoalStatus_GoalStatusType_PREEMPTING = 6,
  GoalStatus_GoalStatusType_RECALLING = 7,
  GoalStatus_GoalStatusType_RECALLED = 8,
  GoalStatus_GoalStatusType_LOST = 9,
  GoalStatus_GoalStatusType_GoalStatus_GoalStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GoalStatus_GoalStatusType_GoalStatus_GoalStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GoalStatus_GoalStatusType_IsValid(int value);
const GoalStatus_GoalStatusType GoalStatus_GoalStatusType_GoalStatusType_MIN = GoalStatus_GoalStatusType_PENDING;
const GoalStatus_GoalStatusType GoalStatus_GoalStatusType_GoalStatusType_MAX = GoalStatus_GoalStatusType_LOST;
const int GoalStatus_GoalStatusType_GoalStatusType_ARRAYSIZE = GoalStatus_GoalStatusType_GoalStatusType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GoalStatus_GoalStatusType_descriptor();
inline const ::std::string& GoalStatus_GoalStatusType_Name(GoalStatus_GoalStatusType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GoalStatus_GoalStatusType_descriptor(), value);
}
inline bool GoalStatus_GoalStatusType_Parse(
    const ::std::string& name, GoalStatus_GoalStatusType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoalStatus_GoalStatusType>(
    GoalStatus_GoalStatusType_descriptor(), name, value);
}
// ===================================================================

class GoalID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.GoalID) */ {
 public:
  GoalID();
  virtual ~GoalID();

  GoalID(const GoalID& from);

  inline GoalID& operator=(const GoalID& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalID& default_instance();

  static inline const GoalID* internal_default_instance() {
    return reinterpret_cast<const GoalID*>(
               &_GoalID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GoalID* other);

  // implements Message ----------------------------------------------

  inline GoalID* New() const PROTOBUF_FINAL { return New(NULL); }

  GoalID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoalID& from);
  void MergeFrom(const GoalID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoalID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp stamp = 1;
  bool has_stamp() const;
  void clear_stamp();
  static const int kStampFieldNumber = 1;
  const ::google::protobuf::Timestamp& stamp() const;
  ::google::protobuf::Timestamp* mutable_stamp();
  ::google::protobuf::Timestamp* release_stamp();
  void set_allocated_stamp(::google::protobuf::Timestamp* stamp);

  // .choreo.String id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::choreo::String& id() const;
  ::choreo::String* mutable_id();
  ::choreo::String* release_id();
  void set_allocated_id(::choreo::String* id);

  // @@protoc_insertion_point(class_scope:choreo.GoalID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* stamp_;
  ::choreo::String* id_;
  mutable int _cached_size_;
  friend struct protobuf_action_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoalStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.GoalStatus) */ {
 public:
  GoalStatus();
  virtual ~GoalStatus();

  GoalStatus(const GoalStatus& from);

  inline GoalStatus& operator=(const GoalStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalStatus& default_instance();

  static inline const GoalStatus* internal_default_instance() {
    return reinterpret_cast<const GoalStatus*>(
               &_GoalStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GoalStatus* other);

  // implements Message ----------------------------------------------

  inline GoalStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  GoalStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoalStatus& from);
  void MergeFrom(const GoalStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoalStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GoalStatus_GoalStatusType GoalStatusType;
  static const GoalStatusType PENDING =
    GoalStatus_GoalStatusType_PENDING;
  static const GoalStatusType ACTIVE =
    GoalStatus_GoalStatusType_ACTIVE;
  static const GoalStatusType PREEMPTED =
    GoalStatus_GoalStatusType_PREEMPTED;
  static const GoalStatusType SUCCEEDED =
    GoalStatus_GoalStatusType_SUCCEEDED;
  static const GoalStatusType ABORTED =
    GoalStatus_GoalStatusType_ABORTED;
  static const GoalStatusType REJECTED =
    GoalStatus_GoalStatusType_REJECTED;
  static const GoalStatusType PREEMPTING =
    GoalStatus_GoalStatusType_PREEMPTING;
  static const GoalStatusType RECALLING =
    GoalStatus_GoalStatusType_RECALLING;
  static const GoalStatusType RECALLED =
    GoalStatus_GoalStatusType_RECALLED;
  static const GoalStatusType LOST =
    GoalStatus_GoalStatusType_LOST;
  static inline bool GoalStatusType_IsValid(int value) {
    return GoalStatus_GoalStatusType_IsValid(value);
  }
  static const GoalStatusType GoalStatusType_MIN =
    GoalStatus_GoalStatusType_GoalStatusType_MIN;
  static const GoalStatusType GoalStatusType_MAX =
    GoalStatus_GoalStatusType_GoalStatusType_MAX;
  static const int GoalStatusType_ARRAYSIZE =
    GoalStatus_GoalStatusType_GoalStatusType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GoalStatusType_descriptor() {
    return GoalStatus_GoalStatusType_descriptor();
  }
  static inline const ::std::string& GoalStatusType_Name(GoalStatusType value) {
    return GoalStatus_GoalStatusType_Name(value);
  }
  static inline bool GoalStatusType_Parse(const ::std::string& name,
      GoalStatusType* value) {
    return GoalStatus_GoalStatusType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .choreo.GoalID goal_id = 1;
  bool has_goal_id() const;
  void clear_goal_id();
  static const int kGoalIdFieldNumber = 1;
  const ::choreo::GoalID& goal_id() const;
  ::choreo::GoalID* mutable_goal_id();
  ::choreo::GoalID* release_goal_id();
  void set_allocated_goal_id(::choreo::GoalID* goal_id);

  // .choreo.String text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::choreo::String& text() const;
  ::choreo::String* mutable_text();
  ::choreo::String* release_text();
  void set_allocated_text(::choreo::String* text);

  // .choreo.GoalStatus.GoalStatusType status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::choreo::GoalStatus_GoalStatusType status() const;
  void set_status(::choreo::GoalStatus_GoalStatusType value);

  // @@protoc_insertion_point(class_scope:choreo.GoalStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::choreo::GoalID* goal_id_;
  ::choreo::String* text_;
  int status_;
  mutable int _cached_size_;
  friend struct protobuf_action_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GoalStatusArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:choreo.GoalStatusArray) */ {
 public:
  GoalStatusArray();
  virtual ~GoalStatusArray();

  GoalStatusArray(const GoalStatusArray& from);

  inline GoalStatusArray& operator=(const GoalStatusArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoalStatusArray& default_instance();

  static inline const GoalStatusArray* internal_default_instance() {
    return reinterpret_cast<const GoalStatusArray*>(
               &_GoalStatusArray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GoalStatusArray* other);

  // implements Message ----------------------------------------------

  inline GoalStatusArray* New() const PROTOBUF_FINAL { return New(NULL); }

  GoalStatusArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoalStatusArray& from);
  void MergeFrom(const GoalStatusArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoalStatusArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .choreo.GoalStatus status_list = 2;
  int status_list_size() const;
  void clear_status_list();
  static const int kStatusListFieldNumber = 2;
  const ::choreo::GoalStatus& status_list(int index) const;
  ::choreo::GoalStatus* mutable_status_list(int index);
  ::choreo::GoalStatus* add_status_list();
  ::google::protobuf::RepeatedPtrField< ::choreo::GoalStatus >*
      mutable_status_list();
  const ::google::protobuf::RepeatedPtrField< ::choreo::GoalStatus >&
      status_list() const;

  // .choreo.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::choreo::Header& header() const;
  ::choreo::Header* mutable_header();
  ::choreo::Header* release_header();
  void set_allocated_header(::choreo::Header* header);

  // @@protoc_insertion_point(class_scope:choreo.GoalStatusArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::choreo::GoalStatus > status_list_;
  ::choreo::Header* header_;
  mutable int _cached_size_;
  friend struct protobuf_action_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GoalID

// .google.protobuf.Timestamp stamp = 1;
inline bool GoalID::has_stamp() const {
  return this != internal_default_instance() && stamp_ != NULL;
}
inline void GoalID::clear_stamp() {
  if (GetArenaNoVirtual() == NULL && stamp_ != NULL) delete stamp_;
  stamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& GoalID::stamp() const {
  // @@protoc_insertion_point(field_get:choreo.GoalID.stamp)
  return stamp_ != NULL ? *stamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* GoalID::mutable_stamp() {
  
  if (stamp_ == NULL) {
    stamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:choreo.GoalID.stamp)
  return stamp_;
}
inline ::google::protobuf::Timestamp* GoalID::release_stamp() {
  // @@protoc_insertion_point(field_release:choreo.GoalID.stamp)
  
  ::google::protobuf::Timestamp* temp = stamp_;
  stamp_ = NULL;
  return temp;
}
inline void GoalID::set_allocated_stamp(::google::protobuf::Timestamp* stamp) {
  delete stamp_;
  if (stamp != NULL && stamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_stamp = new ::google::protobuf::Timestamp;
    new_stamp->CopyFrom(*stamp);
    stamp = new_stamp;
  }
  stamp_ = stamp;
  if (stamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.GoalID.stamp)
}

// .choreo.String id = 2;
inline bool GoalID::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
inline void GoalID::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
inline const ::choreo::String& GoalID::id() const {
  // @@protoc_insertion_point(field_get:choreo.GoalID.id)
  return id_ != NULL ? *id_
                         : *::choreo::String::internal_default_instance();
}
inline ::choreo::String* GoalID::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.GoalID.id)
  return id_;
}
inline ::choreo::String* GoalID::release_id() {
  // @@protoc_insertion_point(field_release:choreo.GoalID.id)
  
  ::choreo::String* temp = id_;
  id_ = NULL;
  return temp;
}
inline void GoalID::set_allocated_id(::choreo::String* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.GoalID.id)
}

// -------------------------------------------------------------------

// GoalStatus

// .choreo.GoalID goal_id = 1;
inline bool GoalStatus::has_goal_id() const {
  return this != internal_default_instance() && goal_id_ != NULL;
}
inline void GoalStatus::clear_goal_id() {
  if (GetArenaNoVirtual() == NULL && goal_id_ != NULL) delete goal_id_;
  goal_id_ = NULL;
}
inline const ::choreo::GoalID& GoalStatus::goal_id() const {
  // @@protoc_insertion_point(field_get:choreo.GoalStatus.goal_id)
  return goal_id_ != NULL ? *goal_id_
                         : *::choreo::GoalID::internal_default_instance();
}
inline ::choreo::GoalID* GoalStatus::mutable_goal_id() {
  
  if (goal_id_ == NULL) {
    goal_id_ = new ::choreo::GoalID;
  }
  // @@protoc_insertion_point(field_mutable:choreo.GoalStatus.goal_id)
  return goal_id_;
}
inline ::choreo::GoalID* GoalStatus::release_goal_id() {
  // @@protoc_insertion_point(field_release:choreo.GoalStatus.goal_id)
  
  ::choreo::GoalID* temp = goal_id_;
  goal_id_ = NULL;
  return temp;
}
inline void GoalStatus::set_allocated_goal_id(::choreo::GoalID* goal_id) {
  delete goal_id_;
  goal_id_ = goal_id;
  if (goal_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.GoalStatus.goal_id)
}

// .choreo.GoalStatus.GoalStatusType status = 2;
inline void GoalStatus::clear_status() {
  status_ = 0;
}
inline ::choreo::GoalStatus_GoalStatusType GoalStatus::status() const {
  // @@protoc_insertion_point(field_get:choreo.GoalStatus.status)
  return static_cast< ::choreo::GoalStatus_GoalStatusType >(status_);
}
inline void GoalStatus::set_status(::choreo::GoalStatus_GoalStatusType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:choreo.GoalStatus.status)
}

// .choreo.String text = 3;
inline bool GoalStatus::has_text() const {
  return this != internal_default_instance() && text_ != NULL;
}
inline void GoalStatus::clear_text() {
  if (GetArenaNoVirtual() == NULL && text_ != NULL) delete text_;
  text_ = NULL;
}
inline const ::choreo::String& GoalStatus::text() const {
  // @@protoc_insertion_point(field_get:choreo.GoalStatus.text)
  return text_ != NULL ? *text_
                         : *::choreo::String::internal_default_instance();
}
inline ::choreo::String* GoalStatus::mutable_text() {
  
  if (text_ == NULL) {
    text_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.GoalStatus.text)
  return text_;
}
inline ::choreo::String* GoalStatus::release_text() {
  // @@protoc_insertion_point(field_release:choreo.GoalStatus.text)
  
  ::choreo::String* temp = text_;
  text_ = NULL;
  return temp;
}
inline void GoalStatus::set_allocated_text(::choreo::String* text) {
  delete text_;
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.GoalStatus.text)
}

// -------------------------------------------------------------------

// GoalStatusArray

// .choreo.Header header = 1;
inline bool GoalStatusArray::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void GoalStatusArray::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::choreo::Header& GoalStatusArray::header() const {
  // @@protoc_insertion_point(field_get:choreo.GoalStatusArray.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
inline ::choreo::Header* GoalStatusArray::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.GoalStatusArray.header)
  return header_;
}
inline ::choreo::Header* GoalStatusArray::release_header() {
  // @@protoc_insertion_point(field_release:choreo.GoalStatusArray.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void GoalStatusArray::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.GoalStatusArray.header)
}

// repeated .choreo.GoalStatus status_list = 2;
inline int GoalStatusArray::status_list_size() const {
  return status_list_.size();
}
inline void GoalStatusArray::clear_status_list() {
  status_list_.Clear();
}
inline const ::choreo::GoalStatus& GoalStatusArray::status_list(int index) const {
  // @@protoc_insertion_point(field_get:choreo.GoalStatusArray.status_list)
  return status_list_.Get(index);
}
inline ::choreo::GoalStatus* GoalStatusArray::mutable_status_list(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.GoalStatusArray.status_list)
  return status_list_.Mutable(index);
}
inline ::choreo::GoalStatus* GoalStatusArray::add_status_list() {
  // @@protoc_insertion_point(field_add:choreo.GoalStatusArray.status_list)
  return status_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::choreo::GoalStatus >*
GoalStatusArray::mutable_status_list() {
  // @@protoc_insertion_point(field_mutable_list:choreo.GoalStatusArray.status_list)
  return &status_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::choreo::GoalStatus >&
GoalStatusArray::status_list() const {
  // @@protoc_insertion_point(field_list:choreo.GoalStatusArray.status_list)
  return status_list_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace choreo

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::choreo::GoalStatus_GoalStatusType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::choreo::GoalStatus_GoalStatusType>() {
  return ::choreo::GoalStatus_GoalStatusType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_action_2eproto__INCLUDED
