// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: diagnostic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "diagnostic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace choreo {
class KeyValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyValue> {
} _KeyValue_default_instance_;
class DiagnosticStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DiagnosticStatus> {
} _DiagnosticStatus_default_instance_;
class DiagnosticArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DiagnosticArray> {
} _DiagnosticArray_default_instance_;
class ServiceResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceResponse> {
} _ServiceResponse_default_instance_;
class ServiceSelfTestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceSelfTest> {
} _ServiceSelfTest_default_instance_;

namespace protobuf_diagnostic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticStatus, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticStatus, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticStatus, message_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticStatus, hardware_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticStatus, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticArray, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DiagnosticArray, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceResponse, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSelfTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSelfTest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSelfTest, passed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceSelfTest, status_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(KeyValue)},
  { 7, -1, sizeof(DiagnosticStatus)},
  { 17, -1, sizeof(DiagnosticArray)},
  { 24, -1, sizeof(ServiceResponse)},
  { 32, -1, sizeof(ServiceSelfTest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_KeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiagnosticStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DiagnosticArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ServiceSelfTest_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "diagnostic.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void TableStruct::Shutdown() {
  _KeyValue_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _DiagnosticStatus_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _DiagnosticArray_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ServiceResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _ServiceSelfTest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::choreo::protobuf_primitive_2fbool_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fheader_2eproto::InitDefaults();
  ::choreo::protobuf_primitive_2fstring_2eproto::InitDefaults();
  _KeyValue_default_instance_.DefaultConstruct();
  _DiagnosticStatus_default_instance_.DefaultConstruct();
  _DiagnosticArray_default_instance_.DefaultConstruct();
  _ServiceResponse_default_instance_.DefaultConstruct();
  _ServiceSelfTest_default_instance_.DefaultConstruct();
  _KeyValue_default_instance_.get_mutable()->key_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _KeyValue_default_instance_.get_mutable()->value_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _DiagnosticStatus_default_instance_.get_mutable()->name_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _DiagnosticStatus_default_instance_.get_mutable()->message_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _DiagnosticStatus_default_instance_.get_mutable()->hardware_id_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _DiagnosticArray_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _ServiceResponse_default_instance_.get_mutable()->header_ = const_cast< ::choreo::Header*>(
      ::choreo::Header::internal_default_instance());
  _ServiceResponse_default_instance_.get_mutable()->success_ = const_cast< ::choreo::Bool*>(
      ::choreo::Bool::internal_default_instance());
  _ServiceResponse_default_instance_.get_mutable()->message_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _ServiceSelfTest_default_instance_.get_mutable()->id_ = const_cast< ::choreo::String*>(
      ::choreo::String::internal_default_instance());
  _ServiceSelfTest_default_instance_.get_mutable()->passed_ = const_cast< ::choreo::Bool*>(
      ::choreo::Bool::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020diagnostic.proto\022\006choreo\032\024primitive/bo"
      "ol.proto\032\026primitive/header.proto\032\026primit"
      "ive/string.proto\"F\n\010KeyValue\022\033\n\003key\030\001 \001("
      "\0132\016.choreo.String\022\035\n\005value\030\002 \001(\0132\016.chore"
      "o.String\"\370\001\n\020DiagnosticStatus\022-\n\005level\030\001"
      " \001(\0162\036.choreo.DiagnosticStatus.Level\022\034\n\004"
      "name\030\002 \001(\0132\016.choreo.String\022\037\n\007message\030\003 "
      "\001(\0132\016.choreo.String\022#\n\013hardware_id\030\004 \001(\013"
      "2\016.choreo.String\022 \n\006values\030\005 \003(\0132\020.chore"
      "o.KeyValue\"/\n\005Level\022\006\n\002OK\020\000\022\010\n\004WARN\020\001\022\t\n"
      "\005ERROR\020\002\022\t\n\005STALE\020\003\"[\n\017DiagnosticArray\022\036"
      "\n\006header\030\001 \001(\0132\016.choreo.Header\022(\n\006status"
      "\030\002 \003(\0132\030.choreo.DiagnosticStatus\"q\n\017Serv"
      "iceResponse\022\036\n\006header\030\001 \001(\0132\016.choreo.Hea"
      "der\022\035\n\007success\030\002 \001(\0132\014.choreo.Bool\022\037\n\007me"
      "ssage\030\003 \001(\0132\016.choreo.String\"u\n\017ServiceSe"
      "lfTest\022\032\n\002id\030\001 \001(\0132\016.choreo.String\022\034\n\006pa"
      "ssed\030\002 \001(\0132\014.choreo.Bool\022(\n\006status\030\003 \003(\013"
      "2\030.choreo.DiagnosticStatusB+Z)github.com"
      "/RobotStudio/choreo-msg/msg;msgb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 799);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "diagnostic.proto", &protobuf_RegisterTypes);
  ::choreo::protobuf_primitive_2fbool_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fheader_2eproto::AddDescriptors();
  ::choreo::protobuf_primitive_2fstring_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_diagnostic_2eproto

const ::google::protobuf::EnumDescriptor* DiagnosticStatus_Level_descriptor() {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_enum_descriptors[0];
}
bool DiagnosticStatus_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DiagnosticStatus_Level DiagnosticStatus::OK;
const DiagnosticStatus_Level DiagnosticStatus::WARN;
const DiagnosticStatus_Level DiagnosticStatus::ERROR;
const DiagnosticStatus_Level DiagnosticStatus::STALE;
const DiagnosticStatus_Level DiagnosticStatus::Level_MIN;
const DiagnosticStatus_Level DiagnosticStatus::Level_MAX;
const int DiagnosticStatus::Level_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValue::kKeyFieldNumber;
const int KeyValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValue::KeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_diagnostic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.KeyValue)
}
KeyValue::KeyValue(const KeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::choreo::String(*from.key_);
  } else {
    key_ = NULL;
  }
  if (from.has_value()) {
    value_ = new ::choreo::String(*from.value_);
  } else {
    value_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.KeyValue)
}

void KeyValue::SharedCtor() {
  ::memset(&key_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_) + sizeof(value_));
  _cached_size_ = 0;
}

KeyValue::~KeyValue() {
  // @@protoc_insertion_point(destructor:choreo.KeyValue)
  SharedDtor();
}

void KeyValue::SharedDtor() {
  if (this != internal_default_instance()) {
    delete key_;
  }
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void KeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValue::descriptor() {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValue& KeyValue::default_instance() {
  protobuf_diagnostic_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyValue* KeyValue::New(::google::protobuf::Arena* arena) const {
  KeyValue* n = new KeyValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.KeyValue)
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
}

bool KeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.KeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.String key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.KeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.KeyValue)
  return false;
#undef DO_
}

void KeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.String key = 1;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->key_, output);
  }

  // .choreo.String value = 2;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.KeyValue)
}

::google::protobuf::uint8* KeyValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.KeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.String key = 1;
  if (this->has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->key_, deterministic, target);
  }

  // .choreo.String value = 2;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->value_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.KeyValue)
  return target;
}

size_t KeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.KeyValue)
  size_t total_size = 0;

  // .choreo.String key = 1;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // .choreo.String value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.KeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.KeyValue)
    MergeFrom(*source);
  }
}

void KeyValue::MergeFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.KeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    mutable_key()->::choreo::String::MergeFrom(from.key());
  }
  if (from.has_value()) {
    mutable_value()->::choreo::String::MergeFrom(from.value());
  }
}

void KeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValue::CopyFrom(const KeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.KeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValue::IsInitialized() const {
  return true;
}

void KeyValue::Swap(KeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValue::InternalSwap(KeyValue* other) {
  std::swap(key_, other->key_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyValue::GetMetadata() const {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyValue

// .choreo.String key = 1;
bool KeyValue::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void KeyValue::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::choreo::String& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:choreo.KeyValue.key)
  return key_ != NULL ? *key_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* KeyValue::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.KeyValue.key)
  return key_;
}
::choreo::String* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:choreo.KeyValue.key)
  
  ::choreo::String* temp = key_;
  key_ = NULL;
  return temp;
}
void KeyValue::set_allocated_key(::choreo::String* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.KeyValue.key)
}

// .choreo.String value = 2;
bool KeyValue::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void KeyValue::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::choreo::String& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:choreo.KeyValue.value)
  return value_ != NULL ? *value_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* KeyValue::mutable_value() {
  
  if (value_ == NULL) {
    value_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.KeyValue.value)
  return value_;
}
::choreo::String* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:choreo.KeyValue.value)
  
  ::choreo::String* temp = value_;
  value_ = NULL;
  return temp;
}
void KeyValue::set_allocated_value(::choreo::String* value) {
  delete value_;
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.KeyValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosticStatus::kLevelFieldNumber;
const int DiagnosticStatus::kNameFieldNumber;
const int DiagnosticStatus::kMessageFieldNumber;
const int DiagnosticStatus::kHardwareIdFieldNumber;
const int DiagnosticStatus::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosticStatus::DiagnosticStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_diagnostic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.DiagnosticStatus)
}
DiagnosticStatus::DiagnosticStatus(const DiagnosticStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      values_(from.values_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::choreo::String(*from.name_);
  } else {
    name_ = NULL;
  }
  if (from.has_message()) {
    message_ = new ::choreo::String(*from.message_);
  } else {
    message_ = NULL;
  }
  if (from.has_hardware_id()) {
    hardware_id_ = new ::choreo::String(*from.hardware_id_);
  } else {
    hardware_id_ = NULL;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:choreo.DiagnosticStatus)
}

void DiagnosticStatus::SharedCtor() {
  ::memset(&name_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&name_) + sizeof(level_));
  _cached_size_ = 0;
}

DiagnosticStatus::~DiagnosticStatus() {
  // @@protoc_insertion_point(destructor:choreo.DiagnosticStatus)
  SharedDtor();
}

void DiagnosticStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete name_;
  }
  if (this != internal_default_instance()) {
    delete message_;
  }
  if (this != internal_default_instance()) {
    delete hardware_id_;
  }
}

void DiagnosticStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagnosticStatus::descriptor() {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiagnosticStatus& DiagnosticStatus::default_instance() {
  protobuf_diagnostic_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiagnosticStatus* DiagnosticStatus::New(::google::protobuf::Arena* arena) const {
  DiagnosticStatus* n = new DiagnosticStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiagnosticStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.DiagnosticStatus)
  values_.Clear();
  if (GetArenaNoVirtual() == NULL && name_ != NULL) {
    delete name_;
  }
  name_ = NULL;
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
  if (GetArenaNoVirtual() == NULL && hardware_id_ != NULL) {
    delete hardware_id_;
  }
  hardware_id_ = NULL;
  level_ = 0;
}

bool DiagnosticStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.DiagnosticStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.DiagnosticStatus.Level level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level(static_cast< ::choreo::DiagnosticStatus_Level >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String hardware_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hardware_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.KeyValue values = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.DiagnosticStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.DiagnosticStatus)
  return false;
#undef DO_
}

void DiagnosticStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.DiagnosticStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.DiagnosticStatus.Level level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->level(), output);
  }

  // .choreo.String name = 2;
  if (this->has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->name_, output);
  }

  // .choreo.String message = 3;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->message_, output);
  }

  // .choreo.String hardware_id = 4;
  if (this->has_hardware_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hardware_id_, output);
  }

  // repeated .choreo.KeyValue values = 5;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->values(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.DiagnosticStatus)
}

::google::protobuf::uint8* DiagnosticStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.DiagnosticStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.DiagnosticStatus.Level level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->level(), target);
  }

  // .choreo.String name = 2;
  if (this->has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->name_, deterministic, target);
  }

  // .choreo.String message = 3;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->message_, deterministic, target);
  }

  // .choreo.String hardware_id = 4;
  if (this->has_hardware_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hardware_id_, deterministic, target);
  }

  // repeated .choreo.KeyValue values = 5;
  for (unsigned int i = 0, n = this->values_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->values(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.DiagnosticStatus)
  return target;
}

size_t DiagnosticStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.DiagnosticStatus)
  size_t total_size = 0;

  // repeated .choreo.KeyValue values = 5;
  {
    unsigned int count = this->values_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->values(i));
    }
  }

  // .choreo.String name = 2;
  if (this->has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->name_);
  }

  // .choreo.String message = 3;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  // .choreo.String hardware_id = 4;
  if (this->has_hardware_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hardware_id_);
  }

  // .choreo.DiagnosticStatus.Level level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagnosticStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.DiagnosticStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosticStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiagnosticStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.DiagnosticStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.DiagnosticStatus)
    MergeFrom(*source);
  }
}

void DiagnosticStatus::MergeFrom(const DiagnosticStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.DiagnosticStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_name()) {
    mutable_name()->::choreo::String::MergeFrom(from.name());
  }
  if (from.has_message()) {
    mutable_message()->::choreo::String::MergeFrom(from.message());
  }
  if (from.has_hardware_id()) {
    mutable_hardware_id()->::choreo::String::MergeFrom(from.hardware_id());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void DiagnosticStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.DiagnosticStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosticStatus::CopyFrom(const DiagnosticStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.DiagnosticStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticStatus::IsInitialized() const {
  return true;
}

void DiagnosticStatus::Swap(DiagnosticStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosticStatus::InternalSwap(DiagnosticStatus* other) {
  values_.InternalSwap(&other->values_);
  std::swap(name_, other->name_);
  std::swap(message_, other->message_);
  std::swap(hardware_id_, other->hardware_id_);
  std::swap(level_, other->level_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiagnosticStatus::GetMetadata() const {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiagnosticStatus

// .choreo.DiagnosticStatus.Level level = 1;
void DiagnosticStatus::clear_level() {
  level_ = 0;
}
::choreo::DiagnosticStatus_Level DiagnosticStatus::level() const {
  // @@protoc_insertion_point(field_get:choreo.DiagnosticStatus.level)
  return static_cast< ::choreo::DiagnosticStatus_Level >(level_);
}
void DiagnosticStatus::set_level(::choreo::DiagnosticStatus_Level value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:choreo.DiagnosticStatus.level)
}

// .choreo.String name = 2;
bool DiagnosticStatus::has_name() const {
  return this != internal_default_instance() && name_ != NULL;
}
void DiagnosticStatus::clear_name() {
  if (GetArenaNoVirtual() == NULL && name_ != NULL) delete name_;
  name_ = NULL;
}
const ::choreo::String& DiagnosticStatus::name() const {
  // @@protoc_insertion_point(field_get:choreo.DiagnosticStatus.name)
  return name_ != NULL ? *name_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* DiagnosticStatus::mutable_name() {
  
  if (name_ == NULL) {
    name_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.DiagnosticStatus.name)
  return name_;
}
::choreo::String* DiagnosticStatus::release_name() {
  // @@protoc_insertion_point(field_release:choreo.DiagnosticStatus.name)
  
  ::choreo::String* temp = name_;
  name_ = NULL;
  return temp;
}
void DiagnosticStatus::set_allocated_name(::choreo::String* name) {
  delete name_;
  name_ = name;
  if (name) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.DiagnosticStatus.name)
}

// .choreo.String message = 3;
bool DiagnosticStatus::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
void DiagnosticStatus::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
const ::choreo::String& DiagnosticStatus::message() const {
  // @@protoc_insertion_point(field_get:choreo.DiagnosticStatus.message)
  return message_ != NULL ? *message_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* DiagnosticStatus::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.DiagnosticStatus.message)
  return message_;
}
::choreo::String* DiagnosticStatus::release_message() {
  // @@protoc_insertion_point(field_release:choreo.DiagnosticStatus.message)
  
  ::choreo::String* temp = message_;
  message_ = NULL;
  return temp;
}
void DiagnosticStatus::set_allocated_message(::choreo::String* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.DiagnosticStatus.message)
}

// .choreo.String hardware_id = 4;
bool DiagnosticStatus::has_hardware_id() const {
  return this != internal_default_instance() && hardware_id_ != NULL;
}
void DiagnosticStatus::clear_hardware_id() {
  if (GetArenaNoVirtual() == NULL && hardware_id_ != NULL) delete hardware_id_;
  hardware_id_ = NULL;
}
const ::choreo::String& DiagnosticStatus::hardware_id() const {
  // @@protoc_insertion_point(field_get:choreo.DiagnosticStatus.hardware_id)
  return hardware_id_ != NULL ? *hardware_id_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* DiagnosticStatus::mutable_hardware_id() {
  
  if (hardware_id_ == NULL) {
    hardware_id_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.DiagnosticStatus.hardware_id)
  return hardware_id_;
}
::choreo::String* DiagnosticStatus::release_hardware_id() {
  // @@protoc_insertion_point(field_release:choreo.DiagnosticStatus.hardware_id)
  
  ::choreo::String* temp = hardware_id_;
  hardware_id_ = NULL;
  return temp;
}
void DiagnosticStatus::set_allocated_hardware_id(::choreo::String* hardware_id) {
  delete hardware_id_;
  hardware_id_ = hardware_id;
  if (hardware_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.DiagnosticStatus.hardware_id)
}

// repeated .choreo.KeyValue values = 5;
int DiagnosticStatus::values_size() const {
  return values_.size();
}
void DiagnosticStatus::clear_values() {
  values_.Clear();
}
const ::choreo::KeyValue& DiagnosticStatus::values(int index) const {
  // @@protoc_insertion_point(field_get:choreo.DiagnosticStatus.values)
  return values_.Get(index);
}
::choreo::KeyValue* DiagnosticStatus::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.DiagnosticStatus.values)
  return values_.Mutable(index);
}
::choreo::KeyValue* DiagnosticStatus::add_values() {
  // @@protoc_insertion_point(field_add:choreo.DiagnosticStatus.values)
  return values_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::KeyValue >*
DiagnosticStatus::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:choreo.DiagnosticStatus.values)
  return &values_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::KeyValue >&
DiagnosticStatus::values() const {
  // @@protoc_insertion_point(field_list:choreo.DiagnosticStatus.values)
  return values_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DiagnosticArray::kHeaderFieldNumber;
const int DiagnosticArray::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DiagnosticArray::DiagnosticArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_diagnostic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.DiagnosticArray)
}
DiagnosticArray::DiagnosticArray(const DiagnosticArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      status_(from.status_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.DiagnosticArray)
}

void DiagnosticArray::SharedCtor() {
  header_ = NULL;
  _cached_size_ = 0;
}

DiagnosticArray::~DiagnosticArray() {
  // @@protoc_insertion_point(destructor:choreo.DiagnosticArray)
  SharedDtor();
}

void DiagnosticArray::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void DiagnosticArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DiagnosticArray::descriptor() {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DiagnosticArray& DiagnosticArray::default_instance() {
  protobuf_diagnostic_2eproto::InitDefaults();
  return *internal_default_instance();
}

DiagnosticArray* DiagnosticArray::New(::google::protobuf::Arena* arena) const {
  DiagnosticArray* n = new DiagnosticArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DiagnosticArray::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.DiagnosticArray)
  status_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}

bool DiagnosticArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.DiagnosticArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.DiagnosticStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.DiagnosticArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.DiagnosticArray)
  return false;
#undef DO_
}

void DiagnosticArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.DiagnosticArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .choreo.DiagnosticStatus status = 2;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.DiagnosticArray)
}

::google::protobuf::uint8* DiagnosticArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.DiagnosticArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // repeated .choreo.DiagnosticStatus status = 2;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->status(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.DiagnosticArray)
  return target;
}

size_t DiagnosticArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.DiagnosticArray)
  size_t total_size = 0;

  // repeated .choreo.DiagnosticStatus status = 2;
  {
    unsigned int count = this->status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status(i));
    }
  }

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DiagnosticArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.DiagnosticArray)
  GOOGLE_DCHECK_NE(&from, this);
  const DiagnosticArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DiagnosticArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.DiagnosticArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.DiagnosticArray)
    MergeFrom(*source);
  }
}

void DiagnosticArray::MergeFrom(const DiagnosticArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.DiagnosticArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
}

void DiagnosticArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.DiagnosticArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiagnosticArray::CopyFrom(const DiagnosticArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.DiagnosticArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiagnosticArray::IsInitialized() const {
  return true;
}

void DiagnosticArray::Swap(DiagnosticArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DiagnosticArray::InternalSwap(DiagnosticArray* other) {
  status_.InternalSwap(&other->status_);
  std::swap(header_, other->header_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DiagnosticArray::GetMetadata() const {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DiagnosticArray

// .choreo.Header header = 1;
bool DiagnosticArray::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void DiagnosticArray::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& DiagnosticArray::header() const {
  // @@protoc_insertion_point(field_get:choreo.DiagnosticArray.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* DiagnosticArray::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.DiagnosticArray.header)
  return header_;
}
::choreo::Header* DiagnosticArray::release_header() {
  // @@protoc_insertion_point(field_release:choreo.DiagnosticArray.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void DiagnosticArray::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.DiagnosticArray.header)
}

// repeated .choreo.DiagnosticStatus status = 2;
int DiagnosticArray::status_size() const {
  return status_.size();
}
void DiagnosticArray::clear_status() {
  status_.Clear();
}
const ::choreo::DiagnosticStatus& DiagnosticArray::status(int index) const {
  // @@protoc_insertion_point(field_get:choreo.DiagnosticArray.status)
  return status_.Get(index);
}
::choreo::DiagnosticStatus* DiagnosticArray::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.DiagnosticArray.status)
  return status_.Mutable(index);
}
::choreo::DiagnosticStatus* DiagnosticArray::add_status() {
  // @@protoc_insertion_point(field_add:choreo.DiagnosticArray.status)
  return status_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::DiagnosticStatus >*
DiagnosticArray::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:choreo.DiagnosticArray.status)
  return &status_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::DiagnosticStatus >&
DiagnosticArray::status() const {
  // @@protoc_insertion_point(field_list:choreo.DiagnosticArray.status)
  return status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceResponse::kHeaderFieldNumber;
const int ServiceResponse::kSuccessFieldNumber;
const int ServiceResponse::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceResponse::ServiceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_diagnostic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.ServiceResponse)
}
ServiceResponse::ServiceResponse(const ServiceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::choreo::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_success()) {
    success_ = new ::choreo::Bool(*from.success_);
  } else {
    success_ = NULL;
  }
  if (from.has_message()) {
    message_ = new ::choreo::String(*from.message_);
  } else {
    message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.ServiceResponse)
}

void ServiceResponse::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&header_) + sizeof(message_));
  _cached_size_ = 0;
}

ServiceResponse::~ServiceResponse() {
  // @@protoc_insertion_point(destructor:choreo.ServiceResponse)
  SharedDtor();
}

void ServiceResponse::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete success_;
  }
  if (this != internal_default_instance()) {
    delete message_;
  }
}

void ServiceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceResponse::descriptor() {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceResponse& ServiceResponse::default_instance() {
  protobuf_diagnostic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceResponse* ServiceResponse::New(::google::protobuf::Arena* arena) const {
  ServiceResponse* n = new ServiceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.ServiceResponse)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && success_ != NULL) {
    delete success_;
  }
  success_ = NULL;
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}

bool ServiceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.ServiceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.String message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.ServiceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.ServiceResponse)
  return false;
#undef DO_
}

void ServiceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.ServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .choreo.Bool success = 2;
  if (this->has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->success_, output);
  }

  // .choreo.String message = 3;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->message_, output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.ServiceResponse)
}

::google::protobuf::uint8* ServiceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.ServiceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // .choreo.Bool success = 2;
  if (this->has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->success_, deterministic, target);
  }

  // .choreo.String message = 3;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->message_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.ServiceResponse)
  return target;
}

size_t ServiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.ServiceResponse)
  size_t total_size = 0;

  // .choreo.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .choreo.Bool success = 2;
  if (this->has_success()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->success_);
  }

  // .choreo.String message = 3;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.ServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.ServiceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.ServiceResponse)
    MergeFrom(*source);
  }
}

void ServiceResponse::MergeFrom(const ServiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.ServiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::choreo::Header::MergeFrom(from.header());
  }
  if (from.has_success()) {
    mutable_success()->::choreo::Bool::MergeFrom(from.success());
  }
  if (from.has_message()) {
    mutable_message()->::choreo::String::MergeFrom(from.message());
  }
}

void ServiceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.ServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceResponse::CopyFrom(const ServiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.ServiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceResponse::IsInitialized() const {
  return true;
}

void ServiceResponse::Swap(ServiceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceResponse::InternalSwap(ServiceResponse* other) {
  std::swap(header_, other->header_);
  std::swap(success_, other->success_);
  std::swap(message_, other->message_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceResponse::GetMetadata() const {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceResponse

// .choreo.Header header = 1;
bool ServiceResponse::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void ServiceResponse::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::choreo::Header& ServiceResponse::header() const {
  // @@protoc_insertion_point(field_get:choreo.ServiceResponse.header)
  return header_ != NULL ? *header_
                         : *::choreo::Header::internal_default_instance();
}
::choreo::Header* ServiceResponse::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::choreo::Header;
  }
  // @@protoc_insertion_point(field_mutable:choreo.ServiceResponse.header)
  return header_;
}
::choreo::Header* ServiceResponse::release_header() {
  // @@protoc_insertion_point(field_release:choreo.ServiceResponse.header)
  
  ::choreo::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void ServiceResponse::set_allocated_header(::choreo::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.ServiceResponse.header)
}

// .choreo.Bool success = 2;
bool ServiceResponse::has_success() const {
  return this != internal_default_instance() && success_ != NULL;
}
void ServiceResponse::clear_success() {
  if (GetArenaNoVirtual() == NULL && success_ != NULL) delete success_;
  success_ = NULL;
}
const ::choreo::Bool& ServiceResponse::success() const {
  // @@protoc_insertion_point(field_get:choreo.ServiceResponse.success)
  return success_ != NULL ? *success_
                         : *::choreo::Bool::internal_default_instance();
}
::choreo::Bool* ServiceResponse::mutable_success() {
  
  if (success_ == NULL) {
    success_ = new ::choreo::Bool;
  }
  // @@protoc_insertion_point(field_mutable:choreo.ServiceResponse.success)
  return success_;
}
::choreo::Bool* ServiceResponse::release_success() {
  // @@protoc_insertion_point(field_release:choreo.ServiceResponse.success)
  
  ::choreo::Bool* temp = success_;
  success_ = NULL;
  return temp;
}
void ServiceResponse::set_allocated_success(::choreo::Bool* success) {
  delete success_;
  success_ = success;
  if (success) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.ServiceResponse.success)
}

// .choreo.String message = 3;
bool ServiceResponse::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
void ServiceResponse::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
const ::choreo::String& ServiceResponse::message() const {
  // @@protoc_insertion_point(field_get:choreo.ServiceResponse.message)
  return message_ != NULL ? *message_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* ServiceResponse::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.ServiceResponse.message)
  return message_;
}
::choreo::String* ServiceResponse::release_message() {
  // @@protoc_insertion_point(field_release:choreo.ServiceResponse.message)
  
  ::choreo::String* temp = message_;
  message_ = NULL;
  return temp;
}
void ServiceResponse::set_allocated_message(::choreo::String* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.ServiceResponse.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceSelfTest::kIdFieldNumber;
const int ServiceSelfTest::kPassedFieldNumber;
const int ServiceSelfTest::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceSelfTest::ServiceSelfTest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_diagnostic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:choreo.ServiceSelfTest)
}
ServiceSelfTest::ServiceSelfTest(const ServiceSelfTest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      status_(from.status_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::choreo::String(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_passed()) {
    passed_ = new ::choreo::Bool(*from.passed_);
  } else {
    passed_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:choreo.ServiceSelfTest)
}

void ServiceSelfTest::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&passed_) -
    reinterpret_cast<char*>(&id_) + sizeof(passed_));
  _cached_size_ = 0;
}

ServiceSelfTest::~ServiceSelfTest() {
  // @@protoc_insertion_point(destructor:choreo.ServiceSelfTest)
  SharedDtor();
}

void ServiceSelfTest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete id_;
  }
  if (this != internal_default_instance()) {
    delete passed_;
  }
}

void ServiceSelfTest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceSelfTest::descriptor() {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceSelfTest& ServiceSelfTest::default_instance() {
  protobuf_diagnostic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceSelfTest* ServiceSelfTest::New(::google::protobuf::Arena* arena) const {
  ServiceSelfTest* n = new ServiceSelfTest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceSelfTest::Clear() {
// @@protoc_insertion_point(message_clear_start:choreo.ServiceSelfTest)
  status_.Clear();
  if (GetArenaNoVirtual() == NULL && id_ != NULL) {
    delete id_;
  }
  id_ = NULL;
  if (GetArenaNoVirtual() == NULL && passed_ != NULL) {
    delete passed_;
  }
  passed_ = NULL;
}

bool ServiceSelfTest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:choreo.ServiceSelfTest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .choreo.String id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .choreo.Bool passed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .choreo.DiagnosticStatus status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:choreo.ServiceSelfTest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:choreo.ServiceSelfTest)
  return false;
#undef DO_
}

void ServiceSelfTest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:choreo.ServiceSelfTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.String id = 1;
  if (this->has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->id_, output);
  }

  // .choreo.Bool passed = 2;
  if (this->has_passed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->passed_, output);
  }

  // repeated .choreo.DiagnosticStatus status = 3;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status(i), output);
  }

  // @@protoc_insertion_point(serialize_end:choreo.ServiceSelfTest)
}

::google::protobuf::uint8* ServiceSelfTest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:choreo.ServiceSelfTest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .choreo.String id = 1;
  if (this->has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->id_, deterministic, target);
  }

  // .choreo.Bool passed = 2;
  if (this->has_passed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->passed_, deterministic, target);
  }

  // repeated .choreo.DiagnosticStatus status = 3;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->status(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:choreo.ServiceSelfTest)
  return target;
}

size_t ServiceSelfTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:choreo.ServiceSelfTest)
  size_t total_size = 0;

  // repeated .choreo.DiagnosticStatus status = 3;
  {
    unsigned int count = this->status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status(i));
    }
  }

  // .choreo.String id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->id_);
  }

  // .choreo.Bool passed = 2;
  if (this->has_passed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->passed_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceSelfTest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:choreo.ServiceSelfTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceSelfTest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceSelfTest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:choreo.ServiceSelfTest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:choreo.ServiceSelfTest)
    MergeFrom(*source);
  }
}

void ServiceSelfTest::MergeFrom(const ServiceSelfTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:choreo.ServiceSelfTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  status_.MergeFrom(from.status_);
  if (from.has_id()) {
    mutable_id()->::choreo::String::MergeFrom(from.id());
  }
  if (from.has_passed()) {
    mutable_passed()->::choreo::Bool::MergeFrom(from.passed());
  }
}

void ServiceSelfTest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:choreo.ServiceSelfTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceSelfTest::CopyFrom(const ServiceSelfTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:choreo.ServiceSelfTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceSelfTest::IsInitialized() const {
  return true;
}

void ServiceSelfTest::Swap(ServiceSelfTest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceSelfTest::InternalSwap(ServiceSelfTest* other) {
  status_.InternalSwap(&other->status_);
  std::swap(id_, other->id_);
  std::swap(passed_, other->passed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceSelfTest::GetMetadata() const {
  protobuf_diagnostic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_diagnostic_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceSelfTest

// .choreo.String id = 1;
bool ServiceSelfTest::has_id() const {
  return this != internal_default_instance() && id_ != NULL;
}
void ServiceSelfTest::clear_id() {
  if (GetArenaNoVirtual() == NULL && id_ != NULL) delete id_;
  id_ = NULL;
}
const ::choreo::String& ServiceSelfTest::id() const {
  // @@protoc_insertion_point(field_get:choreo.ServiceSelfTest.id)
  return id_ != NULL ? *id_
                         : *::choreo::String::internal_default_instance();
}
::choreo::String* ServiceSelfTest::mutable_id() {
  
  if (id_ == NULL) {
    id_ = new ::choreo::String;
  }
  // @@protoc_insertion_point(field_mutable:choreo.ServiceSelfTest.id)
  return id_;
}
::choreo::String* ServiceSelfTest::release_id() {
  // @@protoc_insertion_point(field_release:choreo.ServiceSelfTest.id)
  
  ::choreo::String* temp = id_;
  id_ = NULL;
  return temp;
}
void ServiceSelfTest::set_allocated_id(::choreo::String* id) {
  delete id_;
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.ServiceSelfTest.id)
}

// .choreo.Bool passed = 2;
bool ServiceSelfTest::has_passed() const {
  return this != internal_default_instance() && passed_ != NULL;
}
void ServiceSelfTest::clear_passed() {
  if (GetArenaNoVirtual() == NULL && passed_ != NULL) delete passed_;
  passed_ = NULL;
}
const ::choreo::Bool& ServiceSelfTest::passed() const {
  // @@protoc_insertion_point(field_get:choreo.ServiceSelfTest.passed)
  return passed_ != NULL ? *passed_
                         : *::choreo::Bool::internal_default_instance();
}
::choreo::Bool* ServiceSelfTest::mutable_passed() {
  
  if (passed_ == NULL) {
    passed_ = new ::choreo::Bool;
  }
  // @@protoc_insertion_point(field_mutable:choreo.ServiceSelfTest.passed)
  return passed_;
}
::choreo::Bool* ServiceSelfTest::release_passed() {
  // @@protoc_insertion_point(field_release:choreo.ServiceSelfTest.passed)
  
  ::choreo::Bool* temp = passed_;
  passed_ = NULL;
  return temp;
}
void ServiceSelfTest::set_allocated_passed(::choreo::Bool* passed) {
  delete passed_;
  passed_ = passed;
  if (passed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:choreo.ServiceSelfTest.passed)
}

// repeated .choreo.DiagnosticStatus status = 3;
int ServiceSelfTest::status_size() const {
  return status_.size();
}
void ServiceSelfTest::clear_status() {
  status_.Clear();
}
const ::choreo::DiagnosticStatus& ServiceSelfTest::status(int index) const {
  // @@protoc_insertion_point(field_get:choreo.ServiceSelfTest.status)
  return status_.Get(index);
}
::choreo::DiagnosticStatus* ServiceSelfTest::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:choreo.ServiceSelfTest.status)
  return status_.Mutable(index);
}
::choreo::DiagnosticStatus* ServiceSelfTest::add_status() {
  // @@protoc_insertion_point(field_add:choreo.ServiceSelfTest.status)
  return status_.Add();
}
::google::protobuf::RepeatedPtrField< ::choreo::DiagnosticStatus >*
ServiceSelfTest::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:choreo.ServiceSelfTest.status)
  return &status_;
}
const ::google::protobuf::RepeatedPtrField< ::choreo::DiagnosticStatus >&
ServiceSelfTest::status() const {
  // @@protoc_insertion_point(field_list:choreo.ServiceSelfTest.status)
  return status_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace choreo

// @@protoc_insertion_point(global_scope)
