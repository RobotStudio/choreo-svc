// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor/joystick.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	sensor/joystick.proto

It has these top-level messages:
	Joy
	JoyFeedback
	JoyFeedbackArray
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg"
import choreo1 "github.com/RobotStudio/choreo-msg/msg"
import choreo2 "github.com/RobotStudio/choreo-msg/msg"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type JoyFeedback_FeedbackType int32

const (
	JoyFeedback_LED    JoyFeedback_FeedbackType = 0
	JoyFeedback_RUMBLE JoyFeedback_FeedbackType = 1
	JoyFeedback_BUZZER JoyFeedback_FeedbackType = 2
)

var JoyFeedback_FeedbackType_name = map[int32]string{
	0: "LED",
	1: "RUMBLE",
	2: "BUZZER",
}
var JoyFeedback_FeedbackType_value = map[string]int32{
	"LED":    0,
	"RUMBLE": 1,
	"BUZZER": 2,
}

func (x JoyFeedback_FeedbackType) String() string {
	return proto.EnumName(JoyFeedback_FeedbackType_name, int32(x))
}
func (JoyFeedback_FeedbackType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Joy struct {
	Header  *choreo1.Header   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Axes    []*choreo.Float32 `protobuf:"bytes,2,rep,name=axes" json:"axes,omitempty"`
	Buttons []*choreo2.Int32  `protobuf:"bytes,3,rep,name=buttons" json:"buttons,omitempty"`
}

func (m *Joy) Reset()                    { *m = Joy{} }
func (m *Joy) String() string            { return proto.CompactTextString(m) }
func (*Joy) ProtoMessage()               {}
func (*Joy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Joy) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Joy) GetAxes() []*choreo.Float32 {
	if m != nil {
		return m.Axes
	}
	return nil
}

func (m *Joy) GetButtons() []*choreo2.Int32 {
	if m != nil {
		return m.Buttons
	}
	return nil
}

type JoyFeedback struct {
	Type      JoyFeedback_FeedbackType `protobuf:"varint,1,opt,name=type,enum=choreo.JoyFeedback_FeedbackType" json:"type,omitempty"`
	Id        *choreo2.UInt32          `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Intensity *choreo.Float32          `protobuf:"bytes,3,opt,name=intensity" json:"intensity,omitempty"`
}

func (m *JoyFeedback) Reset()                    { *m = JoyFeedback{} }
func (m *JoyFeedback) String() string            { return proto.CompactTextString(m) }
func (*JoyFeedback) ProtoMessage()               {}
func (*JoyFeedback) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JoyFeedback) GetType() JoyFeedback_FeedbackType {
	if m != nil {
		return m.Type
	}
	return JoyFeedback_LED
}

func (m *JoyFeedback) GetId() *choreo2.UInt32 {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *JoyFeedback) GetIntensity() *choreo.Float32 {
	if m != nil {
		return m.Intensity
	}
	return nil
}

type JoyFeedbackArray struct {
	Array []*JoyFeedback `protobuf:"bytes,1,rep,name=array" json:"array,omitempty"`
}

func (m *JoyFeedbackArray) Reset()                    { *m = JoyFeedbackArray{} }
func (m *JoyFeedbackArray) String() string            { return proto.CompactTextString(m) }
func (*JoyFeedbackArray) ProtoMessage()               {}
func (*JoyFeedbackArray) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *JoyFeedbackArray) GetArray() []*JoyFeedback {
	if m != nil {
		return m.Array
	}
	return nil
}

func init() {
	proto.RegisterType((*Joy)(nil), "choreo.Joy")
	proto.RegisterType((*JoyFeedback)(nil), "choreo.JoyFeedback")
	proto.RegisterType((*JoyFeedbackArray)(nil), "choreo.JoyFeedbackArray")
	proto.RegisterEnum("choreo.JoyFeedback_FeedbackType", JoyFeedback_FeedbackType_name, JoyFeedback_FeedbackType_value)
}

func init() { proto.RegisterFile("sensor/joystick.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x4f, 0x4f, 0xea, 0x40,
	0x14, 0xc5, 0x5f, 0x5b, 0x5e, 0xc9, 0xbb, 0xbc, 0xc7, 0x6b, 0x86, 0x60, 0x1a, 0x16, 0x86, 0xd4,
	0x44, 0x21, 0x86, 0x36, 0x29, 0xee, 0x8c, 0x0b, 0x89, 0x10, 0x25, 0xb8, 0xa9, 0xb2, 0x61, 0xd7,
	0x3f, 0x63, 0x19, 0xb1, 0xbd, 0x4d, 0x67, 0x30, 0x36, 0x7e, 0x3c, 0xbf, 0x98, 0xe9, 0x94, 0x06,
	0x8c, 0xee, 0x4e, 0xce, 0xf9, 0xdd, 0x9c, 0xd3, 0x0e, 0x74, 0x39, 0x4d, 0x39, 0xe6, 0xce, 0x33,
	0x16, 0x5c, 0xb0, 0x70, 0x63, 0x67, 0x39, 0x0a, 0x24, 0x7a, 0xb8, 0xc6, 0x9c, 0x62, 0xaf, 0x9b,
	0xe5, 0x2c, 0x61, 0x82, 0xbd, 0x52, 0xe7, 0xe9, 0x05, 0x7d, 0x51, 0xc5, 0xbd, 0xa3, 0xbd, 0xbd,
	0xa6, 0x7e, 0x44, 0xf3, 0x9d, 0xdf, 0xd9, 0xfb, 0x2c, 0xdd, 0xc1, 0xd6, 0x3b, 0x68, 0x73, 0x2c,
	0xc8, 0x29, 0xe8, 0x15, 0x6b, 0x2a, 0x7d, 0x65, 0xd0, 0x72, 0xdb, 0x76, 0xd5, 0x61, 0xdf, 0x4a,
	0xd7, 0xdb, 0xa5, 0xe4, 0x04, 0x1a, 0xfe, 0x1b, 0xe5, 0xa6, 0xda, 0xd7, 0x06, 0x2d, 0xf7, 0x7f,
	0x4d, 0xcd, 0xca, 0xfa, 0xb1, 0xeb, 0xc9, 0x90, 0x9c, 0x41, 0x33, 0xd8, 0x0a, 0x81, 0x29, 0x37,
	0x35, 0xc9, 0xfd, 0xab, 0xb9, 0xbb, 0xb4, 0xa4, 0xea, 0xd4, 0xfa, 0x50, 0xa0, 0x35, 0xc7, 0x62,
	0x46, 0x69, 0x14, 0xf8, 0xe1, 0x86, 0x5c, 0x40, 0x43, 0x14, 0x19, 0x95, 0x1b, 0xda, 0x6e, 0xbf,
	0xbe, 0x3a, 0x40, 0xec, 0x5a, 0x3c, 0x16, 0x19, 0xf5, 0x24, 0x4d, 0x8e, 0x41, 0x65, 0x91, 0xa9,
	0x7e, 0xdd, 0xbd, 0xac, 0xaa, 0x54, 0x16, 0x91, 0x11, 0xfc, 0x61, 0xa9, 0xa0, 0x29, 0x67, 0xa2,
	0x30, 0x35, 0x89, 0x7d, 0x1b, 0xbe, 0x27, 0x2c, 0x07, 0xfe, 0x1e, 0x96, 0x90, 0x26, 0x68, 0x8b,
	0xe9, 0x8d, 0xf1, 0x8b, 0x00, 0xe8, 0xde, 0xf2, 0x7e, 0xb2, 0x98, 0x1a, 0x4a, 0xa9, 0x27, 0xcb,
	0xd5, 0x6a, 0xea, 0x19, 0xaa, 0x75, 0x05, 0xc6, 0xc1, 0xc2, 0xeb, 0x3c, 0xf7, 0x0b, 0x32, 0x84,
	0xdf, 0x7e, 0x29, 0x4c, 0x45, 0xfe, 0x80, 0xce, 0x0f, 0x9f, 0xe2, 0x55, 0xc4, 0xe4, 0x7c, 0x35,
	0x8c, 0x99, 0x58, 0x6f, 0x03, 0x3b, 0xc4, 0xc4, 0xf1, 0x30, 0x40, 0xf1, 0x20, 0xb6, 0x11, 0x43,
	0xa7, 0xba, 0x19, 0x25, 0x3c, 0x76, 0x12, 0x1e, 0x5f, 0x26, 0x3c, 0x0e, 0x74, 0xf9, 0x6a, 0xe3,
	0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0xbd, 0x56, 0x49, 0x1a, 0x02, 0x00, 0x00,
}
