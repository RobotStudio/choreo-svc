// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor/depth.proto

/*
Package msg is a generated protocol buffer package.

It is generated from these files:
	sensor/depth.proto

It has these top-level messages:
	LaserEcho
	LaserScan
	MultiEchoLaserScan
	PointField
	PointCloud
	PointCloud2
	Range
*/
package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg"
import choreo1 "github.com/RobotStudio/choreo-msg/msg"
import choreo2 "github.com/RobotStudio/choreo-msg/msg"
import choreo3 "github.com/RobotStudio/choreo-msg/msg"
import choreo4 "github.com/RobotStudio/choreo-msg/msg"
import choreo5 "github.com/RobotStudio/choreo-msg/msg"
import choreo6 "github.com/RobotStudio/choreo-msg/msg"
import choreo7 "github.com/RobotStudio/choreo-msg/msg"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PointField_Datatype int32

const (
	PointField_INT8    PointField_Datatype = 0
	PointField_UINT8   PointField_Datatype = 1
	PointField_INT16   PointField_Datatype = 2
	PointField_UINT16  PointField_Datatype = 3
	PointField_INT32   PointField_Datatype = 4
	PointField_UINT32  PointField_Datatype = 5
	PointField_FLOAT32 PointField_Datatype = 6
	PointField_FLOAT64 PointField_Datatype = 7
)

var PointField_Datatype_name = map[int32]string{
	0: "INT8",
	1: "UINT8",
	2: "INT16",
	3: "UINT16",
	4: "INT32",
	5: "UINT32",
	6: "FLOAT32",
	7: "FLOAT64",
}
var PointField_Datatype_value = map[string]int32{
	"INT8":    0,
	"UINT8":   1,
	"INT16":   2,
	"UINT16":  3,
	"INT32":   4,
	"UINT32":  5,
	"FLOAT32": 6,
	"FLOAT64": 7,
}

func (x PointField_Datatype) String() string {
	return proto.EnumName(PointField_Datatype_name, int32(x))
}
func (PointField_Datatype) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Range_RadiationType int32

const (
	Range_ULTRASOUND Range_RadiationType = 0
	Range_INFRARED   Range_RadiationType = 1
)

var Range_RadiationType_name = map[int32]string{
	0: "ULTRASOUND",
	1: "INFRARED",
}
var Range_RadiationType_value = map[string]int32{
	"ULTRASOUND": 0,
	"INFRARED":   1,
}

func (x Range_RadiationType) String() string {
	return proto.EnumName(Range_RadiationType_name, int32(x))
}
func (Range_RadiationType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

type LaserEcho struct {
	Echoes []*choreo2.Float32 `protobuf:"bytes,1,rep,name=echoes" json:"echoes,omitempty"`
}

func (m *LaserEcho) Reset()                    { *m = LaserEcho{} }
func (m *LaserEcho) String() string            { return proto.CompactTextString(m) }
func (*LaserEcho) ProtoMessage()               {}
func (*LaserEcho) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LaserEcho) GetEchoes() []*choreo2.Float32 {
	if m != nil {
		return m.Echoes
	}
	return nil
}

type LaserScan struct {
	Header         *choreo3.Header    `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	AngleMin       *choreo2.Float32   `protobuf:"bytes,2,opt,name=angle_min,json=angleMin" json:"angle_min,omitempty"`
	AngleMax       *choreo2.Float32   `protobuf:"bytes,3,opt,name=angle_max,json=angleMax" json:"angle_max,omitempty"`
	AngleIncrement *choreo2.Float32   `protobuf:"bytes,4,opt,name=angle_increment,json=angleIncrement" json:"angle_increment,omitempty"`
	TimeIncrement  *choreo2.Float32   `protobuf:"bytes,5,opt,name=time_increment,json=timeIncrement" json:"time_increment,omitempty"`
	ScanTime       *choreo2.Float32   `protobuf:"bytes,6,opt,name=scan_time,json=scanTime" json:"scan_time,omitempty"`
	RangeMin       *choreo2.Float32   `protobuf:"bytes,7,opt,name=range_min,json=rangeMin" json:"range_min,omitempty"`
	RangeMax       *choreo2.Float32   `protobuf:"bytes,8,opt,name=range_max,json=rangeMax" json:"range_max,omitempty"`
	Ranges         []*choreo2.Float32 `protobuf:"bytes,9,rep,name=ranges" json:"ranges,omitempty"`
	Intensities    []*choreo2.Float32 `protobuf:"bytes,10,rep,name=intensities" json:"intensities,omitempty"`
}

func (m *LaserScan) Reset()                    { *m = LaserScan{} }
func (m *LaserScan) String() string            { return proto.CompactTextString(m) }
func (*LaserScan) ProtoMessage()               {}
func (*LaserScan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LaserScan) GetHeader() *choreo3.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LaserScan) GetAngleMin() *choreo2.Float32 {
	if m != nil {
		return m.AngleMin
	}
	return nil
}

func (m *LaserScan) GetAngleMax() *choreo2.Float32 {
	if m != nil {
		return m.AngleMax
	}
	return nil
}

func (m *LaserScan) GetAngleIncrement() *choreo2.Float32 {
	if m != nil {
		return m.AngleIncrement
	}
	return nil
}

func (m *LaserScan) GetTimeIncrement() *choreo2.Float32 {
	if m != nil {
		return m.TimeIncrement
	}
	return nil
}

func (m *LaserScan) GetScanTime() *choreo2.Float32 {
	if m != nil {
		return m.ScanTime
	}
	return nil
}

func (m *LaserScan) GetRangeMin() *choreo2.Float32 {
	if m != nil {
		return m.RangeMin
	}
	return nil
}

func (m *LaserScan) GetRangeMax() *choreo2.Float32 {
	if m != nil {
		return m.RangeMax
	}
	return nil
}

func (m *LaserScan) GetRanges() []*choreo2.Float32 {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *LaserScan) GetIntensities() []*choreo2.Float32 {
	if m != nil {
		return m.Intensities
	}
	return nil
}

type MultiEchoLaserScan struct {
	Header         *choreo3.Header  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	AngleMin       *choreo2.Float32 `protobuf:"bytes,2,opt,name=angle_min,json=angleMin" json:"angle_min,omitempty"`
	AngleMax       *choreo2.Float32 `protobuf:"bytes,3,opt,name=angle_max,json=angleMax" json:"angle_max,omitempty"`
	AngleIncrement *choreo2.Float32 `protobuf:"bytes,4,opt,name=angle_increment,json=angleIncrement" json:"angle_increment,omitempty"`
	TimeIncrement  *choreo2.Float32 `protobuf:"bytes,5,opt,name=time_increment,json=timeIncrement" json:"time_increment,omitempty"`
	ScanTime       *choreo2.Float32 `protobuf:"bytes,6,opt,name=scan_time,json=scanTime" json:"scan_time,omitempty"`
	RangeMin       *choreo2.Float32 `protobuf:"bytes,7,opt,name=range_min,json=rangeMin" json:"range_min,omitempty"`
	RangeMax       *choreo2.Float32 `protobuf:"bytes,8,opt,name=range_max,json=rangeMax" json:"range_max,omitempty"`
	Ranges         []*LaserEcho     `protobuf:"bytes,9,rep,name=ranges" json:"ranges,omitempty"`
	Intensities    []*LaserEcho     `protobuf:"bytes,10,rep,name=intensities" json:"intensities,omitempty"`
}

func (m *MultiEchoLaserScan) Reset()                    { *m = MultiEchoLaserScan{} }
func (m *MultiEchoLaserScan) String() string            { return proto.CompactTextString(m) }
func (*MultiEchoLaserScan) ProtoMessage()               {}
func (*MultiEchoLaserScan) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultiEchoLaserScan) GetHeader() *choreo3.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MultiEchoLaserScan) GetAngleMin() *choreo2.Float32 {
	if m != nil {
		return m.AngleMin
	}
	return nil
}

func (m *MultiEchoLaserScan) GetAngleMax() *choreo2.Float32 {
	if m != nil {
		return m.AngleMax
	}
	return nil
}

func (m *MultiEchoLaserScan) GetAngleIncrement() *choreo2.Float32 {
	if m != nil {
		return m.AngleIncrement
	}
	return nil
}

func (m *MultiEchoLaserScan) GetTimeIncrement() *choreo2.Float32 {
	if m != nil {
		return m.TimeIncrement
	}
	return nil
}

func (m *MultiEchoLaserScan) GetScanTime() *choreo2.Float32 {
	if m != nil {
		return m.ScanTime
	}
	return nil
}

func (m *MultiEchoLaserScan) GetRangeMin() *choreo2.Float32 {
	if m != nil {
		return m.RangeMin
	}
	return nil
}

func (m *MultiEchoLaserScan) GetRangeMax() *choreo2.Float32 {
	if m != nil {
		return m.RangeMax
	}
	return nil
}

func (m *MultiEchoLaserScan) GetRanges() []*LaserEcho {
	if m != nil {
		return m.Ranges
	}
	return nil
}

func (m *MultiEchoLaserScan) GetIntensities() []*LaserEcho {
	if m != nil {
		return m.Intensities
	}
	return nil
}

type PointField struct {
	Name     *choreo5.String     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Offset   *choreo4.UInt32     `protobuf:"bytes,2,opt,name=offset" json:"offset,omitempty"`
	Datatype PointField_Datatype `protobuf:"varint,3,opt,name=datatype,enum=choreo.PointField_Datatype" json:"datatype,omitempty"`
	Count    *choreo4.UInt32     `protobuf:"bytes,4,opt,name=count" json:"count,omitempty"`
}

func (m *PointField) Reset()                    { *m = PointField{} }
func (m *PointField) String() string            { return proto.CompactTextString(m) }
func (*PointField) ProtoMessage()               {}
func (*PointField) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PointField) GetName() *choreo5.String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *PointField) GetOffset() *choreo4.UInt32 {
	if m != nil {
		return m.Offset
	}
	return nil
}

func (m *PointField) GetDatatype() PointField_Datatype {
	if m != nil {
		return m.Datatype
	}
	return PointField_INT8
}

func (m *PointField) GetCount() *choreo4.UInt32 {
	if m != nil {
		return m.Count
	}
	return nil
}

type PointCloud struct {
	Header   *choreo3.Header           `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Points   []*choreo6.Point32        `protobuf:"bytes,2,rep,name=points" json:"points,omitempty"`
	Channels []*choreo7.ChannelFloat32 `protobuf:"bytes,3,rep,name=channels" json:"channels,omitempty"`
}

func (m *PointCloud) Reset()                    { *m = PointCloud{} }
func (m *PointCloud) String() string            { return proto.CompactTextString(m) }
func (*PointCloud) ProtoMessage()               {}
func (*PointCloud) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PointCloud) GetHeader() *choreo3.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PointCloud) GetPoints() []*choreo6.Point32 {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *PointCloud) GetChannels() []*choreo7.ChannelFloat32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

type PointCloud2 struct {
	Header      *choreo3.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Height      *choreo4.UInt32 `protobuf:"bytes,2,opt,name=height" json:"height,omitempty"`
	Width       *choreo4.UInt32 `protobuf:"bytes,3,opt,name=width" json:"width,omitempty"`
	Fields      []*PointField   `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
	IsBigendian *choreo.Bool    `protobuf:"bytes,5,opt,name=is_bigendian,json=isBigendian" json:"is_bigendian,omitempty"`
	PointStep   *choreo4.UInt32 `protobuf:"bytes,6,opt,name=point_step,json=pointStep" json:"point_step,omitempty"`
	RowStep     *choreo4.UInt32 `protobuf:"bytes,7,opt,name=row_step,json=rowStep" json:"row_step,omitempty"`
	Data        *choreo1.Bytes  `protobuf:"bytes,8,opt,name=data" json:"data,omitempty"`
	IsDense     *choreo.Bool    `protobuf:"bytes,9,opt,name=is_dense,json=isDense" json:"is_dense,omitempty"`
}

func (m *PointCloud2) Reset()                    { *m = PointCloud2{} }
func (m *PointCloud2) String() string            { return proto.CompactTextString(m) }
func (*PointCloud2) ProtoMessage()               {}
func (*PointCloud2) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PointCloud2) GetHeader() *choreo3.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PointCloud2) GetHeight() *choreo4.UInt32 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *PointCloud2) GetWidth() *choreo4.UInt32 {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *PointCloud2) GetFields() []*PointField {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *PointCloud2) GetIsBigendian() *choreo.Bool {
	if m != nil {
		return m.IsBigendian
	}
	return nil
}

func (m *PointCloud2) GetPointStep() *choreo4.UInt32 {
	if m != nil {
		return m.PointStep
	}
	return nil
}

func (m *PointCloud2) GetRowStep() *choreo4.UInt32 {
	if m != nil {
		return m.RowStep
	}
	return nil
}

func (m *PointCloud2) GetData() *choreo1.Bytes {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PointCloud2) GetIsDense() *choreo.Bool {
	if m != nil {
		return m.IsDense
	}
	return nil
}

type Range struct {
	Header        *choreo3.Header     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	RadiationType Range_RadiationType `protobuf:"varint,2,opt,name=radiation_type,json=radiationType,enum=choreo.Range_RadiationType" json:"radiation_type,omitempty"`
	FieldOfView   *choreo2.Float32    `protobuf:"bytes,3,opt,name=field_of_view,json=fieldOfView" json:"field_of_view,omitempty"`
	MinRange      *choreo2.Float32    `protobuf:"bytes,4,opt,name=min_range,json=minRange" json:"min_range,omitempty"`
	MaxRange      *choreo2.Float32    `protobuf:"bytes,5,opt,name=max_range,json=maxRange" json:"max_range,omitempty"`
	Range         *choreo2.Float32    `protobuf:"bytes,6,opt,name=range" json:"range,omitempty"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Range) GetHeader() *choreo3.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Range) GetRadiationType() Range_RadiationType {
	if m != nil {
		return m.RadiationType
	}
	return Range_ULTRASOUND
}

func (m *Range) GetFieldOfView() *choreo2.Float32 {
	if m != nil {
		return m.FieldOfView
	}
	return nil
}

func (m *Range) GetMinRange() *choreo2.Float32 {
	if m != nil {
		return m.MinRange
	}
	return nil
}

func (m *Range) GetMaxRange() *choreo2.Float32 {
	if m != nil {
		return m.MaxRange
	}
	return nil
}

func (m *Range) GetRange() *choreo2.Float32 {
	if m != nil {
		return m.Range
	}
	return nil
}

func init() {
	proto.RegisterType((*LaserEcho)(nil), "choreo.LaserEcho")
	proto.RegisterType((*LaserScan)(nil), "choreo.LaserScan")
	proto.RegisterType((*MultiEchoLaserScan)(nil), "choreo.MultiEchoLaserScan")
	proto.RegisterType((*PointField)(nil), "choreo.PointField")
	proto.RegisterType((*PointCloud)(nil), "choreo.PointCloud")
	proto.RegisterType((*PointCloud2)(nil), "choreo.PointCloud2")
	proto.RegisterType((*Range)(nil), "choreo.Range")
	proto.RegisterEnum("choreo.PointField_Datatype", PointField_Datatype_name, PointField_Datatype_value)
	proto.RegisterEnum("choreo.Range_RadiationType", Range_RadiationType_name, Range_RadiationType_value)
}

func init() { proto.RegisterFile("sensor/depth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 883 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xc7, 0xeb, 0x2f, 0x59, 0x3e, 0x4e, 0x5c, 0x8f, 0xdd, 0x0a, 0xa1, 0xbb, 0xe9, 0x84, 0x6d,
	0x69, 0xb6, 0xc6, 0x46, 0xed, 0x22, 0x2b, 0xb0, 0xab, 0xa4, 0x69, 0x30, 0x03, 0x69, 0x32, 0xc8,
	0xf6, 0x2e, 0x76, 0x23, 0xd0, 0x12, 0x2d, 0x11, 0xb0, 0x48, 0x43, 0xa4, 0x6b, 0xf7, 0x05, 0x76,
	0xbf, 0x37, 0xd8, 0x73, 0xed, 0x05, 0xf6, 0x02, 0x7b, 0x80, 0x81, 0x1f, 0xb2, 0x9d, 0xc4, 0x2e,
	0x72, 0xb9, 0x8b, 0xde, 0x51, 0xe7, 0xff, 0x3b, 0xf4, 0x21, 0xff, 0x3c, 0x27, 0x01, 0x24, 0x08,
	0x13, 0x3c, 0xef, 0xc6, 0x64, 0x2e, 0xd3, 0xce, 0x3c, 0xe7, 0x92, 0x23, 0x27, 0x4a, 0x79, 0x4e,
	0xf8, 0xb3, 0x2f, 0xe7, 0x39, 0xcd, 0xa8, 0xa4, 0x1f, 0x48, 0x77, 0xc2, 0xf9, 0xcc, 0xa8, 0xcf,
	0xbe, 0xda, 0x8a, 0x7e, 0x94, 0x44, 0xdc, 0x0f, 0x4f, 0x67, 0x1c, 0x4b, 0x1b, 0x7e, 0xba, 0x09,
	0xa7, 0x04, 0xc7, 0x24, 0xb7, 0xf1, 0x27, 0x9b, 0x38, 0x65, 0x3b, 0x60, 0x21, 0x73, 0xca, 0x92,
	0x62, 0xef, 0x84, 0xf0, 0x8c, 0xc8, 0x9c, 0x46, 0xdd, 0x39, 0xdf, 0xe0, 0x4f, 0x6c, 0xed, 0x11,
	0xce, 0x48, 0x8e, 0x4d, 0xd0, 0x7f, 0x0d, 0x8d, 0x2b, 0x2c, 0x48, 0xfe, 0x2e, 0x4a, 0x39, 0x3a,
	0x02, 0x87, 0x44, 0x29, 0x27, 0xc2, 0x2b, 0x3d, 0xaf, 0xbc, 0x68, 0xf6, 0x1e, 0x77, 0xcc, 0xd1,
	0x3a, 0x97, 0xaa, 0xc4, 0x7e, 0x2f, 0xb0, 0xb2, 0xff, 0x4f, 0xc5, 0xa6, 0x0d, 0x23, 0xcc, 0xd0,
	0xf7, 0xe0, 0x98, 0x62, 0xbd, 0xd2, 0xf3, 0xd2, 0x8b, 0x66, 0xaf, 0x55, 0xa4, 0xfd, 0xa2, 0xa3,
	0x81, 0x55, 0xd1, 0x4b, 0x68, 0x60, 0x96, 0xcc, 0x48, 0x98, 0x51, 0xe6, 0x95, 0x35, 0x7a, 0xef,
	0x17, 0x5c, 0x4d, 0xbc, 0xa7, 0x6c, 0x8b, 0xc6, 0x2b, 0xaf, 0xf2, 0x49, 0x1a, 0xaf, 0xd0, 0x1b,
	0x78, 0x6c, 0x68, 0xca, 0xa2, 0x9c, 0x64, 0x84, 0x49, 0xaf, 0xba, 0x3b, 0xa7, 0xa5, 0xb9, 0x41,
	0x81, 0xa1, 0x53, 0x68, 0x49, 0x9a, 0x6d, 0x27, 0xd6, 0x76, 0x27, 0x1e, 0x2a, 0x6c, 0x93, 0xf7,
	0x12, 0x1a, 0x22, 0xc2, 0x2c, 0x54, 0x51, 0xcf, 0xd9, 0x53, 0x9f, 0x22, 0x46, 0x34, 0x23, 0x8a,
	0xce, 0x31, 0x4b, 0xcc, 0xd9, 0xeb, 0x7b, 0x68, 0x4d, 0xd8, 0xb3, 0x5b, 0x1a, 0xaf, 0x3c, 0xf7,
	0x93, 0x34, 0x5e, 0x29, 0xdb, 0xf4, 0x5a, 0x78, 0x8d, 0x3d, 0xb6, 0x19, 0x19, 0xbd, 0x82, 0x26,
	0x65, 0x92, 0x30, 0x41, 0x25, 0x25, 0xc2, 0x83, 0xdd, 0xf4, 0x36, 0xe3, 0xff, 0x5b, 0x01, 0xf4,
	0x7e, 0x31, 0x93, 0x54, 0x3d, 0x90, 0xcf, 0x96, 0xff, 0x5f, 0x2c, 0x3f, 0xbe, 0x63, 0xf9, 0x17,
	0x05, 0xba, 0x6e, 0xe6, 0xb5, 0xe9, 0xfd, 0x5d, 0xa6, 0xef, 0xe0, 0x6f, 0xd9, 0xfe, 0x57, 0x19,
	0xe0, 0x57, 0x35, 0x3b, 0x2e, 0x29, 0x99, 0xc5, 0xc8, 0x87, 0x2a, 0xc3, 0x19, 0xb9, 0x6b, 0xf6,
	0x50, 0x4f, 0x9d, 0x40, 0x6b, 0xea, 0x49, 0xf0, 0xe9, 0x54, 0x10, 0x69, 0x7d, 0x5e, 0x53, 0xe3,
	0x01, 0xd3, 0x8f, 0xd0, 0xa8, 0xe8, 0x27, 0x70, 0x63, 0x2c, 0xb1, 0xfc, 0x38, 0x27, 0xda, 0xe3,
	0x56, 0xef, 0xeb, 0x82, 0xdc, 0xfc, 0x62, 0xe7, 0xc2, 0x22, 0xc1, 0x1a, 0x46, 0xdf, 0x42, 0x2d,
	0xe2, 0x8b, 0xb5, 0xcb, 0x77, 0xf7, 0x37, 0xa2, 0x9f, 0x80, 0x5b, 0xe4, 0x22, 0x17, 0xaa, 0x83,
	0xeb, 0xd1, 0x9b, 0xf6, 0x23, 0xd4, 0x80, 0xda, 0x58, 0x2f, 0x4b, 0x6a, 0x39, 0xb8, 0x1e, 0xbd,
	0x3a, 0x6d, 0x97, 0x11, 0x80, 0x33, 0x36, 0xeb, 0x8a, 0x0d, 0xf7, 0x7b, 0xed, 0x6a, 0x11, 0xee,
	0xf7, 0xda, 0x35, 0xd4, 0x84, 0xfa, 0xe5, 0xd5, 0xcd, 0x99, 0xfa, 0x70, 0xd6, 0x1f, 0xa7, 0xaf,
	0xdb, 0x75, 0xff, 0xcf, 0x92, 0xbd, 0xa2, 0xb7, 0x33, 0xbe, 0x88, 0x1f, 0xdc, 0x11, 0x47, 0xe0,
	0xe8, 0xa1, 0x2c, 0xbc, 0xf2, 0xed, 0xf6, 0xd3, 0x7b, 0xa9, 0x7b, 0x32, 0x32, 0xea, 0x81, 0x1b,
	0xa5, 0x98, 0x31, 0x32, 0x13, 0x5e, 0x45, 0xa3, 0x4f, 0x0b, 0xf4, 0xad, 0x89, 0xaf, 0x9f, 0x45,
	0xc1, 0xf9, 0x7f, 0x54, 0xa0, 0xb9, 0xa9, 0xa9, 0xf7, 0xe0, 0xa2, 0x34, 0x47, 0x93, 0x74, 0xaf,
	0x77, 0x46, 0x55, 0x16, 0x2c, 0x69, 0x2c, 0x53, 0xdb, 0x9c, 0xf7, 0x2c, 0xd0, 0x22, 0xfa, 0x01,
	0x9c, 0xa9, 0x32, 0x51, 0x78, 0x55, 0x5d, 0x37, 0xba, 0xef, 0x6f, 0x60, 0x09, 0xd4, 0x85, 0x03,
	0x2a, 0xc2, 0x09, 0x4d, 0x08, 0x8b, 0x29, 0x66, 0xb6, 0x11, 0x0f, 0x8a, 0x8c, 0x73, 0xce, 0x67,
	0x41, 0x93, 0x8a, 0xf3, 0x02, 0x40, 0x27, 0x00, 0xfa, 0x82, 0x42, 0x21, 0xc9, 0xdc, 0x36, 0xe1,
	0xdd, 0x3a, 0x1a, 0x9a, 0x18, 0x4a, 0x32, 0x47, 0xc7, 0xe0, 0xe6, 0x7c, 0x69, 0xe0, 0xfa, 0x4e,
	0xb8, 0x9e, 0xf3, 0xa5, 0x46, 0xbf, 0x81, 0xaa, 0x7a, 0x6b, 0xb6, 0xf9, 0x0e, 0xd7, 0x25, 0xa8,
	0xbf, 0xda, 0x81, 0x96, 0xd0, 0x11, 0xb8, 0x54, 0x84, 0x31, 0x61, 0x82, 0x78, 0x8d, 0x1d, 0x95,
	0xd6, 0xa9, 0xb8, 0x50, 0xa2, 0xff, 0x77, 0x19, 0x6a, 0x81, 0xea, 0xbf, 0x07, 0x5b, 0x70, 0x0e,
	0xad, 0x1c, 0xc7, 0x14, 0x4b, 0xca, 0x59, 0xa8, 0x9b, 0xa3, 0x7c, 0xbb, 0x39, 0xf4, 0x76, 0x9d,
	0xa0, 0x60, 0x46, 0xaa, 0x39, 0x0e, 0xf3, 0xed, 0x4f, 0xd4, 0x87, 0x43, 0x7d, 0xad, 0x21, 0x9f,
	0x86, 0x1f, 0x28, 0x59, 0xee, 0x9b, 0xa1, 0x4d, 0x4d, 0xdd, 0x4c, 0x7f, 0xa3, 0x64, 0xa9, 0x06,
	0x4f, 0x46, 0x59, 0xa8, 0xa7, 0xc5, 0xbe, 0x01, 0xea, 0x66, 0x94, 0x99, 0xe3, 0x28, 0x1a, 0xaf,
	0x2c, 0x5d, 0xdb, 0x47, 0xe3, 0x95, 0xa1, 0xbf, 0x83, 0x9a, 0x21, 0xf7, 0x0c, 0x4b, 0xa3, 0xfa,
	0x27, 0x70, 0x78, 0xeb, 0x5c, 0xa8, 0x05, 0x30, 0xbe, 0x1a, 0x05, 0x67, 0xc3, 0x9b, 0xf1, 0xf5,
	0x45, 0xfb, 0x11, 0x3a, 0x00, 0x77, 0x70, 0x7d, 0x19, 0x9c, 0x05, 0xef, 0x2e, 0xda, 0xa5, 0xf3,
	0x1f, 0x7f, 0x3f, 0x4e, 0xa8, 0x4c, 0x17, 0x93, 0x4e, 0xc4, 0xb3, 0x6e, 0xc0, 0x27, 0x5c, 0x0e,
	0xe5, 0x22, 0xa6, 0xbc, 0x6b, 0xb6, 0x3f, 0xc9, 0x44, 0xd2, 0xcd, 0x44, 0xf2, 0x73, 0x26, 0x92,
	0x89, 0xa3, 0xff, 0xcf, 0xe9, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x24, 0x35, 0xa5, 0x23, 0xba,
	0x09, 0x00, 0x00,
}
