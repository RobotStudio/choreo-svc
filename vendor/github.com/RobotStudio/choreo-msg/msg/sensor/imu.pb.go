// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor/imu.proto

package sensor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo1 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo7 "github.com/RobotStudio/choreo-msg/msg/geometric"
import choreo8 "github.com/RobotStudio/choreo-msg/msg/geometric"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NavSatStatus_Status int32

const (
	NavSatStatus_NO_FIX   NavSatStatus_Status = 0
	NavSatStatus_FIX      NavSatStatus_Status = 1
	NavSatStatus_SBAS_FIX NavSatStatus_Status = 2
	NavSatStatus_GBAS_FIX NavSatStatus_Status = 3
)

var NavSatStatus_Status_name = map[int32]string{
	0: "NO_FIX",
	1: "FIX",
	2: "SBAS_FIX",
	3: "GBAS_FIX",
}
var NavSatStatus_Status_value = map[string]int32{
	"NO_FIX":   0,
	"FIX":      1,
	"SBAS_FIX": 2,
	"GBAS_FIX": 3,
}

func (x NavSatStatus_Status) String() string {
	return proto.EnumName(NavSatStatus_Status_name, int32(x))
}
func (NavSatStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 0} }

type NavSatStatus_Service int32

const (
	NavSatStatus_GPS     NavSatStatus_Service = 0
	NavSatStatus_GLONASS NavSatStatus_Service = 1
	NavSatStatus_COMPASS NavSatStatus_Service = 2
	NavSatStatus_GALILEO NavSatStatus_Service = 3
)

var NavSatStatus_Service_name = map[int32]string{
	0: "GPS",
	1: "GLONASS",
	2: "COMPASS",
	3: "GALILEO",
}
var NavSatStatus_Service_value = map[string]int32{
	"GPS":     0,
	"GLONASS": 1,
	"COMPASS": 2,
	"GALILEO": 3,
}

func (x NavSatStatus_Service) String() string {
	return proto.EnumName(NavSatStatus_Service_name, int32(x))
}
func (NavSatStatus_Service) EnumDescriptor() ([]byte, []int) { return fileDescriptor4, []int{2, 1} }

type NavSatFix_PositionCovarianceType int32

const (
	NavSatFix_UNKNOWN          NavSatFix_PositionCovarianceType = 0
	NavSatFix_APPROXIMATED     NavSatFix_PositionCovarianceType = 1
	NavSatFix_DIAGONAL_UNKNOWN NavSatFix_PositionCovarianceType = 2
	NavSatFix_KNOWN            NavSatFix_PositionCovarianceType = 3
)

var NavSatFix_PositionCovarianceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "APPROXIMATED",
	2: "DIAGONAL_UNKNOWN",
	3: "KNOWN",
}
var NavSatFix_PositionCovarianceType_value = map[string]int32{
	"UNKNOWN":          0,
	"APPROXIMATED":     1,
	"DIAGONAL_UNKNOWN": 2,
	"KNOWN":            3,
}

func (x NavSatFix_PositionCovarianceType) String() string {
	return proto.EnumName(NavSatFix_PositionCovarianceType_name, int32(x))
}
func (NavSatFix_PositionCovarianceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor4, []int{3, 0}
}

type IMU struct {
	Header                       *choreo1.Header     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Orientation                  *choreo7.Quaternion `protobuf:"bytes,2,opt,name=orientation" json:"orientation,omitempty"`
	OrientationCovariance        []*choreo.Float64   `protobuf:"bytes,3,rep,name=orientation_covariance,json=orientationCovariance" json:"orientation_covariance,omitempty"`
	AngularVelocity              *choreo8.Vector3    `protobuf:"bytes,4,opt,name=angular_velocity,json=angularVelocity" json:"angular_velocity,omitempty"`
	AngularVelocityCovariance    []*choreo.Float64   `protobuf:"bytes,5,rep,name=angular_velocity_covariance,json=angularVelocityCovariance" json:"angular_velocity_covariance,omitempty"`
	LinearAcceleration           *choreo8.Vector3    `protobuf:"bytes,6,opt,name=linear_acceleration,json=linearAcceleration" json:"linear_acceleration,omitempty"`
	LinearAccelerationCovariance []*choreo.Float64   `protobuf:"bytes,7,rep,name=linear_acceleration_covariance,json=linearAccelerationCovariance" json:"linear_acceleration_covariance,omitempty"`
}

func (m *IMU) Reset()                    { *m = IMU{} }
func (m *IMU) String() string            { return proto.CompactTextString(m) }
func (*IMU) ProtoMessage()               {}
func (*IMU) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *IMU) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *IMU) GetOrientation() *choreo7.Quaternion {
	if m != nil {
		return m.Orientation
	}
	return nil
}

func (m *IMU) GetOrientationCovariance() []*choreo.Float64 {
	if m != nil {
		return m.OrientationCovariance
	}
	return nil
}

func (m *IMU) GetAngularVelocity() *choreo8.Vector3 {
	if m != nil {
		return m.AngularVelocity
	}
	return nil
}

func (m *IMU) GetAngularVelocityCovariance() []*choreo.Float64 {
	if m != nil {
		return m.AngularVelocityCovariance
	}
	return nil
}

func (m *IMU) GetLinearAcceleration() *choreo8.Vector3 {
	if m != nil {
		return m.LinearAcceleration
	}
	return nil
}

func (m *IMU) GetLinearAccelerationCovariance() []*choreo.Float64 {
	if m != nil {
		return m.LinearAccelerationCovariance
	}
	return nil
}

type MagneticField struct {
	Header                  *choreo1.Header   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	MagneticField           *choreo8.Vector3  `protobuf:"bytes,2,opt,name=magnetic_field,json=magneticField" json:"magnetic_field,omitempty"`
	MagneticFieldCovariance []*choreo.Float64 `protobuf:"bytes,3,rep,name=magnetic_field_covariance,json=magneticFieldCovariance" json:"magnetic_field_covariance,omitempty"`
}

func (m *MagneticField) Reset()                    { *m = MagneticField{} }
func (m *MagneticField) String() string            { return proto.CompactTextString(m) }
func (*MagneticField) ProtoMessage()               {}
func (*MagneticField) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *MagneticField) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MagneticField) GetMagneticField() *choreo8.Vector3 {
	if m != nil {
		return m.MagneticField
	}
	return nil
}

func (m *MagneticField) GetMagneticFieldCovariance() []*choreo.Float64 {
	if m != nil {
		return m.MagneticFieldCovariance
	}
	return nil
}

type NavSatStatus struct {
	NavSatStatus  NavSatStatus_Status  `protobuf:"varint,1,opt,name=nav_sat_status,json=navSatStatus,enum=choreo.NavSatStatus_Status" json:"nav_sat_status,omitempty"`
	NavSatService NavSatStatus_Service `protobuf:"varint,2,opt,name=nav_sat_service,json=navSatService,enum=choreo.NavSatStatus_Service" json:"nav_sat_service,omitempty"`
}

func (m *NavSatStatus) Reset()                    { *m = NavSatStatus{} }
func (m *NavSatStatus) String() string            { return proto.CompactTextString(m) }
func (*NavSatStatus) ProtoMessage()               {}
func (*NavSatStatus) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *NavSatStatus) GetNavSatStatus() NavSatStatus_Status {
	if m != nil {
		return m.NavSatStatus
	}
	return NavSatStatus_NO_FIX
}

func (m *NavSatStatus) GetNavSatService() NavSatStatus_Service {
	if m != nil {
		return m.NavSatService
	}
	return NavSatStatus_GPS
}

type NavSatFix struct {
	Header                 *choreo1.Header                  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	NavSatStatus           *NavSatStatus                    `protobuf:"bytes,2,opt,name=nav_sat_status,json=navSatStatus" json:"nav_sat_status,omitempty"`
	Latitude               *choreo.Float64                  `protobuf:"bytes,3,opt,name=latitude" json:"latitude,omitempty"`
	Longitude              *choreo.Float64                  `protobuf:"bytes,4,opt,name=longitude" json:"longitude,omitempty"`
	Altitude               *choreo.Float64                  `protobuf:"bytes,5,opt,name=altitude" json:"altitude,omitempty"`
	PositionCovariance     []*choreo.Float64                `protobuf:"bytes,6,rep,name=position_covariance,json=positionCovariance" json:"position_covariance,omitempty"`
	PositionCovarianceType NavSatFix_PositionCovarianceType `protobuf:"varint,7,opt,name=position_covariance_type,json=positionCovarianceType,enum=choreo.NavSatFix_PositionCovarianceType" json:"position_covariance_type,omitempty"`
}

func (m *NavSatFix) Reset()                    { *m = NavSatFix{} }
func (m *NavSatFix) String() string            { return proto.CompactTextString(m) }
func (*NavSatFix) ProtoMessage()               {}
func (*NavSatFix) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *NavSatFix) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NavSatFix) GetNavSatStatus() *NavSatStatus {
	if m != nil {
		return m.NavSatStatus
	}
	return nil
}

func (m *NavSatFix) GetLatitude() *choreo.Float64 {
	if m != nil {
		return m.Latitude
	}
	return nil
}

func (m *NavSatFix) GetLongitude() *choreo.Float64 {
	if m != nil {
		return m.Longitude
	}
	return nil
}

func (m *NavSatFix) GetAltitude() *choreo.Float64 {
	if m != nil {
		return m.Altitude
	}
	return nil
}

func (m *NavSatFix) GetPositionCovariance() []*choreo.Float64 {
	if m != nil {
		return m.PositionCovariance
	}
	return nil
}

func (m *NavSatFix) GetPositionCovarianceType() NavSatFix_PositionCovarianceType {
	if m != nil {
		return m.PositionCovarianceType
	}
	return NavSatFix_UNKNOWN
}

func init() {
	proto.RegisterType((*IMU)(nil), "choreo.IMU")
	proto.RegisterType((*MagneticField)(nil), "choreo.MagneticField")
	proto.RegisterType((*NavSatStatus)(nil), "choreo.NavSatStatus")
	proto.RegisterType((*NavSatFix)(nil), "choreo.NavSatFix")
	proto.RegisterEnum("choreo.NavSatStatus_Status", NavSatStatus_Status_name, NavSatStatus_Status_value)
	proto.RegisterEnum("choreo.NavSatStatus_Service", NavSatStatus_Service_name, NavSatStatus_Service_value)
	proto.RegisterEnum("choreo.NavSatFix_PositionCovarianceType", NavSatFix_PositionCovarianceType_name, NavSatFix_PositionCovarianceType_value)
}

func init() { proto.RegisterFile("sensor/imu.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 692 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xdd, 0x6e, 0xda, 0x30,
	0x14, 0xc7, 0x0b, 0x69, 0xa1, 0x3d, 0x50, 0x1a, 0x79, 0x2d, 0xa3, 0x1f, 0x9a, 0x2a, 0x2e, 0xa6,
	0x4a, 0x5b, 0x41, 0xa2, 0x55, 0xa5, 0xf6, 0x6a, 0xe9, 0x07, 0x0c, 0x15, 0x08, 0x4b, 0xda, 0xae,
	0xda, 0x4d, 0x64, 0x82, 0x4b, 0x2d, 0x85, 0x98, 0x05, 0x13, 0xb5, 0x0f, 0xb1, 0x37, 0xda, 0x4b,
	0xec, 0x6d, 0x76, 0x39, 0x39, 0x4e, 0x20, 0x40, 0x26, 0xf5, 0x02, 0x91, 0x73, 0xfc, 0x3f, 0x3f,
	0xfe, 0xc7, 0xc7, 0x26, 0xa0, 0x8e, 0x89, 0x3b, 0x66, 0x5e, 0x95, 0x0e, 0x27, 0x95, 0x91, 0xc7,
	0x38, 0x43, 0x19, 0xfb, 0x99, 0x79, 0x84, 0xed, 0xed, 0x8c, 0x3c, 0x3a, 0xa4, 0x9c, 0xfa, 0xa4,
	0xfa, 0xe4, 0x30, 0xcc, 0xe5, 0xf2, 0x5e, 0x71, 0x96, 0x7e, 0x26, 0xb8, 0x4f, 0xbc, 0x30, 0xbf,
	0x37, 0x20, 0x6c, 0x48, 0xb8, 0x47, 0xed, 0xea, 0xcf, 0x09, 0xe6, 0xc4, 0x73, 0x29, 0x73, 0xa3,
	0x9a, 0xd9, 0x9a, 0x4f, 0x6c, 0xce, 0xc2, 0x9a, 0xf2, 0x1f, 0x05, 0x94, 0x66, 0xfb, 0x1e, 0x7d,
	0x84, 0x8c, 0x64, 0x95, 0x52, 0x87, 0xa9, 0xa3, 0x5c, 0xad, 0x50, 0x91, 0x1e, 0x2a, 0x5f, 0x83,
	0xac, 0x11, 0xae, 0xa2, 0x53, 0xc8, 0x31, 0x8f, 0x12, 0x97, 0x63, 0x4e, 0x99, 0x5b, 0x4a, 0x07,
	0x62, 0x14, 0x89, 0xbf, 0x4d, 0x7f, 0xd6, 0x88, 0xcb, 0x50, 0x1d, 0x8a, 0xb1, 0xd0, 0xb2, 0x99,
	0x8f, 0x3d, 0x8a, 0x5d, 0x9b, 0x94, 0x94, 0x43, 0xe5, 0x28, 0x57, 0xdb, 0x8a, 0x00, 0x75, 0xd1,
	0xe6, 0xd9, 0xa9, 0xb1, 0x13, 0x93, 0x5f, 0x4d, 0xd5, 0xe8, 0x02, 0x54, 0xec, 0x0e, 0x26, 0x0e,
	0xf6, 0x2c, 0x9f, 0x38, 0xcc, 0xa6, 0xfc, 0xb5, 0xb4, 0x1a, 0x58, 0x98, 0x12, 0x1e, 0x82, 0xee,
	0x4e, 0x8c, 0xad, 0x50, 0xf8, 0x10, 0xea, 0x90, 0x0e, 0xfb, 0x8b, 0xb5, 0x71, 0x23, 0x6b, 0xc9,
	0x46, 0x76, 0x17, 0x30, 0x31, 0x33, 0x5f, 0xe0, 0x9d, 0x43, 0x5d, 0x82, 0x3d, 0x0b, 0xdb, 0x36,
	0x71, 0x88, 0x27, 0xb7, 0x24, 0x93, 0xec, 0x07, 0x49, 0xad, 0x16, 0x93, 0xa2, 0x7b, 0xf8, 0x90,
	0x40, 0x88, 0xbb, 0xca, 0x26, 0xbb, 0x3a, 0x58, 0x86, 0xcd, 0x8c, 0x95, 0x7f, 0xa7, 0x60, 0xb3,
	0x8d, 0x07, 0x2e, 0xe1, 0xd4, 0xae, 0x53, 0xe2, 0xf4, 0xdf, 0x3c, 0xdd, 0x33, 0x28, 0x0c, 0xc3,
	0x42, 0xeb, 0x49, 0x54, 0x86, 0x03, 0x5e, 0xea, 0x66, 0x73, 0x38, 0xc7, 0xbf, 0x85, 0xdd, 0xf9,
	0xba, 0x37, 0x8c, 0xf8, 0xfd, 0x1c, 0x22, 0x66, 0xff, 0x57, 0x1a, 0xf2, 0x1d, 0xec, 0x9b, 0x98,
	0x9b, 0x1c, 0xf3, 0xc9, 0x18, 0x69, 0x50, 0x70, 0xb1, 0x6f, 0x8d, 0x31, 0xb7, 0xc6, 0x41, 0x26,
	0xe8, 0xa2, 0x50, 0xdb, 0x8f, 0x90, 0x71, 0x75, 0x45, 0x7e, 0x19, 0x79, 0x37, 0x8e, 0xb8, 0x86,
	0xad, 0x29, 0x82, 0x78, 0x3e, 0xb5, 0x49, 0xd0, 0x59, 0xa1, 0x76, 0x90, 0xcc, 0x90, 0x1a, 0x63,
	0x33, 0x84, 0xc8, 0xb0, 0x7c, 0x0e, 0x99, 0x90, 0x07, 0x90, 0xe9, 0xe8, 0x56, 0xbd, 0xf9, 0xa8,
	0xae, 0xa0, 0x2c, 0x28, 0xe2, 0x21, 0x85, 0xf2, 0xb0, 0x6e, 0x5e, 0x6a, 0x66, 0x90, 0x4e, 0x8b,
	0xa8, 0x11, 0x45, 0x4a, 0xf9, 0x1c, 0xb2, 0x21, 0x45, 0xe8, 0x1b, 0x5d, 0x53, 0x5d, 0x41, 0x39,
	0xc8, 0x36, 0x5a, 0x7a, 0x47, 0x33, 0x4d, 0x35, 0x25, 0x82, 0x2b, 0xbd, 0xdd, 0x15, 0x41, 0x3a,
	0x58, 0xd1, 0x5a, 0xcd, 0xd6, 0x8d, 0xae, 0x2a, 0xe5, 0xbf, 0x0a, 0x6c, 0x48, 0x77, 0x75, 0xfa,
	0xf2, 0xe6, 0x51, 0x5e, 0x2c, 0x6d, 0x9a, 0x1c, 0xe5, 0x76, 0x52, 0xc3, 0x0b, 0xbb, 0xf5, 0x09,
	0xd6, 0x1d, 0xcc, 0x29, 0x9f, 0xf4, 0xc5, 0xf4, 0x52, 0x49, 0xd3, 0x9b, 0x0a, 0xd0, 0x31, 0x6c,
	0x38, 0xcc, 0x1d, 0x48, 0xf5, 0x6a, 0xb2, 0x7a, 0xa6, 0x10, 0x6c, 0xec, 0x84, 0xec, 0xb5, 0xff,
	0xb0, 0x23, 0x81, 0xb8, 0x62, 0x23, 0x36, 0xa6, 0x8b, 0xb7, 0x22, 0x93, 0x7c, 0xa2, 0x50, 0xa4,
	0x8d, 0x5d, 0xd2, 0x1e, 0x94, 0x12, 0x08, 0x16, 0x7f, 0x1d, 0x89, 0xcb, 0x25, 0x4e, 0xc0, 0xd1,
	0xfc, 0x86, 0xd4, 0xe9, 0x4b, 0xa5, 0xbb, 0xc4, 0xb9, 0x7b, 0x1d, 0x11, 0xa3, 0x38, 0x4a, 0xcc,
	0x97, 0x1f, 0xa1, 0x98, 0x5c, 0x21, 0xe6, 0x78, 0xdf, 0xb9, 0xed, 0xe8, 0xdf, 0x3b, 0xea, 0x0a,
	0x52, 0x21, 0xaf, 0x75, 0xbb, 0x86, 0xfe, 0xd8, 0x6c, 0x6b, 0x77, 0x37, 0xd7, 0x6a, 0x0a, 0x6d,
	0x83, 0x7a, 0xdd, 0xd4, 0x1a, 0x7a, 0x47, 0x6b, 0x59, 0x91, 0x2e, 0x8d, 0x36, 0x60, 0x4d, 0x3e,
	0x2a, 0x97, 0x95, 0x1f, 0x9f, 0x07, 0x94, 0x3f, 0x4f, 0x7a, 0x15, 0x9b, 0x0d, 0xab, 0x06, 0xeb,
	0x31, 0x6e, 0xf2, 0x49, 0x9f, 0xb2, 0xaa, 0xf4, 0x7c, 0x3c, 0x1c, 0x0f, 0xaa, 0xe2, 0x23, 0x5f,
	0x21, 0xbd, 0x4c, 0xf0, 0xa7, 0x7e, 0xf2, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x3e, 0xa5, 0x5a,
	0x53, 0x06, 0x00, 0x00,
}
