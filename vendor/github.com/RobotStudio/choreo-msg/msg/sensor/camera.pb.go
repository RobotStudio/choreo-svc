// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor/camera.proto

package rs_choreo_msg_sensor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo3 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo1 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo4 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo2 "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegionOfInterest struct {
	XOffset   *choreo4.UInt32 `protobuf:"bytes,1,opt,name=x_offset,json=xOffset" json:"x_offset,omitempty"`
	YOffset   *choreo4.UInt32 `protobuf:"bytes,2,opt,name=y_offset,json=yOffset" json:"y_offset,omitempty"`
	Height    *choreo4.UInt32 `protobuf:"bytes,3,opt,name=height" json:"height,omitempty"`
	Width     *choreo4.UInt32 `protobuf:"bytes,4,opt,name=width" json:"width,omitempty"`
	DoRectify *choreo3.Bool   `protobuf:"bytes,5,opt,name=do_rectify,json=doRectify" json:"do_rectify,omitempty"`
}

func (m *RegionOfInterest) Reset()                    { *m = RegionOfInterest{} }
func (m *RegionOfInterest) String() string            { return proto.CompactTextString(m) }
func (*RegionOfInterest) ProtoMessage()               {}
func (*RegionOfInterest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RegionOfInterest) GetXOffset() *choreo4.UInt32 {
	if m != nil {
		return m.XOffset
	}
	return nil
}

func (m *RegionOfInterest) GetYOffset() *choreo4.UInt32 {
	if m != nil {
		return m.YOffset
	}
	return nil
}

func (m *RegionOfInterest) GetHeight() *choreo4.UInt32 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *RegionOfInterest) GetWidth() *choreo4.UInt32 {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *RegionOfInterest) GetDoRectify() *choreo3.Bool {
	if m != nil {
		return m.DoRectify
	}
	return nil
}

type CameraInfo struct {
	Header          *choreo1.Header   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Height          *choreo4.UInt32   `protobuf:"bytes,2,opt,name=height" json:"height,omitempty"`
	Width           *choreo4.UInt32   `protobuf:"bytes,3,opt,name=width" json:"width,omitempty"`
	DistortionModel *choreo2.String   `protobuf:"bytes,4,opt,name=distortion_model,json=distortionModel" json:"distortion_model,omitempty"`
	D               []*choreo.Float64 `protobuf:"bytes,5,rep,name=D" json:"D,omitempty"`
	K               []*choreo.Float64 `protobuf:"bytes,6,rep,name=K" json:"K,omitempty"`
	P               []*choreo.Float64 `protobuf:"bytes,7,rep,name=P" json:"P,omitempty"`
	BinningX        *choreo4.UInt32   `protobuf:"bytes,8,opt,name=binning_x,json=binningX" json:"binning_x,omitempty"`
	BinningY        *choreo4.UInt32   `protobuf:"bytes,9,opt,name=binning_y,json=binningY" json:"binning_y,omitempty"`
	Roi             *RegionOfInterest `protobuf:"bytes,10,opt,name=roi" json:"roi,omitempty"`
}

func (m *CameraInfo) Reset()                    { *m = CameraInfo{} }
func (m *CameraInfo) String() string            { return proto.CompactTextString(m) }
func (*CameraInfo) ProtoMessage()               {}
func (*CameraInfo) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *CameraInfo) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CameraInfo) GetHeight() *choreo4.UInt32 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *CameraInfo) GetWidth() *choreo4.UInt32 {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *CameraInfo) GetDistortionModel() *choreo2.String {
	if m != nil {
		return m.DistortionModel
	}
	return nil
}

func (m *CameraInfo) GetD() []*choreo.Float64 {
	if m != nil {
		return m.D
	}
	return nil
}

func (m *CameraInfo) GetK() []*choreo.Float64 {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *CameraInfo) GetP() []*choreo.Float64 {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *CameraInfo) GetBinningX() *choreo4.UInt32 {
	if m != nil {
		return m.BinningX
	}
	return nil
}

func (m *CameraInfo) GetBinningY() *choreo4.UInt32 {
	if m != nil {
		return m.BinningY
	}
	return nil
}

func (m *CameraInfo) GetRoi() *RegionOfInterest {
	if m != nil {
		return m.Roi
	}
	return nil
}

type ChannelFloat32 struct {
	Name   *choreo2.String   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Values []*choreo.Float32 `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *ChannelFloat32) Reset()                    { *m = ChannelFloat32{} }
func (m *ChannelFloat32) String() string            { return proto.CompactTextString(m) }
func (*ChannelFloat32) ProtoMessage()               {}
func (*ChannelFloat32) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ChannelFloat32) GetName() *choreo2.String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ChannelFloat32) GetValues() []*choreo.Float32 {
	if m != nil {
		return m.Values
	}
	return nil
}

type CompressedImage struct {
	Header *choreo1.Header   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Format *choreo2.String   `protobuf:"bytes,2,opt,name=format" json:"format,omitempty"`
	Data   []*choreo4.UInt32 `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *CompressedImage) Reset()                    { *m = CompressedImage{} }
func (m *CompressedImage) String() string            { return proto.CompactTextString(m) }
func (*CompressedImage) ProtoMessage()               {}
func (*CompressedImage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CompressedImage) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CompressedImage) GetFormat() *choreo2.String {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *CompressedImage) GetData() []*choreo4.UInt32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type Image struct {
	Header      *choreo1.Header   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Height      *choreo4.UInt32   `protobuf:"bytes,2,opt,name=height" json:"height,omitempty"`
	Width       *choreo4.UInt32   `protobuf:"bytes,3,opt,name=width" json:"width,omitempty"`
	Encoding    *choreo2.String   `protobuf:"bytes,4,opt,name=encoding" json:"encoding,omitempty"`
	IsBigendian *choreo3.Bool     `protobuf:"bytes,5,opt,name=is_bigendian,json=isBigendian" json:"is_bigendian,omitempty"`
	Step        *choreo4.UInt32   `protobuf:"bytes,6,opt,name=step" json:"step,omitempty"`
	Data        []*choreo4.UInt32 `protobuf:"bytes,7,rep,name=data" json:"data,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *Image) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Image) GetHeight() *choreo4.UInt32 {
	if m != nil {
		return m.Height
	}
	return nil
}

func (m *Image) GetWidth() *choreo4.UInt32 {
	if m != nil {
		return m.Width
	}
	return nil
}

func (m *Image) GetEncoding() *choreo2.String {
	if m != nil {
		return m.Encoding
	}
	return nil
}

func (m *Image) GetIsBigendian() *choreo3.Bool {
	if m != nil {
		return m.IsBigendian
	}
	return nil
}

func (m *Image) GetStep() *choreo4.UInt32 {
	if m != nil {
		return m.Step
	}
	return nil
}

func (m *Image) GetData() []*choreo4.UInt32 {
	if m != nil {
		return m.Data
	}
	return nil
}

type ColorRGBA struct {
	R *choreo.Float32 `protobuf:"bytes,1,opt,name=r" json:"r,omitempty"`
	G *choreo.Float32 `protobuf:"bytes,2,opt,name=g" json:"g,omitempty"`
	B *choreo.Float32 `protobuf:"bytes,3,opt,name=b" json:"b,omitempty"`
	A *choreo.Float32 `protobuf:"bytes,4,opt,name=a" json:"a,omitempty"`
}

func (m *ColorRGBA) Reset()                    { *m = ColorRGBA{} }
func (m *ColorRGBA) String() string            { return proto.CompactTextString(m) }
func (*ColorRGBA) ProtoMessage()               {}
func (*ColorRGBA) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ColorRGBA) GetR() *choreo.Float32 {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *ColorRGBA) GetG() *choreo.Float32 {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *ColorRGBA) GetB() *choreo.Float32 {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *ColorRGBA) GetA() *choreo.Float32 {
	if m != nil {
		return m.A
	}
	return nil
}

func init() {
	proto.RegisterType((*RegionOfInterest)(nil), "choreo.RegionOfInterest")
	proto.RegisterType((*CameraInfo)(nil), "choreo.CameraInfo")
	proto.RegisterType((*ChannelFloat32)(nil), "choreo.ChannelFloat32")
	proto.RegisterType((*CompressedImage)(nil), "choreo.CompressedImage")
	proto.RegisterType((*Image)(nil), "choreo.Image")
	proto.RegisterType((*ColorRGBA)(nil), "choreo.ColorRGBA")
}

func init() { proto.RegisterFile("sensor/camera.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xd1, 0x6a, 0xdb, 0x3c,
	0x18, 0x86, 0x71, 0xd2, 0xa4, 0x89, 0x5a, 0xda, 0xe2, 0xfe, 0xff, 0x10, 0x85, 0x41, 0x31, 0x63,
	0xeb, 0x5a, 0x16, 0x43, 0x3a, 0x06, 0x63, 0x47, 0x4d, 0xca, 0xb6, 0x50, 0x46, 0x8b, 0xcb, 0x60,
	0x1b, 0x8c, 0x20, 0xc7, 0xb2, 0x2c, 0xb0, 0xf5, 0x05, 0x49, 0xed, 0x9a, 0x0b, 0x18, 0xbb, 0x8d,
	0xb1, 0x5b, 0xdb, 0x8d, 0x0c, 0xc9, 0x72, 0x53, 0x12, 0x37, 0xac, 0xb0, 0x83, 0x9c, 0x7c, 0xcf,
	0x43, 0xf2, 0xea, 0xd5, 0x17, 0xa1, 0x5d, 0x45, 0x85, 0x02, 0x19, 0x4e, 0x48, 0x41, 0x25, 0xe9,
	0x4d, 0x25, 0x68, 0xf0, 0xdb, 0x93, 0x0c, 0x24, 0x85, 0xbd, 0xff, 0xa6, 0x92, 0x17, 0x5c, 0xf3,
	0x6b, 0x1a, 0xc6, 0x00, 0x79, 0x49, 0xf7, 0xfe, 0x9f, 0x4f, 0xd3, 0x1c, 0x88, 0x76, 0xe3, 0x47,
	0xf3, 0x71, 0x46, 0x49, 0x42, 0xa5, 0x9b, 0xef, 0xce, 0xe7, 0x5c, 0xd4, 0xc8, 0x4a, 0x4b, 0x2e,
	0x58, 0x39, 0x0f, 0x7e, 0x7b, 0x68, 0x27, 0xa2, 0x8c, 0x83, 0x38, 0x4f, 0x47, 0x42, 0x53, 0x49,
	0x95, 0xf6, 0x9f, 0xa3, 0xce, 0xcd, 0x18, 0xd2, 0x54, 0x51, 0x8d, 0xbd, 0x7d, 0xef, 0x60, 0xa3,
	0xbf, 0xd5, 0x2b, 0x13, 0xf6, 0x3e, 0x8e, 0x84, 0x3e, 0xee, 0x47, 0xeb, 0x37, 0xe7, 0x16, 0x1b,
	0x75, 0x56, 0xa9, 0x8d, 0x7a, 0x75, 0xe6, 0xd4, 0xa7, 0xa8, 0x9d, 0x51, 0xce, 0x32, 0x8d, 0x9b,
	0xb5, 0xa2, 0xa3, 0xfe, 0x13, 0xd4, 0xfa, 0xc6, 0x13, 0x9d, 0xe1, 0xb5, 0x5a, 0xad, 0x84, 0xfe,
	0x11, 0x42, 0x09, 0x8c, 0x25, 0x9d, 0x68, 0x9e, 0xce, 0x70, 0xcb, 0xaa, 0x9b, 0x95, 0x3a, 0x00,
	0xc8, 0xa3, 0x6e, 0x02, 0x51, 0x89, 0x83, 0x9f, 0x4d, 0x84, 0x86, 0xb6, 0xf0, 0x91, 0x48, 0xa1,
	0x4c, 0x62, 0x1a, 0x5b, 0x3c, 0xdd, 0x7b, 0x3b, 0x8d, 0x1c, 0xbd, 0x93, 0xb8, 0xf1, 0x77, 0x89,
	0x9b, 0xab, 0x12, 0xbf, 0x46, 0x3b, 0x09, 0x57, 0x1a, 0xa4, 0xe6, 0x20, 0xc6, 0x05, 0x24, 0x34,
	0x5f, 0x3c, 0xe2, 0xa5, 0xbd, 0x9a, 0x68, 0x7b, 0xee, 0x7d, 0x30, 0x9a, 0xff, 0x18, 0x79, 0xa7,
	0xb8, 0xb5, 0xdf, 0x3c, 0xd8, 0xe8, 0x6f, 0x57, 0xee, 0x5b, 0xb3, 0x0a, 0xaf, 0x5e, 0x46, 0xde,
	0xa9, 0xc1, 0x67, 0xb8, 0x7d, 0x0f, 0x3e, 0x33, 0xf8, 0x02, 0xaf, 0xdf, 0x83, 0x2f, 0xfc, 0x23,
	0xd4, 0x8d, 0xb9, 0x10, 0x5c, 0xb0, 0xf1, 0x0d, 0xee, 0xd4, 0x9e, 0xa0, 0xe3, 0x84, 0x4f, 0x77,
	0xe5, 0x19, 0xee, 0xae, 0x94, 0x3f, 0xfb, 0x87, 0xa8, 0x29, 0x81, 0x63, 0x64, 0x35, 0x5c, 0x69,
	0x8b, 0xeb, 0x16, 0x19, 0x29, 0xf8, 0x8a, 0xb6, 0x86, 0x19, 0x11, 0x82, 0xe6, 0x36, 0xda, 0x71,
	0xdf, 0x0f, 0xd0, 0x9a, 0x20, 0x05, 0x5d, 0xbc, 0x23, 0xd7, 0x91, 0x65, 0xfe, 0x33, 0xd4, 0xbe,
	0x26, 0xf9, 0x15, 0x55, 0xb8, 0x51, 0x73, 0x3e, 0x73, 0x45, 0x25, 0x0e, 0xbe, 0x7b, 0x68, 0x7b,
	0x08, 0xc5, 0x54, 0x52, 0xa5, 0x68, 0x32, 0x2a, 0x08, 0xa3, 0x0f, 0x59, 0x83, 0x14, 0x64, 0x41,
	0x96, 0xd6, 0xc0, 0x45, 0x71, 0xd4, 0x04, 0x4e, 0x88, 0x26, 0xb8, 0x69, 0xa3, 0x2c, 0xd6, 0x62,
	0x59, 0xf0, 0xab, 0x81, 0x5a, 0x0f, 0xfe, 0xf5, 0x7f, 0xb8, 0x84, 0x87, 0xa8, 0x43, 0xc5, 0x04,
	0x12, 0x2e, 0xd8, 0x3d, 0xcb, 0x77, 0xcb, 0xfd, 0x10, 0x6d, 0x72, 0x35, 0x8e, 0x39, 0xa3, 0x22,
	0xe1, 0x44, 0xd4, 0xfe, 0xc9, 0x36, 0xb8, 0x1a, 0x54, 0x82, 0x29, 0x40, 0x69, 0x3a, 0xc5, 0xed,
	0xda, 0x04, 0x96, 0xdd, 0x96, 0xb4, 0xbe, 0xa2, 0xa4, 0x1f, 0x1e, 0xea, 0x0e, 0x21, 0x07, 0x19,
	0xbd, 0x1b, 0x9c, 0x98, 0xf5, 0xad, 0x3a, 0x5a, 0xba, 0x5e, 0x4f, 0x1a, 0xcc, 0x5c, 0x35, 0xcb,
	0x98, 0x19, 0x1c, 0xbb, 0x4a, 0x96, 0x71, 0x6c, 0x30, 0x71, 0x45, 0x2c, 0x63, 0x32, 0x18, 0x7e,
	0x39, 0x61, 0x5c, 0x67, 0x57, 0x71, 0x6f, 0x02, 0x45, 0x18, 0x41, 0x0c, 0xfa, 0x52, 0x5f, 0x25,
	0x1c, 0xc2, 0xd2, 0x7d, 0x51, 0x28, 0x16, 0x9a, 0x4f, 0xf9, 0xaa, 0xbf, 0x91, 0xaa, 0xfa, 0x92,
	0x42, 0xb1, 0x5e, 0x39, 0x8c, 0xdb, 0xf6, 0xa9, 0x3d, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x98,
	0x49, 0x0a, 0x4a, 0xfb, 0x05, 0x00, 0x00,
}
