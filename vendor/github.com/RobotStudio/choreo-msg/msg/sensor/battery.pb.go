// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sensor/battery.proto

package sensor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo3 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo1 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo4 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo2 "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type BatteryState_Status int32

const (
	BatteryState_STATUS_UNKNOWN      BatteryState_Status = 0
	BatteryState_STATUS_CHARGING     BatteryState_Status = 1
	BatteryState_STATUS_DISCHARGING  BatteryState_Status = 2
	BatteryState_STATUS_NOT_CHARGING BatteryState_Status = 3
	BatteryState_STATUS_FULL         BatteryState_Status = 4
)

var BatteryState_Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_CHARGING",
	2: "STATUS_DISCHARGING",
	3: "STATUS_NOT_CHARGING",
	4: "STATUS_FULL",
}
var BatteryState_Status_value = map[string]int32{
	"STATUS_UNKNOWN":      0,
	"STATUS_CHARGING":     1,
	"STATUS_DISCHARGING":  2,
	"STATUS_NOT_CHARGING": 3,
	"STATUS_FULL":         4,
}

func (x BatteryState_Status) String() string {
	return proto.EnumName(BatteryState_Status_name, int32(x))
}
func (BatteryState_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

type BatteryState_Health int32

const (
	BatteryState_HEALTH_UNKNOWN               BatteryState_Health = 0
	BatteryState_HEALTH_GOOD                  BatteryState_Health = 1
	BatteryState_HEALTH_OVERHEAT              BatteryState_Health = 2
	BatteryState_HEALTH_DEAD                  BatteryState_Health = 3
	BatteryState_HEALTH_OVERVOLTAGE           BatteryState_Health = 4
	BatteryState_HEALTH_UNSPEC_FAILURE        BatteryState_Health = 5
	BatteryState_HEALTH_COLD                  BatteryState_Health = 6
	BatteryState_HEALTH_WATCHDOG_TIMER_EXPIRE BatteryState_Health = 7
	BatteryState_HEALTH_SAFETY_TIMER_EXPIRE   BatteryState_Health = 8
)

var BatteryState_Health_name = map[int32]string{
	0: "HEALTH_UNKNOWN",
	1: "HEALTH_GOOD",
	2: "HEALTH_OVERHEAT",
	3: "HEALTH_DEAD",
	4: "HEALTH_OVERVOLTAGE",
	5: "HEALTH_UNSPEC_FAILURE",
	6: "HEALTH_COLD",
	7: "HEALTH_WATCHDOG_TIMER_EXPIRE",
	8: "HEALTH_SAFETY_TIMER_EXPIRE",
}
var BatteryState_Health_value = map[string]int32{
	"HEALTH_UNKNOWN":               0,
	"HEALTH_GOOD":                  1,
	"HEALTH_OVERHEAT":              2,
	"HEALTH_DEAD":                  3,
	"HEALTH_OVERVOLTAGE":           4,
	"HEALTH_UNSPEC_FAILURE":        5,
	"HEALTH_COLD":                  6,
	"HEALTH_WATCHDOG_TIMER_EXPIRE": 7,
	"HEALTH_SAFETY_TIMER_EXPIRE":   8,
}

func (x BatteryState_Health) String() string {
	return proto.EnumName(BatteryState_Health_name, int32(x))
}
func (BatteryState_Health) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 1} }

type BatteryState_Technology int32

const (
	BatteryState_TECHNOLOGY_UNKNOWN BatteryState_Technology = 0
	BatteryState_TECHNOLOGY_NIMH    BatteryState_Technology = 1
	BatteryState_TECHNOLOGY_LION    BatteryState_Technology = 2
	BatteryState_TECHNOLOGY_LIPO    BatteryState_Technology = 3
	BatteryState_TECHNOLOGY_LIFE    BatteryState_Technology = 4
	BatteryState_TECHNOLOGY_NICD    BatteryState_Technology = 5
	BatteryState_TECHNOLOGY_LIMN    BatteryState_Technology = 6
)

var BatteryState_Technology_name = map[int32]string{
	0: "TECHNOLOGY_UNKNOWN",
	1: "TECHNOLOGY_NIMH",
	2: "TECHNOLOGY_LION",
	3: "TECHNOLOGY_LIPO",
	4: "TECHNOLOGY_LIFE",
	5: "TECHNOLOGY_NICD",
	6: "TECHNOLOGY_LIMN",
}
var BatteryState_Technology_value = map[string]int32{
	"TECHNOLOGY_UNKNOWN": 0,
	"TECHNOLOGY_NIMH":    1,
	"TECHNOLOGY_LION":    2,
	"TECHNOLOGY_LIPO":    3,
	"TECHNOLOGY_LIFE":    4,
	"TECHNOLOGY_NICD":    5,
	"TECHNOLOGY_LIMN":    6,
}

func (x BatteryState_Technology) String() string {
	return proto.EnumName(BatteryState_Technology_name, int32(x))
}
func (BatteryState_Technology) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 2} }

type BatteryState struct {
	Status                BatteryState_Status     `protobuf:"varint,1,opt,name=status,enum=choreo.BatteryState_Status" json:"status,omitempty"`
	Health                BatteryState_Health     `protobuf:"varint,2,opt,name=health,enum=choreo.BatteryState_Health" json:"health,omitempty"`
	Technology            BatteryState_Technology `protobuf:"varint,3,opt,name=technology,enum=choreo.BatteryState_Technology" json:"technology,omitempty"`
	Header                *choreo1.Header         `protobuf:"bytes,4,opt,name=header" json:"header,omitempty"`
	Voltage               *choreo.Float32         `protobuf:"bytes,5,opt,name=voltage" json:"voltage,omitempty"`
	Current               *choreo.Float32         `protobuf:"bytes,6,opt,name=current" json:"current,omitempty"`
	Charge                *choreo.Float32         `protobuf:"bytes,7,opt,name=charge" json:"charge,omitempty"`
	Capacity              *choreo.Float32         `protobuf:"bytes,8,opt,name=capacity" json:"capacity,omitempty"`
	DesignCapacity        *choreo.Float32         `protobuf:"bytes,9,opt,name=design_capacity,json=designCapacity" json:"design_capacity,omitempty"`
	Percentage            *choreo.Float32         `protobuf:"bytes,10,opt,name=percentage" json:"percentage,omitempty"`
	PowerSupplyStatus     *choreo4.UInt32         `protobuf:"bytes,12,opt,name=power_supply_status,json=powerSupplyStatus" json:"power_supply_status,omitempty"`
	PowerSupplyHealth     *choreo4.UInt32         `protobuf:"bytes,13,opt,name=power_supply_health,json=powerSupplyHealth" json:"power_supply_health,omitempty"`
	PowerSupplyTechnology *choreo4.UInt32         `protobuf:"bytes,14,opt,name=power_supply_technology,json=powerSupplyTechnology" json:"power_supply_technology,omitempty"`
	Present               *choreo3.Bool           `protobuf:"bytes,15,opt,name=present" json:"present,omitempty"`
	CellVoltage           *choreo.Float32         `protobuf:"bytes,16,opt,name=cell_voltage,json=cellVoltage" json:"cell_voltage,omitempty"`
	Location              *choreo2.String         `protobuf:"bytes,17,opt,name=location" json:"location,omitempty"`
	SerialNumber          *choreo2.String         `protobuf:"bytes,18,opt,name=serial_number,json=serialNumber" json:"serial_number,omitempty"`
}

func (m *BatteryState) Reset()                    { *m = BatteryState{} }
func (m *BatteryState) String() string            { return proto.CompactTextString(m) }
func (*BatteryState) ProtoMessage()               {}
func (*BatteryState) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *BatteryState) GetStatus() BatteryState_Status {
	if m != nil {
		return m.Status
	}
	return BatteryState_STATUS_UNKNOWN
}

func (m *BatteryState) GetHealth() BatteryState_Health {
	if m != nil {
		return m.Health
	}
	return BatteryState_HEALTH_UNKNOWN
}

func (m *BatteryState) GetTechnology() BatteryState_Technology {
	if m != nil {
		return m.Technology
	}
	return BatteryState_TECHNOLOGY_UNKNOWN
}

func (m *BatteryState) GetHeader() *choreo1.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BatteryState) GetVoltage() *choreo.Float32 {
	if m != nil {
		return m.Voltage
	}
	return nil
}

func (m *BatteryState) GetCurrent() *choreo.Float32 {
	if m != nil {
		return m.Current
	}
	return nil
}

func (m *BatteryState) GetCharge() *choreo.Float32 {
	if m != nil {
		return m.Charge
	}
	return nil
}

func (m *BatteryState) GetCapacity() *choreo.Float32 {
	if m != nil {
		return m.Capacity
	}
	return nil
}

func (m *BatteryState) GetDesignCapacity() *choreo.Float32 {
	if m != nil {
		return m.DesignCapacity
	}
	return nil
}

func (m *BatteryState) GetPercentage() *choreo.Float32 {
	if m != nil {
		return m.Percentage
	}
	return nil
}

func (m *BatteryState) GetPowerSupplyStatus() *choreo4.UInt32 {
	if m != nil {
		return m.PowerSupplyStatus
	}
	return nil
}

func (m *BatteryState) GetPowerSupplyHealth() *choreo4.UInt32 {
	if m != nil {
		return m.PowerSupplyHealth
	}
	return nil
}

func (m *BatteryState) GetPowerSupplyTechnology() *choreo4.UInt32 {
	if m != nil {
		return m.PowerSupplyTechnology
	}
	return nil
}

func (m *BatteryState) GetPresent() *choreo3.Bool {
	if m != nil {
		return m.Present
	}
	return nil
}

func (m *BatteryState) GetCellVoltage() *choreo.Float32 {
	if m != nil {
		return m.CellVoltage
	}
	return nil
}

func (m *BatteryState) GetLocation() *choreo2.String {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *BatteryState) GetSerialNumber() *choreo2.String {
	if m != nil {
		return m.SerialNumber
	}
	return nil
}

func init() {
	proto.RegisterType((*BatteryState)(nil), "choreo.BatteryState")
	proto.RegisterEnum("choreo.BatteryState_Status", BatteryState_Status_name, BatteryState_Status_value)
	proto.RegisterEnum("choreo.BatteryState_Health", BatteryState_Health_name, BatteryState_Health_value)
	proto.RegisterEnum("choreo.BatteryState_Technology", BatteryState_Technology_name, BatteryState_Technology_value)
}

func init() { proto.RegisterFile("sensor/battery.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x95, 0xdd, 0x72, 0xf2, 0x44,
	0x18, 0xc7, 0x05, 0xda, 0x80, 0x0f, 0xbc, 0x90, 0x77, 0x79, 0xdb, 0xc6, 0xea, 0x68, 0x87, 0x03,
	0xad, 0x5f, 0x30, 0x03, 0x27, 0x1e, 0xe9, 0xa4, 0x10, 0x48, 0xc6, 0x34, 0xe9, 0x24, 0xa1, 0xb5,
	0x9e, 0x64, 0x42, 0x58, 0x21, 0x33, 0x21, 0x9b, 0xd9, 0x2c, 0x75, 0xb8, 0x1d, 0xef, 0xca, 0xeb,
	0xf0, 0x06, 0x9c, 0x24, 0x0b, 0x04, 0x89, 0x7a, 0xc0, 0xc9, 0xef, 0xf9, 0xfd, 0xf7, 0xe3, 0xd9,
	0x07, 0x80, 0x0f, 0x09, 0x8e, 0x12, 0x42, 0x07, 0x0b, 0x8f, 0x31, 0x4c, 0x77, 0xfd, 0x98, 0x12,
	0x46, 0x90, 0xe0, 0xaf, 0x09, 0xc5, 0xe4, 0xf6, 0x43, 0x4c, 0x83, 0x4d, 0xc0, 0x82, 0x37, 0x3c,
	0x58, 0x10, 0x12, 0xe6, 0xd5, 0xdb, 0xab, 0x23, 0xfd, 0x2d, 0x24, 0x1e, 0xe3, 0xf8, 0xfa, 0x88,
	0xd7, 0xd8, 0x5b, 0x62, 0xca, 0x79, 0xf7, 0xc8, 0x83, 0xa8, 0x44, 0x4e, 0x18, 0x0d, 0xa2, 0x55,
	0xce, 0x7b, 0x7f, 0x01, 0xb4, 0x1e, 0xf2, 0xb3, 0xd8, 0xcc, 0x63, 0x18, 0x8d, 0x40, 0x48, 0x98,
	0xc7, 0xb6, 0x89, 0x54, 0xb9, 0xab, 0xdc, 0xb7, 0x87, 0x9f, 0xf6, 0xf3, 0xb3, 0xf5, 0x8b, 0x56,
	0xdf, 0xce, 0x14, 0x8b, 0xab, 0x69, 0x68, 0x8d, 0xbd, 0x90, 0xad, 0xa5, 0xea, 0x7f, 0x84, 0xd4,
	0x4c, 0xb1, 0xb8, 0x8a, 0x7e, 0x02, 0x60, 0xd8, 0x5f, 0x47, 0x24, 0x24, 0xab, 0x9d, 0x54, 0xcb,
	0x82, 0x5f, 0x94, 0x06, 0x9d, 0x83, 0x66, 0x15, 0x22, 0xe8, 0xcb, 0x6c, 0xd7, 0x25, 0xa6, 0xd2,
	0xc5, 0x5d, 0xe5, 0xbe, 0x39, 0x6c, 0xef, 0xc3, 0x6a, 0x46, 0x2d, 0x5e, 0x45, 0x5f, 0x43, 0xfd,
	0x8d, 0x84, 0xcc, 0x5b, 0x61, 0xe9, 0x32, 0x13, 0x3b, 0x7b, 0x71, 0x9a, 0xb6, 0x73, 0x34, 0xb4,
	0xf6, 0xf5, 0x54, 0xf5, 0xb7, 0x94, 0xe2, 0x88, 0x49, 0xc2, 0xbf, 0xa8, 0xbc, 0x8e, 0xbe, 0x02,
	0xc1, 0x5f, 0x7b, 0x74, 0x85, 0xa5, 0x7a, 0xb9, 0xc9, 0xcb, 0xe8, 0x5b, 0x68, 0xf8, 0x5e, 0xec,
	0xf9, 0x01, 0xdb, 0x49, 0x8d, 0x72, 0xf5, 0x20, 0xa0, 0x1f, 0xa0, 0xb3, 0xc4, 0x49, 0xb0, 0x8a,
	0xdc, 0x43, 0xe6, 0xe3, 0xf2, 0x4c, 0x3b, 0xf7, 0xc6, 0xfb, 0xe4, 0x00, 0x20, 0xc6, 0xd4, 0xc7,
	0x51, 0x76, 0x51, 0x28, 0x0f, 0x15, 0x14, 0xf4, 0x23, 0x74, 0x63, 0xf2, 0x3b, 0xa6, 0x6e, 0xb2,
	0x8d, 0xe3, 0x70, 0xe7, 0xf2, 0x67, 0x6f, 0x9d, 0xf6, 0x72, 0xae, 0x45, 0x69, 0xf0, 0x7d, 0xa6,
	0xda, 0x99, 0x99, 0x3f, 0xfe, 0x59, 0x9e, 0x4f, 0xc0, 0xbb, 0xff, 0xcd, 0xe7, 0x73, 0x80, 0xa6,
	0x70, 0x73, 0x92, 0x2f, 0x0c, 0x43, 0xbb, 0x74, 0x8d, 0xab, 0xc2, 0x1a, 0x4e, 0x71, 0x0c, 0xea,
	0x31, 0xc5, 0x49, 0xfa, 0x66, 0x9d, 0x2c, 0xd7, 0x3a, 0x0c, 0x11, 0x21, 0xa1, 0xb5, 0x2f, 0xa2,
	0x21, 0xb4, 0x7c, 0x1c, 0x86, 0xee, 0x7e, 0x16, 0xc4, 0xf2, 0x16, 0x35, 0x53, 0xe9, 0x99, 0xcf,
	0xc3, 0x37, 0xd0, 0x08, 0x89, 0xef, 0xb1, 0x80, 0x44, 0xd2, 0xfb, 0xd3, 0x43, 0xd9, 0xd9, 0xd7,
	0xc8, 0x3a, 0xd4, 0xd1, 0x08, 0xde, 0x25, 0x98, 0x06, 0x5e, 0xe8, 0x46, 0xdb, 0xcd, 0x02, 0x53,
	0x09, 0x95, 0x06, 0x5a, 0xb9, 0x64, 0x64, 0x4e, 0x2f, 0x01, 0x81, 0xb7, 0x13, 0x41, 0xdb, 0x76,
	0x64, 0x67, 0x6e, 0xbb, 0x73, 0xe3, 0x67, 0xc3, 0x7c, 0x31, 0xc4, 0x8f, 0x50, 0x17, 0x3a, 0x9c,
	0x8d, 0x55, 0xd9, 0x9a, 0x69, 0xc6, 0x4c, 0xac, 0xa0, 0x6b, 0x40, 0x1c, 0x4e, 0x34, 0xfb, 0xc0,
	0xab, 0xe8, 0x06, 0xba, 0x9c, 0x1b, 0xa6, 0x73, 0x0c, 0xd4, 0x50, 0x07, 0x9a, 0xbc, 0x30, 0x9d,
	0xeb, 0xba, 0x78, 0xd1, 0xfb, 0xb3, 0x02, 0x02, 0x7f, 0x04, 0x04, 0x6d, 0x55, 0x91, 0x75, 0x47,
	0x2d, 0xec, 0xda, 0x81, 0x26, 0x67, 0x33, 0xd3, 0x9c, 0x88, 0x95, 0xf4, 0x18, 0x1c, 0x98, 0xcf,
	0x8a, 0xa5, 0x2a, 0xb2, 0x23, 0x56, 0x0b, 0xd6, 0x44, 0x91, 0x27, 0x62, 0x2d, 0x3d, 0x57, 0xc1,
	0x7a, 0x36, 0x75, 0x47, 0x9e, 0x29, 0xe2, 0x05, 0xfa, 0x04, 0xae, 0x0e, 0x5b, 0xd8, 0x4f, 0xca,
	0xd8, 0x9d, 0xca, 0x9a, 0x3e, 0xb7, 0x14, 0xf1, 0xb2, 0xb0, 0xc6, 0xd8, 0xd4, 0x27, 0xa2, 0x80,
	0xee, 0xe0, 0x33, 0x0e, 0x5e, 0x64, 0x67, 0xac, 0x4e, 0xcc, 0x99, 0xeb, 0x68, 0x8f, 0x8a, 0xe5,
	0x2a, 0xbf, 0x3c, 0x69, 0x96, 0x22, 0xd6, 0xd1, 0xe7, 0x70, 0xcb, 0x0d, 0x5b, 0x9e, 0x2a, 0xce,
	0xeb, 0x69, 0xbd, 0xd1, 0xfb, 0xa3, 0x02, 0x50, 0x18, 0x8e, 0x6b, 0x40, 0x8e, 0x32, 0x56, 0x0d,
	0x53, 0x37, 0x67, 0xaf, 0xa7, 0x9d, 0x2d, 0x70, 0x43, 0x7b, 0x54, 0xf3, 0x7b, 0x16, 0xa0, 0xae,
	0x99, 0x86, 0x58, 0x3d, 0x83, 0x4f, 0xa6, 0x58, 0x3b, 0x83, 0xd3, 0xf4, 0xa2, 0xff, 0x5c, 0x73,
	0x3c, 0x11, 0x2f, 0xcf, 0xcc, 0x47, 0x43, 0x14, 0x1e, 0xfa, 0xbf, 0x7e, 0xb7, 0x0a, 0xd8, 0x7a,
	0xbb, 0xe8, 0xfb, 0x64, 0x33, 0xb0, 0xc8, 0x82, 0x30, 0x9b, 0x6d, 0x97, 0x01, 0x19, 0xe4, 0xb3,
	0xf2, 0xfd, 0x26, 0x59, 0x0d, 0xd2, 0x4f, 0xfe, 0x6f, 0xb1, 0x10, 0xb2, 0x1f, 0xeb, 0xd1, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x30, 0x7b, 0xcd, 0x2d, 0x3e, 0x06, 0x00, 0x00,
}
