// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diagnostic/diagnostic.proto

package msg

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo2 "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo1 "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DiagnosticStatus_Level int32

const (
	DiagnosticStatus_OK    DiagnosticStatus_Level = 0
	DiagnosticStatus_WARN  DiagnosticStatus_Level = 1
	DiagnosticStatus_ERROR DiagnosticStatus_Level = 2
	DiagnosticStatus_STALE DiagnosticStatus_Level = 3
)

var DiagnosticStatus_Level_name = map[int32]string{
	0: "OK",
	1: "WARN",
	2: "ERROR",
	3: "STALE",
}
var DiagnosticStatus_Level_value = map[string]int32{
	"OK":    0,
	"WARN":  1,
	"ERROR": 2,
	"STALE": 3,
}

func (x DiagnosticStatus_Level) String() string {
	return proto.EnumName(DiagnosticStatus_Level_name, int32(x))
}
func (DiagnosticStatus_Level) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type KeyValue struct {
	Key   *choreo1.String `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *choreo1.String `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *KeyValue) Reset()                    { *m = KeyValue{} }
func (m *KeyValue) String() string            { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()               {}
func (*KeyValue) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *KeyValue) GetKey() *choreo1.String {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() *choreo1.String {
	if m != nil {
		return m.Value
	}
	return nil
}

type DiagnosticStatus struct {
	Level      DiagnosticStatus_Level `protobuf:"varint,1,opt,name=level,enum=choreo.DiagnosticStatus_Level" json:"level,omitempty"`
	Name       *choreo1.String        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Message    *choreo1.String        `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	HardwareId *choreo1.String        `protobuf:"bytes,4,opt,name=hardware_id,json=hardwareId" json:"hardware_id,omitempty"`
	Values     []*KeyValue            `protobuf:"bytes,5,rep,name=values" json:"values,omitempty"`
}

func (m *DiagnosticStatus) Reset()                    { *m = DiagnosticStatus{} }
func (m *DiagnosticStatus) String() string            { return proto.CompactTextString(m) }
func (*DiagnosticStatus) ProtoMessage()               {}
func (*DiagnosticStatus) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *DiagnosticStatus) GetLevel() DiagnosticStatus_Level {
	if m != nil {
		return m.Level
	}
	return DiagnosticStatus_OK
}

func (m *DiagnosticStatus) GetName() *choreo1.String {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *DiagnosticStatus) GetMessage() *choreo1.String {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *DiagnosticStatus) GetHardwareId() *choreo1.String {
	if m != nil {
		return m.HardwareId
	}
	return nil
}

func (m *DiagnosticStatus) GetValues() []*KeyValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type DiagnosticArray struct {
	Header *choreo.Header      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Status []*DiagnosticStatus `protobuf:"bytes,2,rep,name=status" json:"status,omitempty"`
}

func (m *DiagnosticArray) Reset()                    { *m = DiagnosticArray{} }
func (m *DiagnosticArray) String() string            { return proto.CompactTextString(m) }
func (*DiagnosticArray) ProtoMessage()               {}
func (*DiagnosticArray) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *DiagnosticArray) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DiagnosticArray) GetStatus() []*DiagnosticStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ServiceResponse struct {
	Header  *choreo.Header  `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Success *choreo2.Bool   `protobuf:"bytes,2,opt,name=success" json:"success,omitempty"`
	Message *choreo1.String `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *ServiceResponse) Reset()                    { *m = ServiceResponse{} }
func (m *ServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ServiceResponse) ProtoMessage()               {}
func (*ServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ServiceResponse) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ServiceResponse) GetSuccess() *choreo2.Bool {
	if m != nil {
		return m.Success
	}
	return nil
}

func (m *ServiceResponse) GetMessage() *choreo1.String {
	if m != nil {
		return m.Message
	}
	return nil
}

type ServiceSelfTest struct {
	Id     *choreo1.String     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Passed *choreo2.Bool       `protobuf:"bytes,2,opt,name=passed" json:"passed,omitempty"`
	Status []*DiagnosticStatus `protobuf:"bytes,3,rep,name=status" json:"status,omitempty"`
}

func (m *ServiceSelfTest) Reset()                    { *m = ServiceSelfTest{} }
func (m *ServiceSelfTest) String() string            { return proto.CompactTextString(m) }
func (*ServiceSelfTest) ProtoMessage()               {}
func (*ServiceSelfTest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ServiceSelfTest) GetId() *choreo1.String {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ServiceSelfTest) GetPassed() *choreo2.Bool {
	if m != nil {
		return m.Passed
	}
	return nil
}

func (m *ServiceSelfTest) GetStatus() []*DiagnosticStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyValue)(nil), "choreo.KeyValue")
	proto.RegisterType((*DiagnosticStatus)(nil), "choreo.DiagnosticStatus")
	proto.RegisterType((*DiagnosticArray)(nil), "choreo.DiagnosticArray")
	proto.RegisterType((*ServiceResponse)(nil), "choreo.ServiceResponse")
	proto.RegisterType((*ServiceSelfTest)(nil), "choreo.ServiceSelfTest")
	proto.RegisterEnum("choreo.DiagnosticStatus_Level", DiagnosticStatus_Level_name, DiagnosticStatus_Level_value)
}

func init() { proto.RegisterFile("diagnostic/diagnostic.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 443 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xe1, 0x8a, 0xd3, 0x40,
	0x10, 0xc7, 0x6d, 0xd2, 0xe4, 0xce, 0xa9, 0xdc, 0x85, 0x45, 0x24, 0x9c, 0x70, 0x94, 0x70, 0x9e,
	0xfd, 0x62, 0x22, 0xd5, 0x17, 0xe8, 0xe1, 0x81, 0x72, 0x87, 0x07, 0x9b, 0x43, 0xc1, 0x2f, 0xb2,
	0x4d, 0xc6, 0x74, 0xb9, 0xa4, 0x5b, 0x76, 0x36, 0x95, 0x3e, 0x82, 0xf8, 0x16, 0x3e, 0xa9, 0x74,
	0x93, 0x58, 0xe9, 0xb5, 0xd0, 0x6f, 0xcb, 0xfc, 0x7f, 0x9b, 0xf9, 0xcf, 0x7f, 0xb2, 0xf0, 0x32,
	0x97, 0xa2, 0x98, 0x2b, 0x32, 0x32, 0x4b, 0x36, 0xc7, 0x78, 0xa1, 0x95, 0x51, 0xcc, 0xcf, 0x66,
	0x4a, 0xa3, 0x3a, 0x7b, 0xbe, 0xd0, 0xb2, 0x92, 0x46, 0x2e, 0x31, 0x99, 0x2a, 0x55, 0x36, 0xea,
	0xd9, 0x8b, 0x4d, 0x75, 0x86, 0x22, 0x47, 0xfd, 0xb8, 0x4e, 0x46, 0xcb, 0x79, 0xd1, 0xd4, 0x23,
	0x0e, 0xc7, 0x37, 0xb8, 0xfa, 0x22, 0xca, 0x1a, 0xd9, 0x10, 0xdc, 0x07, 0x5c, 0x85, 0xbd, 0x61,
	0x6f, 0x34, 0x18, 0x9f, 0xc4, 0x4d, 0x9f, 0x38, 0xb5, 0x38, 0x5f, 0x4b, 0xec, 0x02, 0xbc, 0xe5,
	0x1a, 0x0d, 0x9d, 0x9d, 0x4c, 0x23, 0x46, 0x7f, 0x1c, 0x08, 0x3e, 0xfc, 0xb3, 0x9d, 0x1a, 0x61,
	0x6a, 0x62, 0xef, 0xc1, 0x2b, 0x71, 0x89, 0xa5, 0xfd, 0xfc, 0xc9, 0xf8, 0xbc, 0xbb, 0xba, 0x0d,
	0xc6, 0xb7, 0x6b, 0x8a, 0x37, 0x30, 0x8b, 0xa0, 0x3f, 0x17, 0xd5, 0xbe, 0x7e, 0x56, 0x63, 0x23,
	0x38, 0xaa, 0x90, 0x48, 0x14, 0x18, 0xba, 0x3b, 0xb1, 0x4e, 0x66, 0x09, 0x0c, 0x66, 0x42, 0xe7,
	0x3f, 0x85, 0xc6, 0xef, 0x32, 0x0f, 0xfb, 0x3b, 0x69, 0xe8, 0x90, 0x4f, 0x39, 0x1b, 0x81, 0x6f,
	0x47, 0xa2, 0xd0, 0x1b, 0xba, 0xa3, 0xc1, 0x38, 0xe8, 0xd8, 0x2e, 0x33, 0xde, 0xea, 0x51, 0x02,
	0x9e, 0x35, 0xce, 0x7c, 0x70, 0xee, 0x6e, 0x82, 0x27, 0xec, 0x18, 0xfa, 0x5f, 0x27, 0xfc, 0x73,
	0xd0, 0x63, 0x4f, 0xc1, 0xbb, 0xe6, 0xfc, 0x8e, 0x07, 0xce, 0xfa, 0x98, 0xde, 0x4f, 0x6e, 0xaf,
	0x03, 0x37, 0x7a, 0x80, 0xd3, 0xcd, 0xe8, 0x13, 0xad, 0xc5, 0x8a, 0x5d, 0x82, 0xdf, 0xec, 0x6c,
	0x7b, 0x05, 0x1f, 0x6d, 0x95, 0xb7, 0x2a, 0x7b, 0x0b, 0x3e, 0xd9, 0xac, 0x42, 0xc7, 0xba, 0x0a,
	0xf7, 0x65, 0xc9, 0x5b, 0x2e, 0xfa, 0xdd, 0x83, 0xd3, 0x14, 0xf5, 0x52, 0x66, 0xc8, 0x91, 0x16,
	0x6a, 0x4e, 0x78, 0x70, 0xb7, 0x4b, 0x38, 0xa2, 0x3a, 0xcb, 0x90, 0xa8, 0xdd, 0xc2, 0xb3, 0x0e,
	0xbc, 0x52, 0xaa, 0xe4, 0x9d, 0x78, 0xf8, 0x1a, 0xa2, 0x5f, 0x1b, 0x37, 0x29, 0x96, 0x3f, 0xee,
	0x91, 0x0c, 0x3b, 0x07, 0x47, 0xe6, 0x7b, 0x7e, 0x3d, 0x47, 0xe6, 0xec, 0x02, 0xfc, 0x85, 0x20,
	0xc2, 0x7c, 0xa7, 0x89, 0x56, 0xfb, 0x2f, 0x19, 0xf7, 0xb0, 0x64, 0xae, 0x5e, 0x7f, 0x7b, 0x55,
	0x48, 0x33, 0xab, 0xa7, 0x71, 0xa6, 0xaa, 0x84, 0xab, 0xa9, 0x32, 0xa9, 0xa9, 0x73, 0xa9, 0x92,
	0xe6, 0xe6, 0x9b, 0x8a, 0x8a, 0xa4, 0xa2, 0x62, 0xea, 0xdb, 0xf7, 0xf2, 0xee, 0x6f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xaa, 0xd2, 0x9e, 0xe3, 0x9c, 0x03, 0x00, 0x00,
}
