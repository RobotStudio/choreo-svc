// Code generated by protoc-gen-go. DO NOT EDIT.
// source: primitive/double.proto

package rs_choreo_msg_primitive

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DoubleArray struct {
	Data []*Double `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
}

func (m *DoubleArray) Reset()                    { *m = DoubleArray{} }
func (m *DoubleArray) String() string            { return proto.CompactTextString(m) }
func (*DoubleArray) ProtoMessage()               {}
func (*DoubleArray) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DoubleArray) GetData() []*Double {
	if m != nil {
		return m.Data
	}
	return nil
}

type Double struct {
	Data float64 `protobuf:"fixed64,1,opt,name=data" json:"data,omitempty"`
}

func (m *Double) Reset()                    { *m = Double{} }
func (m *Double) String() string            { return proto.CompactTextString(m) }
func (*Double) ProtoMessage()               {}
func (*Double) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Double) GetData() float64 {
	if m != nil {
		return m.Data
	}
	return 0
}

func init() {
	proto.RegisterType((*DoubleArray)(nil), "choreo.DoubleArray")
	proto.RegisterType((*Double)(nil), "choreo.Double")
}

func init() { proto.RegisterFile("primitive/double.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x28, 0xca, 0xcc,
	0xcd, 0x2c, 0xc9, 0x2c, 0x4b, 0xd5, 0x4f, 0xc9, 0x2f, 0x4d, 0xca, 0x49, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xce, 0xc8, 0x2f, 0x4a, 0xcd, 0x57, 0x32, 0xe4, 0xe2, 0x76, 0x01,
	0x8b, 0x3b, 0x16, 0x15, 0x25, 0x56, 0x0a, 0x29, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30,
	0x2a, 0x30, 0x6b, 0x70, 0x1b, 0xf1, 0xe9, 0x41, 0x54, 0xe9, 0x41, 0x94, 0x04, 0x81, 0xe5, 0x94,
	0x64, 0xb8, 0xd8, 0x20, 0x7c, 0x21, 0x21, 0xb8, 0x6a, 0x46, 0x0d, 0x46, 0x88, 0xac, 0x93, 0x67,
	0x94, 0x7b, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x50, 0x7e, 0x52,
	0x7e, 0x49, 0x70, 0x49, 0x69, 0x4a, 0x66, 0xbe, 0x3e, 0xc4, 0x2c, 0xdd, 0xdc, 0xe2, 0x74, 0x7d,
	0x10, 0x86, 0x3b, 0xcc, 0xba, 0xa8, 0x18, 0x66, 0x4f, 0x6e, 0x71, 0xba, 0x1e, 0x5c, 0x3c, 0x89,
	0x0d, 0xec, 0x54, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x83, 0x8b, 0x8b, 0xc4, 0x00,
	0x00, 0x00,
}
