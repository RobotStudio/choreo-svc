// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geometric/twist.proto

package geometric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo1 "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TwistStamped struct {
	Header *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Twist  *Twist         `protobuf:"bytes,2,opt,name=twist" json:"twist,omitempty"`
}

func (m *TwistStamped) Reset()                    { *m = TwistStamped{} }
func (m *TwistStamped) String() string            { return proto.CompactTextString(m) }
func (*TwistStamped) ProtoMessage()               {}
func (*TwistStamped) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *TwistStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TwistStamped) GetTwist() *Twist {
	if m != nil {
		return m.Twist
	}
	return nil
}

type TwistWithCovarianceStamped struct {
	Header *choreo.Header       `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Twist  *TwistWithCovariance `protobuf:"bytes,2,opt,name=twist" json:"twist,omitempty"`
}

func (m *TwistWithCovarianceStamped) Reset()                    { *m = TwistWithCovarianceStamped{} }
func (m *TwistWithCovarianceStamped) String() string            { return proto.CompactTextString(m) }
func (*TwistWithCovarianceStamped) ProtoMessage()               {}
func (*TwistWithCovarianceStamped) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *TwistWithCovarianceStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TwistWithCovarianceStamped) GetTwist() *TwistWithCovariance {
	if m != nil {
		return m.Twist
	}
	return nil
}

type Twist struct {
	Linear  *Vector3 `protobuf:"bytes,1,opt,name=linear" json:"linear,omitempty"`
	Angular *Vector3 `protobuf:"bytes,2,opt,name=angular" json:"angular,omitempty"`
}

func (m *Twist) Reset()                    { *m = Twist{} }
func (m *Twist) String() string            { return proto.CompactTextString(m) }
func (*Twist) ProtoMessage()               {}
func (*Twist) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *Twist) GetLinear() *Vector3 {
	if m != nil {
		return m.Linear
	}
	return nil
}

func (m *Twist) GetAngular() *Vector3 {
	if m != nil {
		return m.Angular
	}
	return nil
}

type TwistWithCovariance struct {
	Twist      *Twist             `protobuf:"bytes,1,opt,name=twist" json:"twist,omitempty"`
	Covariance []*choreo1.Float64 `protobuf:"bytes,2,rep,name=covariance" json:"covariance,omitempty"`
}

func (m *TwistWithCovariance) Reset()                    { *m = TwistWithCovariance{} }
func (m *TwistWithCovariance) String() string            { return proto.CompactTextString(m) }
func (*TwistWithCovariance) ProtoMessage()               {}
func (*TwistWithCovariance) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *TwistWithCovariance) GetTwist() *Twist {
	if m != nil {
		return m.Twist
	}
	return nil
}

func (m *TwistWithCovariance) GetCovariance() []*choreo1.Float64 {
	if m != nil {
		return m.Covariance
	}
	return nil
}

func init() {
	proto.RegisterType((*TwistStamped)(nil), "choreo.TwistStamped")
	proto.RegisterType((*TwistWithCovarianceStamped)(nil), "choreo.TwistWithCovarianceStamped")
	proto.RegisterType((*Twist)(nil), "choreo.Twist")
	proto.RegisterType((*TwistWithCovariance)(nil), "choreo.TwistWithCovariance")
}

func init() { proto.RegisterFile("geometric/twist.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4b, 0x4f, 0x83, 0x40,
	0x10, 0xc7, 0x43, 0x4d, 0x31, 0x59, 0x5f, 0xc9, 0x9a, 0x36, 0x04, 0x2f, 0x0d, 0x26, 0x3e, 0x0e,
	0xb2, 0xa9, 0x35, 0x7e, 0x00, 0x4d, 0x8c, 0x67, 0x6a, 0x34, 0xb1, 0xa7, 0x65, 0x59, 0x61, 0x23,
	0x30, 0x64, 0x3b, 0xd0, 0xaf, 0x6f, 0x58, 0xa0, 0x94, 0xa8, 0x87, 0x1e, 0x38, 0x30, 0xff, 0xc7,
	0x6f, 0x33, 0x43, 0x26, 0xb1, 0x84, 0x4c, 0xa2, 0x56, 0x82, 0xe1, 0x46, 0xad, 0xd1, 0x2f, 0x34,
	0x20, 0x50, 0x5b, 0x24, 0xa0, 0x25, 0xb8, 0xd3, 0x42, 0xab, 0x4c, 0xa1, 0xaa, 0x24, 0x4b, 0x24,
	0x8f, 0xa4, 0x6e, 0x74, 0x77, 0xd2, 0xcf, 0xbf, 0x52, 0xe0, 0x6d, 0xcc, 0x9d, 0xf6, 0x6d, 0x95,
	0x14, 0x08, 0xad, 0xdd, 0x5b, 0x91, 0xe3, 0xb7, 0xba, 0x7d, 0x89, 0x3c, 0x2b, 0x64, 0x44, 0xaf,
	0x88, 0xdd, 0xd4, 0x39, 0xd6, 0xcc, 0xba, 0x39, 0xba, 0x3f, 0xf5, 0x1b, 0x9e, 0xff, 0x6a, 0xa6,
	0x41, 0xab, 0xd2, 0x4b, 0x32, 0x36, 0xaf, 0x72, 0x46, 0xc6, 0x76, 0xd2, 0xd9, 0x4c, 0x59, 0xd0,
	0x68, 0xde, 0x86, 0xb8, 0xe6, 0xff, 0x43, 0x61, 0xf2, 0x0c, 0x15, 0xd7, 0x8a, 0xe7, 0x42, 0xee,
	0x8b, 0x9a, 0x0f, 0x51, 0x17, 0x03, 0xd4, 0xb0, 0xba, 0x03, 0xaf, 0xc8, 0xd8, 0xa8, 0xf4, 0x9a,
	0xd8, 0xa9, 0xca, 0x25, 0xef, 0x18, 0x67, 0x5d, 0xf8, 0xdd, 0x2c, 0x61, 0x11, 0xb4, 0x32, 0xbd,
	0x25, 0x87, 0x3c, 0x8f, 0xcb, 0x94, 0xeb, 0x16, 0xf3, 0xcb, 0xd9, 0xe9, 0xde, 0x37, 0x39, 0xff,
	0x03, 0xdd, 0x6f, 0xc4, 0xfa, 0x7f, 0x23, 0x94, 0x11, 0x22, 0xb6, 0x11, 0x67, 0x34, 0x3b, 0xd8,
	0x25, 0xbd, 0xd4, 0xf7, 0x7a, 0x7c, 0x08, 0x76, 0x2c, 0x4f, 0xf3, 0x4f, 0x16, 0x2b, 0x4c, 0xca,
	0xd0, 0x17, 0x90, 0xb1, 0x00, 0x42, 0xc0, 0x25, 0x96, 0x91, 0x02, 0xd6, 0x84, 0xee, 0xb2, 0x75,
	0xcc, 0xea, 0x6f, 0x7b, 0xdf, 0xd0, 0x36, 0x97, 0x5d, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x59,
	0x88, 0x3c, 0xb0, 0x41, 0x02, 0x00, 0x00,
}
