// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geometric/pose.proto

package rs_choreo_msg_geometric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo1 "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PoseStamped struct {
	Header *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Pose   *Pose          `protobuf:"bytes,2,opt,name=pose" json:"pose,omitempty"`
}

func (m *PoseStamped) Reset()                    { *m = PoseStamped{} }
func (m *PoseStamped) String() string            { return proto.CompactTextString(m) }
func (*PoseStamped) ProtoMessage()               {}
func (*PoseStamped) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *PoseStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PoseStamped) GetPose() *Pose {
	if m != nil {
		return m.Pose
	}
	return nil
}

type PoseWithCovarianceStamped struct {
	Header *choreo.Header      `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Pose   *PoseWithCovariance `protobuf:"bytes,2,opt,name=pose" json:"pose,omitempty"`
}

func (m *PoseWithCovarianceStamped) Reset()                    { *m = PoseWithCovarianceStamped{} }
func (m *PoseWithCovarianceStamped) String() string            { return proto.CompactTextString(m) }
func (*PoseWithCovarianceStamped) ProtoMessage()               {}
func (*PoseWithCovarianceStamped) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *PoseWithCovarianceStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PoseWithCovarianceStamped) GetPose() *PoseWithCovariance {
	if m != nil {
		return m.Pose
	}
	return nil
}

type Pose2DStamped struct {
	Header *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Pose   *Pose2D        `protobuf:"bytes,2,opt,name=pose" json:"pose,omitempty"`
}

func (m *Pose2DStamped) Reset()                    { *m = Pose2DStamped{} }
func (m *Pose2DStamped) String() string            { return proto.CompactTextString(m) }
func (*Pose2DStamped) ProtoMessage()               {}
func (*Pose2DStamped) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *Pose2DStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Pose2DStamped) GetPose() *Pose2D {
	if m != nil {
		return m.Pose
	}
	return nil
}

type Pose struct {
	Position    *Point      `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Orientation *Quaternion `protobuf:"bytes,2,opt,name=orientation" json:"orientation,omitempty"`
}

func (m *Pose) Reset()                    { *m = Pose{} }
func (m *Pose) String() string            { return proto.CompactTextString(m) }
func (*Pose) ProtoMessage()               {}
func (*Pose) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *Pose) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Pose) GetOrientation() *Quaternion {
	if m != nil {
		return m.Orientation
	}
	return nil
}

type PoseArray struct {
	Header *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Poses  []*Pose        `protobuf:"bytes,2,rep,name=poses" json:"poses,omitempty"`
}

func (m *PoseArray) Reset()                    { *m = PoseArray{} }
func (m *PoseArray) String() string            { return proto.CompactTextString(m) }
func (*PoseArray) ProtoMessage()               {}
func (*PoseArray) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *PoseArray) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PoseArray) GetPoses() []*Pose {
	if m != nil {
		return m.Poses
	}
	return nil
}

type Pose2D struct {
	X     *choreo1.Float64 `protobuf:"bytes,1,opt,name=x" json:"x,omitempty"`
	Y     *choreo1.Float64 `protobuf:"bytes,2,opt,name=y" json:"y,omitempty"`
	Theta *choreo1.Float64 `protobuf:"bytes,3,opt,name=theta" json:"theta,omitempty"`
}

func (m *Pose2D) Reset()                    { *m = Pose2D{} }
func (m *Pose2D) String() string            { return proto.CompactTextString(m) }
func (*Pose2D) ProtoMessage()               {}
func (*Pose2D) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *Pose2D) GetX() *choreo1.Float64 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *Pose2D) GetY() *choreo1.Float64 {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *Pose2D) GetTheta() *choreo1.Float64 {
	if m != nil {
		return m.Theta
	}
	return nil
}

type PoseWithCovariance struct {
	Pose       *Pose              `protobuf:"bytes,1,opt,name=pose" json:"pose,omitempty"`
	Covariance []*choreo1.Float64 `protobuf:"bytes,2,rep,name=covariance" json:"covariance,omitempty"`
}

func (m *PoseWithCovariance) Reset()                    { *m = PoseWithCovariance{} }
func (m *PoseWithCovariance) String() string            { return proto.CompactTextString(m) }
func (*PoseWithCovariance) ProtoMessage()               {}
func (*PoseWithCovariance) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *PoseWithCovariance) GetPose() *Pose {
	if m != nil {
		return m.Pose
	}
	return nil
}

func (m *PoseWithCovariance) GetCovariance() []*choreo1.Float64 {
	if m != nil {
		return m.Covariance
	}
	return nil
}

func init() {
	proto.RegisterType((*PoseStamped)(nil), "choreo.PoseStamped")
	proto.RegisterType((*PoseWithCovarianceStamped)(nil), "choreo.PoseWithCovarianceStamped")
	proto.RegisterType((*Pose2DStamped)(nil), "choreo.Pose2DStamped")
	proto.RegisterType((*Pose)(nil), "choreo.Pose")
	proto.RegisterType((*PoseArray)(nil), "choreo.PoseArray")
	proto.RegisterType((*Pose2D)(nil), "choreo.Pose2D")
	proto.RegisterType((*PoseWithCovariance)(nil), "choreo.PoseWithCovariance")
}

func init() { proto.RegisterFile("geometric/pose.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0x45, 0xfe, 0x10, 0xed, 0xb8, 0x76, 0x61, 0x69, 0x8b, 0x2a, 0x28, 0x18, 0x41, 0x4b, 0x73,
	0x88, 0x04, 0x8e, 0xc9, 0x25, 0xa7, 0x24, 0x26, 0x1f, 0xb7, 0x44, 0x3e, 0x18, 0x92, 0xd3, 0x5a,
	0xde, 0x48, 0x0b, 0x91, 0x46, 0xd9, 0x5d, 0x1b, 0xfb, 0xdf, 0x87, 0xd5, 0x4a, 0xb2, 0x8c, 0x92,
	0x83, 0x0f, 0x3a, 0xec, 0x7b, 0x4f, 0xef, 0xcd, 0x30, 0x33, 0xf0, 0x23, 0x66, 0x98, 0x32, 0x25,
	0x78, 0x14, 0xe4, 0x28, 0x99, 0x9f, 0x0b, 0x54, 0x48, 0xec, 0x28, 0x41, 0xc1, 0xd0, 0xfd, 0x95,
	0x0b, 0x9e, 0x72, 0xc5, 0x37, 0x2c, 0x48, 0x18, 0x5d, 0x31, 0x61, 0x78, 0xf7, 0xe7, 0x1e, 0x7f,
	0x79, 0x45, 0xaa, 0x2a, 0xb8, 0x69, 0xc6, 0xb3, 0x0a, 0x76, 0xf7, 0xf0, 0xdb, 0x9a, 0x2a, 0x26,
	0x32, 0x8e, 0x99, 0xe1, 0xbc, 0x05, 0x0c, 0x1e, 0x50, 0xb2, 0xb9, 0xa2, 0x69, 0xce, 0x56, 0xe4,
	0x1f, 0xd8, 0x26, 0xc8, 0xb1, 0xc6, 0xd6, 0xff, 0xc1, 0x64, 0xe4, 0x9b, 0x4a, 0xfc, 0xbb, 0x02,
	0x0d, 0x4b, 0x96, 0x8c, 0xa1, 0xa7, 0xcb, 0x75, 0x3a, 0x85, 0xea, 0x5b, 0xa5, 0xd2, 0x56, 0x61,
	0xc1, 0x78, 0x12, 0x7e, 0xeb, 0xd7, 0x82, 0xab, 0xe4, 0x1a, 0x37, 0x54, 0x70, 0x9a, 0x45, 0x47,
	0xc7, 0xf8, 0x07, 0x31, 0x6e, 0x33, 0xe6, 0xd0, 0xb8, 0x0c, 0x7d, 0x86, 0xa1, 0xe6, 0x26, 0xb3,
	0x63, 0x83, 0xbc, 0x83, 0xa0, 0x51, 0x33, 0x68, 0x32, 0x2b, 0xcd, 0x63, 0xe8, 0xe9, 0x37, 0x39,
	0x81, 0x2f, 0x39, 0x4a, 0xae, 0x38, 0x66, 0xa5, 0xeb, 0x70, 0xaf, 0xe7, 0x99, 0x0a, 0x6b, 0x9a,
	0x4c, 0x61, 0x80, 0x82, 0xb3, 0x4c, 0xd1, 0x42, 0x6d, 0xdc, 0x49, 0xa5, 0x7e, 0xac, 0x87, 0x11,
	0x36, 0x65, 0xde, 0x02, 0xbe, 0xea, 0xa0, 0x4b, 0x21, 0xe8, 0xee, 0x88, 0x0e, 0xfa, 0xba, 0x4a,
	0xe9, 0x74, 0xc6, 0xdd, 0xd6, 0x48, 0x0c, 0xe5, 0xa5, 0x60, 0x9b, 0x8e, 0xc8, 0x1f, 0xb0, 0xb6,
	0xa5, 0xe1, 0xf7, 0x4a, 0x79, 0xa3, 0x37, 0xe9, 0x7c, 0x1a, 0x5a, 0x5b, 0x4d, 0xef, 0xca, 0x6a,
	0xdb, 0xf4, 0x8e, 0xfc, 0x85, 0xbe, 0x4a, 0x98, 0xa2, 0x4e, 0xf7, 0x63, 0x89, 0x61, 0xbd, 0x18,
	0x48, 0x7b, 0x52, 0xf5, 0xea, 0x58, 0x9f, 0xad, 0x0e, 0x09, 0x00, 0xa2, 0x5a, 0x5f, 0xf6, 0xd3,
	0xca, 0x68, 0x48, 0xae, 0xee, 0x9f, 0x6e, 0x63, 0xae, 0x92, 0xf5, 0xd2, 0x8f, 0x30, 0x0d, 0x42,
	0x5c, 0xa2, 0x9a, 0xab, 0xf5, 0x8a, 0x63, 0x60, 0x7e, 0x3a, 0x4d, 0x65, 0x1c, 0xe8, 0xaf, 0x3e,
	0x84, 0x0b, 0x21, 0x2b, 0xc3, 0x54, 0xc6, 0x7e, 0x8d, 0x2f, 0xed, 0xe2, 0x2c, 0xce, 0xde, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xc6, 0x7c, 0xda, 0x65, 0x98, 0x03, 0x00, 0x00,
}
