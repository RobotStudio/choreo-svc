// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geometric/wrench.proto

package rs_choreo_msg_geometric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WrenchStamped struct {
	Header *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Wrench *Wrench        `protobuf:"bytes,2,opt,name=wrench" json:"wrench,omitempty"`
}

func (m *WrenchStamped) Reset()                    { *m = WrenchStamped{} }
func (m *WrenchStamped) String() string            { return proto.CompactTextString(m) }
func (*WrenchStamped) ProtoMessage()               {}
func (*WrenchStamped) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{0} }

func (m *WrenchStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *WrenchStamped) GetWrench() *Wrench {
	if m != nil {
		return m.Wrench
	}
	return nil
}

type Wrench struct {
	Force  *Vector3 `protobuf:"bytes,1,opt,name=force" json:"force,omitempty"`
	Torque *Vector3 `protobuf:"bytes,2,opt,name=torque" json:"torque,omitempty"`
}

func (m *Wrench) Reset()                    { *m = Wrench{} }
func (m *Wrench) String() string            { return proto.CompactTextString(m) }
func (*Wrench) ProtoMessage()               {}
func (*Wrench) Descriptor() ([]byte, []int) { return fileDescriptor9, []int{1} }

func (m *Wrench) GetForce() *Vector3 {
	if m != nil {
		return m.Force
	}
	return nil
}

func (m *Wrench) GetTorque() *Vector3 {
	if m != nil {
		return m.Torque
	}
	return nil
}

func init() {
	proto.RegisterType((*WrenchStamped)(nil), "choreo.WrenchStamped")
	proto.RegisterType((*Wrench)(nil), "choreo.Wrench")
}

func init() { proto.RegisterFile("geometric/wrench.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 229 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xcf, 0x4b, 0x03, 0x31,
	0x10, 0x85, 0xa9, 0x60, 0x0e, 0x11, 0x15, 0xf6, 0x50, 0x4a, 0x4f, 0x52, 0xf0, 0xc7, 0xc5, 0x04,
	0xec, 0xd1, 0x9b, 0x17, 0xf5, 0x9a, 0x82, 0x8a, 0x17, 0xe9, 0x66, 0xc7, 0x24, 0x87, 0x38, 0xeb,
	0xec, 0x6c, 0xfd, 0xf7, 0xa5, 0x99, 0xb4, 0x28, 0x3d, 0xec, 0xe5, 0x7d, 0xef, 0x7d, 0xcc, 0x46,
	0x4f, 0x03, 0x60, 0x06, 0xa6, 0xe4, 0xed, 0x0f, 0xc1, 0x97, 0x8f, 0xa6, 0x27, 0x64, 0x6c, 0x94,
	0x8f, 0x48, 0x80, 0xf3, 0x69, 0x4f, 0x29, 0x27, 0x4e, 0x1b, 0xb0, 0x11, 0xd6, 0x1d, 0x90, 0xf0,
	0xf9, 0x9f, 0xdd, 0x06, 0x3c, 0x63, 0xcd, 0x17, 0x1f, 0xfa, 0xf4, 0xb5, 0x78, 0x56, 0xbc, 0xce,
	0x3d, 0x74, 0xcd, 0x95, 0x56, 0x32, 0x9c, 0x4d, 0x2e, 0x26, 0x37, 0x27, 0x77, 0x67, 0x46, 0xcc,
	0xe6, 0xa9, 0xa4, 0xae, 0xd2, 0x6d, 0x4f, 0x0e, 0x98, 0x1d, 0xfd, 0xef, 0x89, 0xce, 0x55, 0xba,
	0x78, 0xd3, 0x4a, 0x92, 0xe6, 0x52, 0x1f, 0x7f, 0x22, 0x79, 0xa8, 0xe2, 0xf3, 0xdd, 0xe0, 0xa5,
	0xdc, 0xb3, 0x74, 0x42, 0x9b, 0x6b, 0xad, 0x18, 0xe9, 0x7b, 0x84, 0x2a, 0x3e, 0xe8, 0x55, 0xfc,
	0xf0, 0xfc, 0xfe, 0x18, 0x12, 0xc7, 0xb1, 0x35, 0x1e, 0xb3, 0x75, 0xd8, 0x22, 0xaf, 0x78, 0xec,
	0x12, 0x5a, 0x19, 0xdc, 0xe6, 0x21, 0xd8, 0xed, 0xb7, 0xff, 0xf5, 0x7b, 0x1a, 0x76, 0xb2, 0x3c,
	0x04, 0xb3, 0xcf, 0x5b, 0x55, 0x1e, 0x63, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x06, 0x4d, 0x1f,
	0x64, 0x5e, 0x01, 0x00, 0x00,
}
