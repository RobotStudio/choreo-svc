// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geometric/point.proto

package rs_choreo_msg_geometric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"
import choreo1 "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Point32Stamped struct {
	Header *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Point  *Point32       `protobuf:"bytes,2,opt,name=point" json:"point,omitempty"`
}

func (m *Point32Stamped) Reset()                    { *m = Point32Stamped{} }
func (m *Point32Stamped) String() string            { return proto.CompactTextString(m) }
func (*Point32Stamped) ProtoMessage()               {}
func (*Point32Stamped) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Point32Stamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Point32Stamped) GetPoint() *Point32 {
	if m != nil {
		return m.Point
	}
	return nil
}

type PointStamped struct {
	Header *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Point  *Point         `protobuf:"bytes,2,opt,name=point" json:"point,omitempty"`
}

func (m *PointStamped) Reset()                    { *m = PointStamped{} }
func (m *PointStamped) String() string            { return proto.CompactTextString(m) }
func (*PointStamped) ProtoMessage()               {}
func (*PointStamped) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PointStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PointStamped) GetPoint() *Point {
	if m != nil {
		return m.Point
	}
	return nil
}

type Point32 struct {
	X *choreo1.Float32 `protobuf:"bytes,1,opt,name=x" json:"x,omitempty"`
	Y *choreo1.Float32 `protobuf:"bytes,2,opt,name=y" json:"y,omitempty"`
	Z *choreo1.Float32 `protobuf:"bytes,3,opt,name=z" json:"z,omitempty"`
}

func (m *Point32) Reset()                    { *m = Point32{} }
func (m *Point32) String() string            { return proto.CompactTextString(m) }
func (*Point32) ProtoMessage()               {}
func (*Point32) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *Point32) GetX() *choreo1.Float32 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *Point32) GetY() *choreo1.Float32 {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *Point32) GetZ() *choreo1.Float32 {
	if m != nil {
		return m.Z
	}
	return nil
}

type Point struct {
	X *choreo1.Float64 `protobuf:"bytes,1,opt,name=x" json:"x,omitempty"`
	Y *choreo1.Float64 `protobuf:"bytes,2,opt,name=y" json:"y,omitempty"`
	Z *choreo1.Float64 `protobuf:"bytes,3,opt,name=z" json:"z,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *Point) GetX() *choreo1.Float64 {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *Point) GetY() *choreo1.Float64 {
	if m != nil {
		return m.Y
	}
	return nil
}

func (m *Point) GetZ() *choreo1.Float64 {
	if m != nil {
		return m.Z
	}
	return nil
}

func init() {
	proto.RegisterType((*Point32Stamped)(nil), "choreo.Point32Stamped")
	proto.RegisterType((*PointStamped)(nil), "choreo.PointStamped")
	proto.RegisterType((*Point32)(nil), "choreo.Point32")
	proto.RegisterType((*Point)(nil), "choreo.Point")
}

func init() { proto.RegisterFile("geometric/point.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcb, 0x4b, 0xc3, 0x40,
	0x10, 0xc6, 0x89, 0xd2, 0x08, 0xab, 0x56, 0x08, 0x54, 0x42, 0x41, 0x90, 0x88, 0xe2, 0xc5, 0x5d,
	0x48, 0xc4, 0x8b, 0x37, 0x0f, 0x3e, 0x6e, 0x92, 0xde, 0xf4, 0x20, 0x79, 0x6c, 0x93, 0x05, 0xd7,
	0x09, 0x9b, 0xa9, 0xb4, 0xf9, 0xeb, 0x65, 0x1f, 0x89, 0x54, 0x68, 0xc0, 0x43, 0x2e, 0xdf, 0x6f,
	0xe6, 0xf7, 0x4d, 0x48, 0xc8, 0xac, 0xe2, 0x20, 0x39, 0x2a, 0x51, 0xb0, 0x06, 0xc4, 0x17, 0xd2,
	0x46, 0x01, 0x42, 0xe0, 0x17, 0x35, 0x28, 0x0e, 0xf3, 0xd3, 0x46, 0x09, 0x29, 0x50, 0x7c, 0x73,
	0x56, 0xf3, 0xac, 0xe4, 0xca, 0xf2, 0xf9, 0xec, 0x37, 0x5f, 0x7e, 0x42, 0xe6, 0xd6, 0xa2, 0x0f,
	0x32, 0x7d, 0xd5, 0x96, 0x24, 0x5e, 0x60, 0x26, 0x1b, 0x5e, 0x06, 0x57, 0xc4, 0xb7, 0x8b, 0xa1,
	0x77, 0xee, 0x5d, 0x1f, 0xc6, 0x53, 0x6a, 0xcd, 0xf4, 0xd9, 0xa4, 0xa9, 0xa3, 0xc1, 0x25, 0x99,
	0x98, 0xfe, 0x70, 0xcf, 0x8c, 0x9d, 0xf4, 0x63, 0x4e, 0x97, 0x5a, 0x1a, 0xbd, 0x93, 0x23, 0x93,
	0xfc, 0x57, 0x7f, 0xb1, 0xad, 0x3f, 0xde, 0xd2, 0xf7, 0xf2, 0x25, 0x39, 0x70, 0x75, 0xc1, 0x19,
	0xf1, 0xd6, 0x4e, 0x39, 0x9c, 0xf2, 0xa8, 0x5f, 0x34, 0x89, 0x53, 0x6f, 0xad, 0xf1, 0xe6, 0xef,
	0xa5, 0x03, 0xde, 0x68, 0xdc, 0x85, 0xfb, 0x3b, 0x70, 0x17, 0x95, 0x64, 0x62, 0x7a, 0x76, 0xb7,
	0xdc, 0xdd, 0x8e, 0xb6, 0x68, 0x3c, 0xd2, 0xa2, 0x71, 0xf7, 0xf0, 0xf2, 0xf6, 0x54, 0x09, 0xac,
	0x57, 0x39, 0x2d, 0x40, 0xb2, 0x14, 0x72, 0xc0, 0x05, 0xae, 0x4a, 0x01, 0xcc, 0xce, 0xde, 0xc8,
	0xb6, 0x62, 0xfa, 0x19, 0xfe, 0x80, 0x7b, 0xd5, 0xf6, 0x1e, 0xd9, 0x56, 0x74, 0xc8, 0x73, 0xdf,
	0x7c, 0xdd, 0xe4, 0x27, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xa2, 0x88, 0xc1, 0x2d, 0x02, 0x00, 0x00,
}
