// Code generated by protoc-gen-go. DO NOT EDIT.
// source: geometric/polygon.proto

package geometric

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import choreo "github.com/RobotStudio/choreo-msg/msg/primitive"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PolygonStamped struct {
	Header  *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Polygon *Polygon       `protobuf:"bytes,2,opt,name=polygon" json:"polygon,omitempty"`
}

func (m *PolygonStamped) Reset()                    { *m = PolygonStamped{} }
func (m *PolygonStamped) String() string            { return proto.CompactTextString(m) }
func (*PolygonStamped) ProtoMessage()               {}
func (*PolygonStamped) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *PolygonStamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PolygonStamped) GetPolygon() *Polygon {
	if m != nil {
		return m.Polygon
	}
	return nil
}

type Polygon32Stamped struct {
	Header  *choreo.Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Polygon *Polygon32     `protobuf:"bytes,2,opt,name=polygon" json:"polygon,omitempty"`
}

func (m *Polygon32Stamped) Reset()                    { *m = Polygon32Stamped{} }
func (m *Polygon32Stamped) String() string            { return proto.CompactTextString(m) }
func (*Polygon32Stamped) ProtoMessage()               {}
func (*Polygon32Stamped) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Polygon32Stamped) GetHeader() *choreo.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Polygon32Stamped) GetPolygon() *Polygon32 {
	if m != nil {
		return m.Polygon
	}
	return nil
}

type Polygon struct {
	Points []*Point `protobuf:"bytes,1,rep,name=points" json:"points,omitempty"`
}

func (m *Polygon) Reset()                    { *m = Polygon{} }
func (m *Polygon) String() string            { return proto.CompactTextString(m) }
func (*Polygon) ProtoMessage()               {}
func (*Polygon) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Polygon) GetPoints() []*Point {
	if m != nil {
		return m.Points
	}
	return nil
}

type Polygon32 struct {
	Points []*Point32 `protobuf:"bytes,1,rep,name=points" json:"points,omitempty"`
}

func (m *Polygon32) Reset()                    { *m = Polygon32{} }
func (m *Polygon32) String() string            { return proto.CompactTextString(m) }
func (*Polygon32) ProtoMessage()               {}
func (*Polygon32) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Polygon32) GetPoints() []*Point32 {
	if m != nil {
		return m.Points
	}
	return nil
}

func init() {
	proto.RegisterType((*PolygonStamped)(nil), "choreo.PolygonStamped")
	proto.RegisterType((*Polygon32Stamped)(nil), "choreo.Polygon32Stamped")
	proto.RegisterType((*Polygon)(nil), "choreo.Polygon")
	proto.RegisterType((*Polygon32)(nil), "choreo.Polygon32")
}

func init() { proto.RegisterFile("geometric/polygon.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0x89, 0x42, 0x8a, 0x53, 0x6c, 0x75, 0x41, 0x0d, 0x3d, 0x95, 0x80, 0x5a, 0x11, 0xb3,
	0xba, 0xf1, 0x17, 0x78, 0xf2, 0x28, 0xe9, 0xcd, 0x5b, 0x93, 0x2c, 0x9b, 0x01, 0x37, 0x13, 0xb6,
	0x53, 0xc1, 0x7f, 0x2f, 0x66, 0x37, 0xad, 0xe6, 0xe6, 0x61, 0x2f, 0xef, 0xcd, 0xf7, 0xde, 0xce,
	0xc0, 0x95, 0xd1, 0x64, 0x35, 0x3b, 0xac, 0x64, 0x47, 0x1f, 0x5f, 0x86, 0xda, 0xac, 0x73, 0xc4,
	0x24, 0xe2, 0xaa, 0x21, 0xa7, 0x69, 0x71, 0xd9, 0x39, 0xb4, 0xc8, 0xf8, 0xa9, 0x65, 0xa3, 0x37,
	0xb5, 0x76, 0xde, 0x5f, 0x5c, 0xfc, 0x06, 0xb1, 0x65, 0x2f, 0xa7, 0x15, 0xcc, 0xde, 0x7c, 0xce,
	0x9a, 0x37, 0xb6, 0xd3, 0xb5, 0xb8, 0x81, 0xd8, 0x83, 0x49, 0xb4, 0x8c, 0x56, 0x53, 0x35, 0xcb,
	0x7c, 0x72, 0xf6, 0xda, 0xab, 0x45, 0x70, 0xc5, 0x1d, 0x4c, 0xc2, 0x0f, 0x92, 0xa3, 0x7e, 0x70,
	0x3e, 0x0c, 0x86, 0xc0, 0x62, 0xf0, 0x53, 0x03, 0x67, 0x41, 0xcb, 0xd5, 0x7f, 0x6b, 0xee, 0xc7,
	0x35, 0xe7, 0xa3, 0x9a, 0x5c, 0x1d, 0x8a, 0x1e, 0x61, 0x12, 0x54, 0x71, 0x0d, 0x71, 0xbf, 0xe7,
	0x36, 0x89, 0x96, 0xc7, 0xab, 0xa9, 0x3a, 0x3d, 0x60, 0xd8, 0x72, 0x11, 0xcc, 0xf4, 0x19, 0x4e,
	0xf6, 0x39, 0xe2, 0x76, 0xc4, 0xcc, 0xff, 0x30, 0xb9, 0x1a, 0xa8, 0x97, 0xa7, 0x77, 0x69, 0x90,
	0x9b, 0x5d, 0x99, 0x55, 0x64, 0x65, 0x41, 0x25, 0xf1, 0x9a, 0x77, 0x35, 0x92, 0xf4, 0xc0, 0x83,
	0xdd, 0x1a, 0xf9, 0xf3, 0xf6, 0x47, 0x2f, 0xe3, 0xfe, 0xde, 0xf9, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3f, 0x36, 0xc7, 0x02, 0xc1, 0x01, 0x00, 0x00,
}
